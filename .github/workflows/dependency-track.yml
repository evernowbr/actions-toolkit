name: Dependency-Track

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
    secrets:
      DT_SCA_ENDPOINT:
        required: true
      DT_TOKEN:
        required: true

jobs:
  dt-security-scan:
    name: Run Scan
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate SBOM using Syft
        run: |
          echo'   ____       ___ __  '
          echo'  / __/__ __ / _// /_ '
          echo' _\ \ / // // _// __/ '
          echo'/___/ \_, //_/  \__/  '
          echo'     /___/            '
          echo "üîß Gerando SBOM da aplica√ß√£o" 
          syft dir:"${{ github.workspace }}" --verbose -o cyclonedx-json=raw_cyclonedx_report.json

          if [ $? -ne 0 ]; then
            echo "‚ùå Erro ao gerar o SBOM com Syft"
            exit 1
          fi

          echo "üßπ Normalizando SBOM..."
          jq 'if .components then .components |= unique_by(.name,.version) else . end' raw_cyclonedx_report.json > cyclonedx_report.json

          if [ ! -s cyclonedx_report.json ]; then
            echo "‚ùå SBOM normalizado est√° vazio ou n√£o foi gerado corretamente."
            exit 1
          fi

      - name: Upload SBOM to Dependency-Track
        env:
          DT_SCA_ENDPOINT: ${{ secrets.DT_SCA_ENDPOINT }}
          DT_TOKEN: ${{ secrets.DT_TOKEN }}
          DT_APP_DEFAULT_NAME: ${{ inputs.name }}
          DT_APP_DEFAULT_VERSION: ${{ inputs.version }}
        run: |
          echo'   ___                          __                          ______                 __   '
          echo'  / _ \ ___  ___  ___  ___  ___/ /___  ___  ____ __ __ ____/_  __/____ ___ _ ____ / /__ '
          echo' / // // -_)/ _ \/ -_)/ _ \/ _  // -_)/ _ \/ __// // //___/ / /  / __// _ `// __//  '_/ '
          echo'/____/ \__// .__/\__//_//_/\_,_/ \__//_//_/\__/ \_, /      /_/  /_/   \_,_/ \__//_/\_\  '
          echo'          /_/                                  /___/                                    '
          echo "üîê Codificando SBOM em base64..."
          BOMCONTENT=$(base64 -w 0 < cyclonedx_report.json)

          echo "üì¶ Montando payload..."
          PAYLOAD=$(jq -n \
            --arg name "$DT_APP_DEFAULT_NAME" \
            --arg version "$DT_APP_DEFAULT_VERSION" \
            --arg bom "$BOMCONTENT" \
            '{projectName: $name, projectVersion: $version, autoCreate: true, bom: $bom}')

          echo "$PAYLOAD" > bom_payload.json

          echo "üì§ Enviando SBOM para o Dependency-Track..."
          # Captura o HTTP status e mant√©m a resposta no arquivo response.json
          HTTP_STATUS=$(curl -s -o response.json -w "%{http_code}" -X PUT "${DT_SCA_ENDPOINT}/v1/bom" \
            -H "X-API-Key: ${DT_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "@bom_payload.json")

          if [[ "$HTTP_STATUS" -lt 200 || "$HTTP_STATUS" -ge 300 ]]; then
            echo "‚ùå Falha ao enviar SBOM. Status HTTP: $HTTP_STATUS"
            cat response.json
            exit 1
          else
            echo "‚úÖ SBOM enviado com sucesso. Status HTTP: $HTTP_STATUS"
          fi

          sbomToken=$(jq -r '.token' response.json)
          if [ -z "$sbomToken" ] || [ "$sbomToken" == "null" ]; then
            echo "‚ùå Token de processamento do SBOM n√£o encontrado."
            exit 1
          fi

          echo "‚è≥ Aguardando processamento do SBOM..."
          for i in {1..25}; do
            HTTP_STATUS=$(curl -s -o status.json -w "%{http_code}" -X GET "${DT_SCA_ENDPOINT}/v1/bom/token/${sbomToken}" \
              -H "X-API-Key: ${DT_TOKEN}" \
              -H "Content-Type: application/json")

            if [[ "$HTTP_STATUS" -lt 200 || "$HTTP_STATUS" -ge 300 ]]; then
              echo "‚ùå Erro ao consultar status do SBOM. Status HTTP: $HTTP_STATUS"
              cat status.json
              exit 1
            fi

            PROCESSING=$(jq -r '.processing' status.json)
            if [ "$PROCESSING" == "false" ]; then
              echo "‚úÖ Processamento conclu√≠do."
              break
            fi

            echo "‚è≥ SBOM ainda est√° sendo processado, tentando novamente... ($i/25)"
            sleep 10
          done

          if [ "$PROCESSING" != "false" ]; then
            echo "‚ùå Timeout aguardando o processamento do SBOM."
            exit 1
          fi

          # URL encode do nome do projeto
          PROJECT_NAME_URLENCODED=$(printf '%s' "$DT_APP_DEFAULT_NAME" | jq -sRr @uri)

          echo "üîç Consultando UUID do projeto..."
          HTTP_STATUS=$(curl -s -o lookup.json -w "%{http_code}" -X GET "${DT_SCA_ENDPOINT}/v1/project/lookup?name=${PROJECT_NAME_URLENCODED}&version=${DT_APP_DEFAULT_VERSION}" \
            -H "X-API-Key: ${DT_TOKEN}" \
            -H "Content-Type: application/json")

          if [[ "$HTTP_STATUS" -lt 200 || "$HTTP_STATUS" -ge 300 ]]; then
            echo "‚ùå Falha ao consultar UUID do projeto. Status HTTP: $HTTP_STATUS"
            cat lookup.json
            exit 1
          fi

          UUID=$(jq -r '.uuid' lookup.json)
          VIOLATIONS=$(jq -r '.metrics.policyViolationsSecurityUnaudited // 0' lookup.json)

          if [ -z "$UUID" ] || [ "$UUID" == "null" ]; then
            echo "‚ùå UUID do projeto n√£o encontrado."
            exit 1
          fi

          echo "‚úÖ UUID do projeto encontrado: $UUID"
          echo "‚ö†Ô∏è Violations Security Unaudited: $VIOLATIONS"

          # Aqui voc√™ pode adicionar mais passos, por exemplo, bloquear o pipeline se houver viola√ß√µes
          if [ "$VIOLATIONS" -gt 0 ]; then
            echo "‚ùå Existem viola√ß√µes de seguran√ßa n√£o auditadas. Abortando pipeline."
            exit 1
          else
            echo "‚úÖ Nenhuma viola√ß√£o de seguran√ßa n√£o auditada encontrada."
          fi

   
