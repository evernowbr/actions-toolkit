# docker-build-push.yml
name: Build and Push Docker Image to Google Artifact Registry

on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        required: true
        type: string
    secrets:
      GCP_SERVICE_ACCOUNT_KEY:
        required: true

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract repository name
      run: |
        IMAGE_NAME=$(basename $GITHUB_REPOSITORY)
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        echo "Using IMAGE_NAME=$IMAGE_NAME"

    - name: Set release version from input
      run: |
        echo "RELEASE_VERSION=${{ inputs.RELEASE_VERSION }}" >> $GITHUB_ENV
        echo "Using RELEASE_VERSION=${{ inputs.RELEASE_VERSION }}"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

    - name: Configure Docker for GAR
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Remove existing 'latest' tag from previous image (if exists)
      run: |
        IMAGE_URL=us-central1-docker.pkg.dev/evernow-lab/applications/${{ env.IMAGE_NAME }}
        DIGEST=$(gcloud artifacts docker tags list $IMAGE_URL \
          --filter="tag:latest" \
          --format="value(version)" 2>/dev/null || true)

        if [ -n "$DIGEST" ]; then
          echo "Removing 'latest' tag from digest: $DIGEST"
          gcloud artifacts docker tags delete \
            $IMAGE_URL:latest --quiet || true
        else
          echo "No existing 'latest' tag to delete"
        fi

    - name: Build Docker image
      run: |
        IMAGE_URL=us-central1-docker.pkg.dev/evernow-lab/applications/${{ env.IMAGE_NAME }}
        docker build -t $IMAGE_URL:${{ env.RELEASE_VERSION }} .

    - name: Push Docker image and get digest
      id: push
      run: |
        IMAGE_URL=us-central1-docker.pkg.dev/evernow-lab/applications/${{ env.IMAGE_NAME }}
        
        # Push image
        docker push $IMAGE_URL:${{ env.RELEASE_VERSION }}
        
        # Get digest after push
        DIGEST=$(gcloud artifacts docker images describe $IMAGE_URL:${{ env.RELEASE_VERSION }} \
          --format="value(image_summary.digest)")

        echo "DIGEST=$DIGEST" >> $GITHUB_ENV
        echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
        echo "Image pushed and digest captured: $DIGEST"
    
    - name: Tag pushed image as 'latest'
      run: |
        IMAGE_URL=us-central1-docker.pkg.dev/evernow-lab/applications/${{ env.IMAGE_NAME }}
        DIGEST=${{ env.DIGEST }}

        if [ -n "$DIGEST" ]; then
          echo "Tagging $IMAGE_URL@$DIGEST as latest"
          gcloud artifacts docker tags add \
            $IMAGE_URL@$DIGEST \
            $IMAGE_URL:latest
        else
          echo "ERROR: Digest not found"
          exit 1
        fi
