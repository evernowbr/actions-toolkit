name: Fortify FPR to SARIF Converter

permissions:
  contents: read
  actions: read
  security-events: write

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      sarif_multitool_version:
        description: 'Versão específica do SARIF MultiTool'
        required: false
        default: 'latest'
        type: string

    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true

jobs:
  fortify-fpr-sarif:
    name: FPR to SARIF Conversion
    runs-on: self-hosted
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Convert FPR to SARIF
        env:
          fortify_project_name: ${{ inputs.name }}
          fortify_version_name: ${{ inputs.version }}
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
        run: |
          echo "::notice title=FPR to SARIF::Starting conversion for $fortify_project_name/$fortify_version_name"
          
          # Buscar projeto e versão no SSC
          echo "::notice title=SSC Integration::Searching for project and version in SSC"
          
          # Buscar projeto existente
          project_response=$(curl -sS -k -X GET \
            -H "Accept: application/json" \
            -H "Authorization: FortifyToken $fortify_unified_login_token" \
            "$fortify_ssc_api_url/projects?q=name:$fortify_project_name" 2>/dev/null)
          
          if [[ $? -eq 0 ]] && echo "$project_response" | jq -e . >/dev/null 2>&1; then
            project_id=$(echo "$project_response" | jq -r '.data[0].id // empty')
            
            if [[ -n "$project_id" ]] && [[ "$project_id" != "null" ]]; then
              echo "::notice title=SSC Integration::Project found - ID: $project_id"
            else
              echo "::error title=SSC Integration::Project not found in SSC"
              exit 1
            fi
          else
            echo "::error title=SSC Integration::Failed to search project"
            exit 1
          fi
          
          # Buscar versão do projeto
          version_response=$(curl -sS -k -X GET \
            -H "Accept: application/json" \
            -H "Authorization: FortifyToken $fortify_unified_login_token" \
            "$fortify_ssc_api_url/projectVersions?q=project.id:$project_id;name:$fortify_version_name" 2>/dev/null)
          
          if [[ $? -eq 0 ]] && echo "$version_response" | jq -e . >/dev/null 2>&1; then
            version_id=$(echo "$version_response" | jq -r '.data[0].id // empty')
            
            if [[ -n "$version_id" ]] && [[ "$version_id" != "null" ]]; then
              echo "::notice title=SSC Integration::Version found - ID: $version_id"
            else
              echo "::error title=SSC Integration::Version not found in SSC"
              exit 1
            fi
          else
            echo "::error title=SSC Integration::Failed to search version"
            exit 1
          fi
          
          # Download FPR
          echo "::notice title=FPR Download::Downloading FPR from SSC"
          max_attempts=10
          attempt=1
          fpr_file=""
          
          while [[ $attempt -le $max_attempts ]] && [[ -z "$fpr_file" ]]; do
            echo "::notice title=FPR Download::Attempt $attempt of $max_attempts"
            
            artifacts_response=$(curl -sS -k -X GET -H "Accept: application/json" -H "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$version_id/artifacts" 2>/dev/null)
            
            if [[ $? -eq 0 ]] && echo "$artifacts_response" | jq -e . >/dev/null 2>&1; then
              fpr_id=$(echo "$artifacts_response" | jq -r '.data[]? | select(.name? | test("\\.fpr$")) | .id' | head -1)
              
              if [[ -n "$fpr_id" ]] && [[ "$fpr_id" != "null" ]]; then
                echo "::notice title=FPR Download::Found FPR artifact ID: $fpr_id"
                mkdir -p fortify-artifacts
                fpr_filename="$fortify_project_name-${fortify_version_name}.fpr"
                
                curl -sS -k -L -H "Authorization: FortifyToken $fortify_unified_login_token" -H "Accept: application/octet-stream" "$fortify_ssc_api_url/projectVersions/$version_id/artifacts/$fpr_id/content" -o "fortify-artifacts/$fpr_filename"
                
                if [[ -f "fortify-artifacts/$fpr_filename" ]] && [[ $(wc -c < "fortify-artifacts/$fpr_filename") -gt 1024 ]]; then
                  echo "::notice title=FPR Download::FPR downloaded successfully - $(wc -c < "fortify-artifacts/$fpr_filename") bytes"
                  fpr_file="fortify-artifacts/$fpr_filename"
                  break
                else
                  echo "::warning title=FPR Download::FPR file too small or missing"
                fi
              else
                echo "::warning title=FPR Download::No FPR artifact found in response"
              fi
            else
              echo "::warning title=FPR Download::Failed to get artifacts list"
            fi
            
            if [[ $attempt -lt $max_attempts ]]; then
              echo "::notice title=FPR Download::Waiting 30 seconds before retry..."
              sleep 30
            fi
            
            attempt=$((attempt + 1))
          done
          
          if [[ -z "$fpr_file" ]]; then
            echo "::error title=FPR Download::Failed to download FPR after $max_attempts attempts"
            echo "::notice title=FPR Download::Creating fallback SARIF without FPR conversion"
          fi
          
          # Converter FPR para SARIF
          echo "::notice title=SARIF Conversion::Converting FPR to SARIF"
          
          if ! command -v sarif >/dev/null 2>&1; then
            echo "::notice title=SARIF Conversion::Installing SARIF MultiTool"
            dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }} --no-cache 2>/dev/null || true
            export PATH="$HOME/.dotnet/tools:$PATH"
          fi
          
          sarif_file="fortify-sast-results.sarif"
          
          if [[ -n "$fpr_file" ]]; then
            echo "::notice title=SARIF Conversion::Converting FPR file: $fpr_file"
            timeout 300 sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force 2>/dev/null || true
            
            if [[ -f "$sarif_file" ]] && [[ -s "$sarif_file" ]]; then
              echo "::notice title=SARIF Conversion::SARIF conversion completed successfully"
              
              # Adicionar metadados ao SARIF
              jq --arg project "$fortify_project_name" \
                 --arg version "$fortify_version_name" \
                 --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                 --arg version_id "$version_id" \
                 --arg project_id "$project_id" \
                 '(.runs[0].properties // {}) |= . + {
                   "fortify_project": $project,
                   "fortify_version": $version,
                   "fortify_scan_time": $timestamp,
                   "fortify_version_id": $version_id,
                   "fortify_project_id": $project_id,
                   "fortify_engine_version": "25.2.0",
                   "conversion_method": "fpr_to_sarif",
                   "github_run_id": "'${{ github.run_id }}'",
                   "github_run_number": "'${{ github.run_number }}'"
                 }' "$sarif_file" > "$sarif_file.tmp" && mv "$sarif_file.tmp" "$sarif_file"
              
              # Validar SARIF
              if jq -e . "$sarif_file" >/dev/null 2>&1; then
                findings_count=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
                echo "::notice title=SARIF Validation::SARIF validation passed - $findings_count findings found"
              else
                echo "::warning title=SARIF Validation::Invalid SARIF, creating fallback"
                jq -n '{
                  "$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
                  "version":"2.1.0",
                  "runs":[{
                    "tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},
                    "results":[]
                  }]
                }' > "$sarif_file"
              fi
            else
              echo "::warning title=SARIF Conversion::FPR conversion failed, creating fallback SARIF"
              jq -n '{
                "$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
                "version":"2.1.0",
                "runs":[{
                  "tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},
                  "results":[]
                }]
              }' > "$sarif_file"
            fi
          else
            echo "::warning title=SARIF Conversion::No FPR available, creating fallback SARIF"
            jq -n '{
              "$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
              "version":"2.1.0",
              "runs":[{
                "tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},
                "results":[]
              }]
            }' > "$sarif_file"
          fi
          
          # Salvar SARIF para upload
          mkdir -p fortify-artifacts
          cp "$sarif_file" fortify-artifacts/
          echo "::notice title=SARIF Conversion::SARIF file ready: fortify-artifacts/$sarif_file"

      - name: Upload SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: fortify-artifacts/fortify-sast-results.sarif
        continue-on-error: true
