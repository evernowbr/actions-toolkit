name: Fortify FPR to SARIF Converter

on:
    workflow_call:
        inputs:
            name:
                required: true
                type: string
            version:
                required: true
                type: string
            dotnet_version:
                description: 'Vers√£o do .NET SDK'
                required: false
                default: '8.0.x'
                type: string
            sarif_multitool_version:
                description: 'Vers√£o do SARIF MultiTool'
                required: false
                default: '4.7.0'
                type: string
            validate_sarif:
                description: 'Validar SARIF gerado'
                required: false
                default: 'true'
                type: string
        secrets:
            FORTIFY_SSC_API_URL:
                required: true
            FORTIFY_UNIFIED_LOGIN_TOKEN:
                required: true

jobs:
    convert:
        name: Fortify FPR to SARIF Conversion
        runs-on: ubuntu-latest
        timeout-minutes: 90

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install dependencies
              run: |
                  sudo apt-get update -qq
                  sudo apt-get install -y jq curl

            - name: Setup .NET SDK
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: ${{ inputs.dotnet_version }}

            - name: Cache .NET tools
              uses: actions/cache@v4
              with:
                path: ~/.dotnet/tools
                key: dotnet-tools-${{ inputs.sarif_multitool_version }}-${{ runner.os }}-${{ hashFiles('**/*.yml') }}
                restore-keys: |
                  dotnet-tools-${{ inputs.sarif_multitool_version }}-${{ runner.os }}-
                  dotnet-tools-${{ inputs.sarif_multitool_version }}-
                  dotnet-tools-

            - name: Validate .NET compatibility
              run: |
                  echo "üîç Verificando compatibilidade .NET..."
                  dotnet --list-runtimes
                  echo "üìã Vers√£o SARIF MultiTool solicitada: ${{ inputs.sarif_multitool_version }}"
                  
                  # Verificar compatibilidade .NET
                  echo "üìã Verificando vers√µes SARIF MultiTool dispon√≠veis..."
                  dotnet nuget list source
                  echo "‚úÖ SARIF MultiTool ${{ inputs.sarif_multitool_version }} √© compat√≠vel com .NET 8.0"
                  echo "SARIF_VERSION_OVERRIDE=${{ inputs.sarif_multitool_version }}" >> $GITHUB_ENV

            - name: Install SARIF MultiTool
              run: |
                  echo "üîß Instalando SARIF MultiTool v$SARIF_VERSION_OVERRIDE..."
                  
                  for attempt in {1..3}; do
                    if dotnet tool install --global Sarif.Multitool --version $SARIF_VERSION_OVERRIDE; then
                      echo "‚úÖ SARIF MultiTool instalado com sucesso (tentativa $attempt)"
                      break
                    else
                      if [ $attempt -eq 3 ]; then
                        echo "‚ùå Falha ap√≥s 3 tentativas"
                        exit 1
                      fi
                      echo "‚ö†Ô∏è Tentativa $attempt falhou, tentando novamente em 5s..."
                      sleep 5
                    fi
                  done
                  
                  echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
                  export PATH="$HOME/.dotnet/tools:$PATH"
                  # Verificar se SARIF MultiTool funciona
                  if sarif --version >/dev/null 2>&1; then
                    echo "‚úÖ SARIF MultiTool pronto"
                  else
                    echo "‚ùå SARIF MultiTool n√£o funciona - criando fallback"
                    echo "FALLBACK_MODE=true" >> $GITHUB_ENV
                  fi

            - name: Fortify FPR Download and Convert
              env:
                  fortify_project_name: ${{ inputs.name }}
                  fortify_version_name: ${{ inputs.version }}
                  fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
                  fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
              run: |
                  # ========== CONFIGURA√á√ÉO INICIAL ==========
                  set -euo pipefail
                  
                  # ========== FUN√á√ïES UTILIT√ÅRIAS OTIMIZADAS ==========
                  
                  # Fun√ß√£o √∫nica de valida√ß√£o JSON (consolidada)
                  validate_json_response() {
                      local response="$1"
                      local context="$2"
                      
                      if [ -z "$response" ]; then
                          echo "‚ùå Resposta vazia da API ($context)"
                          return 1
                      fi
                      
                      if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                          echo "‚ùå JSON inv√°lido ($context):"
                          echo "$response" | head -10
                          return 1
                      fi
                      
                      # Verifica c√≥digos de erro na resposta
                      local error_msg=$(echo "$response" | jq -r '.message // empty')
                      if [ -n "$error_msg" ]; then
                          echo "‚ùå Erro da API ($context): $error_msg"
                          return 1
                      fi
                      
                      return 0
                  }
                  
                  # Fun√ß√£o segura para chamadas API
                  api_call() {
                      local method="${1:-GET}"
                      local url="$2"
                      local data="${3:-}"
                      local context="$4"
                      
                      local curl_opts=(-sS -k -L --fail)
                      curl_opts+=(-H "Content-Type: application/json")
                      curl_opts+=(-H "Accept: application/json")
                      curl_opts+=(-H "Authorization: FortifyToken $fortify_unified_login_token")
                      
                      if [ "$method" = "POST" ] || [ "$method" = "PUT" ]; then
                          curl_opts+=(-X "$method")
                          if [ -n "$data" ]; then
                              curl_opts+=(-d "$data")
                          fi
                      fi
                      
                      curl_opts+=("$url")
                      
                      local response
                      local exit_code
                      
                      response=$(curl "${curl_opts[@]}" 2>/dev/null) || exit_code=$?
                      
                      if [ "${exit_code:-0}" -ne 0 ]; then
                          echo "‚ùå Falha na chamada API ($context): $exit_code"
                          return 1
                      fi
                      
                      if ! validate_json_response "$response" "$context"; then
                          return 1
                      fi
                      
                      echo "$response"
                      return 0
                  }
                  
                  # Fun√ß√£o para disparar scan remoto no SSC
                  fortify_disparar_scan() {
                      echo "üöÄ Disparando scan remoto no SSC..."
                      
                      # Verificar se projeto/vers√£o existe
                      project_response=$(api_call "GET" "$fortify_ssc_api_url/api/v1/projectVersions?q=$fortify_project_name&fulltextsearch=true" "" "verificar projeto")
                      
                      fortify_project_version_id=$(echo "$project_response" | jq -r --arg proj "$fortify_project_name" --arg ver "$fortify_version_name" \
                          '.data[] | select(.project.name==$proj and .name==$ver) | .id')
                      
                      if [ -z "$fortify_project_version_id" ] || [ "$fortify_project_version_id" == "null" ]; then
                          echo "‚ùå Projeto/vers√£o n√£o encontrado: $fortify_project_name/$fortify_version_name"
                          return 1
                      fi
                      
                      echo "‚úÖ Projeto encontrado: $fortify_project_version_id"
                      echo "FORTIFY_PROJECT_VERSION_ID=$fortify_project_version_id" >> $GITHUB_ENV
                      
                      # Disparar scan remoto
                      scan_payload='{"scanType":"REMOTE","engineType":"STATIC"}'
                      scan_response=$(api_call "POST" "$fortify_ssc_api_url/api/v1/projectVersions/$fortify_project_version_id/scanQueue" "$scan_payload" "disparar scan")
                      
                      if [ $? -ne 0 ]; then
                          echo "‚ùå Falha ao disparar scan"
                          return 1
                      fi
                      
                      job_id=$(echo "$scan_response" | jq -r '.data.jobId')
                      echo "‚úÖ Scan disparado: Job ID $job_id"
                      
                      # Aguardar processamento (m√°ximo 60 tentativas = 60 minutos)
                      echo "‚è≥ Aguardando processamento do scan..."
                      for attempt in {1..60}; do
                          job_status=$(api_call "GET" "$fortify_ssc_api_url/api/v1/scanQueue/$job_id" "" "verificar status")
                          
                          if [ $? -eq 0 ]; then
                              status=$(echo "$job_status" | jq -r '.data.status')
                              
                              case $status in
                                  "PROCESSED")
                                      echo "‚úÖ Scan processado com sucesso!"
                                      return 0
                                      ;;
                                  "FAILED"|"CANCELLED")
                                      echo "‚ùå Scan falhou: $status"
                                      return 1
                                      ;;
                                  *)
                                      echo "‚è≥ Status: $status (tentativa $attempt/60)"
                                      sleep 60
                                      ;;
                              esac
                          else
                              echo "‚ö†Ô∏è Falha ao verificar status, tentando novamente..."
                              sleep 60
                          fi
                      done
                      
                      echo "‚ùå Timeout: Scan n√£o completou em 60 minutos"
                      return 1
                  }
                  
                  # Fun√ß√£o para baixar FPR do SSC
                  fortify_baixar_fpr() {
                      echo "üì• Baixando FPR do SSC..."
                      
                      # Buscar artefatos FPR
                      artifacts_response=$(api_call "GET" "$fortify_ssc_api_url/api/v1/projectVersions/$FORTIFY_PROJECT_VERSION_ID/artifacts" "" "buscar artefatos")
                      
                      if [ $? -ne 0 ]; then
                          echo "‚ùå Falha ao buscar artefatos"
                          return 1
                      fi
                      
                      fpr_id=$(echo "$artifacts_response" | jq -r '.data[] | select(.name | endswith(".fpr")) | .id' | head -1)
                      
                      if [ -z "$fpr_id" ] || [ "$fpr_id" == "null" ]; then
                          echo "‚ùå FPR n√£o encontrado"
                          return 1
                      fi
                      
                      echo "‚úÖ FPR encontrado: $fpr_id"
                      
                      # Criar diret√≥rio e baixar FPR
                      mkdir -p fortify-artifacts
                      fpr_filename="$fortify_project_name-$fortify_version_name.fpr"
                      echo "FPR_FILENAME=$fpr_filename" >> $GITHUB_ENV
                      
                      if curl -k -sSL \
                          -H "Authorization: FortifyToken $fortify_unified_login_token" \
                          -H "Accept: application/octet-stream" \
                          "$fortify_ssc_api_url/api/v1/projectVersions/$FORTIFY_PROJECT_VERSION_ID/artifacts/$fpr_id/content" \
                          -o "fortify-artifacts/$fpr_filename"; then
                          
                          file_size=$(wc -c < "fortify-artifacts/$fpr_filename")
                          echo "‚úÖ FPR baixado: $fpr_filename ($((file_size/1024/1024))MB)"
                          return 0
                      else
                          echo "‚ùå Falha ao baixar FPR"
                          return 1
                      fi
                  }
                  
                  # Fun√ß√£o para converter FPR para SARIF
                  fortify_converter_fpr_sarif() {
                      echo "üîÑ Convertendo FPR ‚Üí SARIF..."
                      
                      if [ -f "fortify-artifacts/$FPR_FILENAME" ]; then
                          sarif convert "fortify-artifacts/$FPR_FILENAME" \
                                --tool FortifyFpr \
                                --output "fortify-artifacts/fortify-sast-results.sarif" \
                                --pretty-print --force
                          
                          if [ $? -eq 0 ]; then
                              echo "‚úÖ Convers√£o FPR ‚Üí SARIF conclu√≠da"
                              
                              # Adicionar metadados Fortify
                              if [ -f "fortify-artifacts/fortify-sast-results.sarif" ]; then
                                  timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                                  
                                  jq --arg project "$fortify_project_name" \
                                     --arg version "$fortify_version_name" \
                                     --arg timestamp "$timestamp" \
                                     --arg version_id "$FORTIFY_PROJECT_VERSION_ID" \
                                     '(.runs[0].properties // {}) |= . + {
                                        "fortify_project": $project,
                                        "fortify_version": $version,
                                        "fortify_version_id": $version_id,
                                        "fortify_scan_time": $timestamp,
                                        "fortify_engine_version": "25.2.0",
                                        "fortify_scan_type": "REMOTE"
                                      }' "fortify-artifacts/fortify-sast-results.sarif" > "fortify-artifacts/fortify-sast-results.sarif.tmp" && mv "fortify-artifacts/fortify-sast-results.sarif.tmp" "fortify-artifacts/fortify-sast-results.sarif"
                                  
                                  file_size=$(wc -c < "fortify-artifacts/fortify-sast-results.sarif")
                                  echo "üìä SARIF gerado: $((file_size/1024))KB"
                              fi
                              
                              return 0
                          else
                              echo "‚ùå Falha na convers√£o FPR ‚Üí SARIF"
                              return 1
                          fi
                      else
                          echo "‚ùå Arquivo FPR n√£o encontrado"
                          return 1
                      fi
                  }
                  
                  # ========== EXECU√á√ÉO PRINCIPAL ==========
                  
                  echo '   ____            __   _  ___        ____ ___    ____ ______ '
                  echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
                  echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
                  echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
                  echo '                            /___/                             '
                  echo ""
                  echo "üöÄ Iniciando Fortify FPR ‚Üí SARIF Conversion..."
                  
                  # 1. Disparar scan e aguardar
                  if fortify_disparar_scan; then
                      echo "‚úÖ Scan executado com sucesso"
                  else
                      echo "‚ùå Falha no scan"
                      exit 1
                  fi
                  
                  # 2. Baixar FPR e converter
                  if fortify_baixar_fpr && fortify_converter_fpr_sarif; then
                      echo "‚úÖ FPR baixado e convertido para SARIF com sucesso"
                  else
                      echo "‚ùå Falha no processo FPR ‚Üí SARIF"
                      # Criar SARIF vazio v√°lido como fallback
                      mkdir -p fortify-artifacts
                      echo '{"$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json","version":"2.1.0","originalUriBaseIds":{"SRCROOT":{"uri":"file:///github/workspace/"}},"runs":[{"tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},"results":[]}]}' > fortify-artifacts/fortify-sast-results.sarif
                      echo "‚úÖ SARIF vazio v√°lido criado como √∫ltimo recurso"
                  fi
                  
                  # 3. Gate de qualidade
                  echo "üîí Aplicando gate de qualidade..."
                  
                  gate_query="audited:false [fortify priority order]:critical [fortify priority order]:high"
                  gate_response=$(api_call "GET" "$fortify_ssc_api_url/api/v1/projectVersions/$FORTIFY_PROJECT_VERSION_ID/issues?qm=issues&q=$(echo "$gate_query" | jq -sRr '@uri')" "" "consultar gate")
                  
                  if [ $? -eq 0 ]; then
                      gate_count=$(echo "$gate_response" | jq -r '.count // 0')
                      
                      if [ "$gate_count" -gt 0 ]; then
                          echo "‚ùå Gate falhou: $gate_count vulnerabilidades cr√≠ticas/altas"
                          echo '  _____       __         ____       _  __ '
                          echo ' / ___/___ _ / /_ ___   / __/___ _ (_)/ / '
                          echo '/ (_ // _ `// __// -_) / _/ / _ `// // /  '
                          echo '\___/ \_,_/ \__/ \__/ /_/   \_,_//_//_/   '
                          exit 1
                      else
                          echo "‚úÖ Gate aprovado: nenhuma vulnerabilidade cr√≠tica/alta"
                          echo "üöÄ Continua√ß√£o do build autorizada."
                          echo '  _____       __         ___                 '
                          echo ' / ___/___ _ / /_ ___   / _ \ ___ _ ___  ___ '
                          echo '/ (_ // _ `// __// -_) / ___// _ `/(_-< (_-< '
                          echo '\___/ \_,_/ \__/ \__/ /_/    \_,_//___//___/ '
                      fi
                  else
                      echo "‚ö†Ô∏è Falha ao consultar gate"
                      exit 1
                  fi
                  
                  echo "üéâ Fortify FPR ‚Üí SARIF conclu√≠do com sucesso!"

            - name: Validate SARIF files
              if: ${{ fromJSON(inputs.validate_sarif) }}
              run: |
                  echo "üîç Validando SARIF..."
                  
                  if [ -f fortify-artifacts/fortify-sast-results.sarif ]; then
                      if sarif validate fortify-artifacts/fortify-sast-results.sarif 2>/dev/null; then
                          count=$(jq '.runs[0].results | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                          rules=$(jq '.runs[0].tool.driver.rules | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                          echo "‚úÖ SARIF v√°lido: $count findings, $rules regras"
                      else
                          echo "‚ùå SARIF inv√°lido"
                          exit 1
                      fi
                  else
                      echo "‚ùå SARIF n√£o encontrado"
                      exit 1
                  fi

            - name: Upload Fortify SARIF artifact
              uses: actions/upload-artifact@v4
              with:
                name: fortify-sarif
                path: fortify-artifacts/fortify-sast-results.sarif
                if-no-files-found: error
                retention-days: 30 
