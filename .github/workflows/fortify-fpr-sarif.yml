name: Fortify Complete Scan + SARIF Converter

on:
  workflow_call:
    inputs:
      enable_sarif_multitool:
        description: 'Habilita convers√£o FPR‚ÜíSARIF'
        required: false
        default: 'true'
        type: string
      dotnet_version:
        description: 'Vers√£o do .NET SDK'
        required: false
        default: '8.0.x'
        type: string
      sarif_multitool_version:
        description: 'Vers√£o do SARIF MultiTool'
        required: false
        default: '4.5.4'
        type: string
      validate_sarif:
        description: 'Validar SARIF gerado'
        required: false
        default: 'true'
        type: string
      fortify_project_name:
        description: 'Nome do projeto Fortify'
        required: true
        type: string
      fortify_version_name:
        description: 'Vers√£o do projeto'
        required: true
        type: string
      fortify_scancentral_tool:
        description: 'Ferramenta ScanCentral'
        required: false
        default: 'scancentral'
        type: string
      fortify_translate_name:
        description: 'Par√¢metros de tradu√ß√£o'
        required: false
        default: '-bt none'
        type: string
      fortify_translate_additional_flags:
        description: 'Flags adicionais de tradu√ß√£o'
        required: false
        default: ''
        type: string
    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
      FORTIFY_CONTROLLER_URL:
        required: true
      FORTIFY_CONTROLLER_TOKEN:
        required: true

jobs:
  fortify-complete:
    name: Fortify Scan + SARIF Conversion
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ fromJSON(inputs.enable_sarif_multitool) }}
    permissions:
      actions: read
      contents: read

    # ‚úÖ CORRE√á√ÉO 1 - Adicionar vari√°veis de ambiente
    env:
      FORTIFY_SSC_API_URL: ${{ secrets.FORTIFY_SSC_API_URL }}
      FORTIFY_UNIFIED_LOGIN_TOKEN: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
      FORTIFY_CONTROLLER_URL: ${{ secrets.FORTIFY_CONTROLLER_URL }}
      FORTIFY_CONTROLLER_TOKEN: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
      FORTIFY_PROJECT_NAME: ${{ inputs.fortify_project_name }}
      FORTIFY_VERSION_NAME: ${{ inputs.fortify_version_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ‚úÖ CORRE√á√ÉO 3 - Mascarar secrets
      - name: Validate inputs
        run: |
          set -euo pipefail
          
          # Mascarar tokens sens√≠veis
          echo "::add-mask::${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}"
          echo "::add-mask::${{ secrets.FORTIFY_CONTROLLER_TOKEN }}"
          
          echo "üîç Validando inputs..."
          echo "üîç Projeto: ${{ inputs.fortify_project_name }}"
          echo "üîç Vers√£o: ${{ inputs.fortify_version_name }}"
          echo "üîç Controller: ${FORTIFY_CONTROLLER_URL:+‚úÖ Configurado} ${FORTIFY_CONTROLLER_URL:-‚ùå Ausente}"
          echo "üîç SSC: ${FORTIFY_SSC_API_URL:+‚úÖ Configurado} ${FORTIFY_SSC_API_URL:-‚ùå Ausente}"
          
          if [[ -z "${{ inputs.fortify_project_name }}" ]]; then
            echo "‚ùå Nome do projeto √© obrigat√≥rio"
            exit 1
          fi
          
          if [[ -z "${{ inputs.fortify_version_name }}" ]]; then
            echo "‚ùå Nome da vers√£o √© obrigat√≥rio" 
            exit 1
          fi
          
          if [[ ! "${{ inputs.sarif_multitool_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Vers√£o SARIF MultiTool inv√°lida (formato: x.y.z)"
            exit 1
          fi
          
          echo "‚úÖ Valida√ß√£o de inputs conclu√≠da"

      - name: Install dependencies
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          sudo apt-get update -qq
          sudo apt-get install -y jq curl wget unzip openjdk-11-jdk

      - name: Setup Java
        run: |
          echo "‚òï Configurando Java..."
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          java -version

      # ‚úÖ CORRE√á√ÉO 2 - Download correto do ScanCentral
      - name: Install ScanCentral Client
        run: |
          echo "üîß Instalando ScanCentral Client..."
          
          # Baixar do Controller (n√£o de URL externa)
          echo "üì• Baixando do Controller: $FORTIFY_CONTROLLER_URL"
          curl -k -sSL "$FORTIFY_CONTROLLER_URL/download/scancentral.zip" -o scancentral.zip
          
          # Extra√ß√£o robusta
          unzip -q scancentral.zip -d $HOME/sc-temp
          SC_DIR=$(find $HOME/sc-temp -name "scancentral" -type f 2>/dev/null | head -1 | dirname)
          
          if [ -z "$SC_DIR" ]; then
              echo "‚ùå Execut√°vel scancentral n√£o encontrado ap√≥s extra√ß√£o"
              echo "üìã Conte√∫do extra√≠do:"
              find $HOME/sc-temp -type f | head -20
              exit 1
          fi
          
          # Configurar PATH
          chmod +x "$SC_DIR/scancentral"
          echo "$SC_DIR" >> $GITHUB_PATH
          
          # Verificar instala√ß√£o
          export PATH="$SC_DIR:$PATH"
          scancentral --version
          echo "‚úÖ ScanCentral Client instalado: $SC_DIR"

      - name: Setup Fortify project
        run: |
          echo "üîç Configurando projeto no SSC..."
          
          # Fun√ß√£o para chamadas API
          api_call() {
              local method="${1:-GET}"
              local endpoint="$2"
              local data="${3:-}"
              
              curl -k -sSL --fail \
                  -H "Content-Type: application/json" \
                  -H "Accept: application/json" \
                  -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                  ${data:+-d "$data"} \
                  ${method:+-X "$method"} \
                  "$FORTIFY_SSC_API_URL/api/v1/$endpoint"
          }
          
          # Buscar projeto/vers√£o
          echo "üîç Buscando projeto: $FORTIFY_PROJECT_NAME"
          project_response=$(api_call "GET" "projectVersions?q=$FORTIFY_PROJECT_NAME&fulltextsearch=true")
          
          version_id=$(echo "$project_response" | jq -r --arg proj "$FORTIFY_PROJECT_NAME" --arg ver "$FORTIFY_VERSION_NAME" \
              '.data[] | select(.project.name==$proj and .name==$ver) | .id')
          
          if [ -n "$version_id" ] && [ "$version_id" != "null" ]; then
              echo "‚úÖ Projeto e vers√£o encontrados: $version_id"
              echo "FORTIFY_PROJECT_VERSION_ID=$version_id" >> $GITHUB_ENV
          else
              echo "‚ö†Ô∏è Projeto/vers√£o n√£o encontrado - ser√° criado durante o scan"
              echo "FORTIFY_PROJECT_VERSION_ID=" >> $GITHUB_ENV
          fi

      - name: Execute Fortify Scan
        run: |
          echo "üöÄ Executando scan Fortify..."
          
          # Configurar vari√°veis de ambiente
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          
          # Executar scan com upload para SSC
          scancentral \
            -url "$FORTIFY_CONTROLLER_URL" \
            -token "$FORTIFY_CONTROLLER_TOKEN" \
            start \
            ${{ inputs.fortify_translate_name }} \
            ${{ inputs.fortify_translate_additional_flags }} \
            -upload \
            -uptoken "$FORTIFY_UNIFIED_LOGIN_TOKEN" \
            -application "$FORTIFY_PROJECT_NAME" \
            -version "$FORTIFY_VERSION_NAME" \
            -block
          
          echo "‚úÖ Scan executado e enviado para SSC"

      - name: Wait and download FPR from SSC
        run: |
          echo "üì• Aguardando processamento e baixando FPR do SSC..."
          
          # Fun√ß√£o para aguardar e baixar FPR
          wait_and_download_fpr() {
              local max_attempts=30
              local attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                  echo "üîç Tentativa $attempt/$max_attempts: Buscando FPR processado..."
                  
                  # Buscar projeto/vers√£o atualizado
                  project_response=$(curl -k -sSL \
                      -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                      "$FORTIFY_SSC_API_URL/api/v1/projectVersions?q=$FORTIFY_PROJECT_NAME&fulltextsearch=true")
                  
                  version_id=$(echo "$project_response" | jq -r --arg proj "$FORTIFY_PROJECT_NAME" --arg ver "$FORTIFY_VERSION_NAME" \
                      '.data[] | select(.project.name==$proj and .name==$ver) | .id')
                  
                  if [ -n "$version_id" ] && [ "$version_id" != "null" ]; then
                      echo "‚úÖ Vers√£o encontrada: $version_id"
                      
                      # Buscar artefatos FPR mais recentes
                      artifacts_response=$(curl -k -sSL \
                          -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                          "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$version_id/artifacts")
                      
                      # Pegar o FPR mais recente
                      fpr_id=$(echo "$artifacts_response" | jq -r '.data[] | select(.name | endswith(".fpr")) | .id' | head -1)
                      
                      if [ -n "$fpr_id" ] && [ "$fpr_id" != "null" ]; then
                          echo "‚úÖ FPR encontrado: $fpr_id"
                          
                          # Criar diret√≥rio e baixar FPR
                          mkdir -p ./fpr-files
                          fpr_filename="$FORTIFY_PROJECT_NAME-$FORTIFY_VERSION_NAME.fpr"
                          
                          if curl -k -sSL \
                              -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                              -H "Accept: application/octet-stream" \
                              "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$version_id/artifacts/$fpr_id/content" \
                              -o "./fpr-files/$fpr_filename"; then
                              
                              file_size=$(wc -c < "./fpr-files/$fpr_filename")
                              echo "‚úÖ FPR baixado: $fpr_filename ($((file_size/1024/1024))MB)"
                              echo "FORTIFY_PROJECT_VERSION_ID=$version_id" >> $GITHUB_ENV
                              return 0
                          else
                              echo "‚ùå Falha ao baixar FPR"
                          fi
                      else
                          echo "‚è≥ FPR ainda n√£o dispon√≠vel..."
                      fi
                  else
                      echo "‚è≥ Vers√£o ainda n√£o criada..."
                  fi
                  
                  echo "‚è≥ Aguardando 60s antes da pr√≥xima tentativa..."
                  sleep 60
                  attempt=$((attempt + 1))
              done
              
              echo "‚ùå Timeout: FPR n√£o foi processado em $((max_attempts * 60))s"
              return 1
          }
          
          # Executar fun√ß√£o de aguardar e baixar
          if wait_and_download_fpr; then
              echo "‚úÖ FPR baixado com sucesso"
          else
              echo "‚ùå Falha ao baixar FPR"
              exit 1
          fi

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Cache .NET tools
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/tools
          key: dotnet-tools-${{ inputs.sarif_multitool_version }}-${{ runner.os }}
          restore-keys: |
            dotnet-tools-${{ inputs.sarif_multitool_version }}-
            dotnet-tools-

      - name: Install SARIF MultiTool
        run: |
          echo "üîß Instalando SARIF MultiTool v${{ inputs.sarif_multitool_version }}..."
          
          for attempt in {1..3}; do
            if dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }}; then
              echo "‚úÖ SARIF MultiTool instalado com sucesso (tentativa $attempt)"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Falha ap√≥s 3 tentativas"
                exit 1
              fi
              echo "‚ö†Ô∏è Tentativa $attempt falhou, tentando novamente em 5s..."
              sleep 5
            fi
          done
          
          # Adicionar ao PATH
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          export PATH="$HOME/.dotnet/tools:$PATH"
          sarif --version
          echo "‚úÖ SARIF MultiTool pronto"

      - name: Convert FPR to SARIF
        run: |
          echo "üîÑ Convertendo FPR ‚Üí SARIF..."
          
          mkdir -p ./sarif-output
          converted_count=0
          
          for fpr_file in ./fpr-files/*.fpr; do
            if [ -f "$fpr_file" ]; then
              echo "üìÅ Processando: $(basename "$fpr_file")"
              
              sarif_file="./sarif-output/$(basename "$fpr_file" .fpr).sarif"
              
              if sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force; then
                converted_count=$((converted_count + 1))
                echo "‚úÖ Convertido: $(basename "$sarif_file")"
                
                # Adicionar metadados Fortify
                if [ -f "$sarif_file" ]; then
                  timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                  
                  jq --arg project "$FORTIFY_PROJECT_NAME" \
                     --arg version "$FORTIFY_VERSION_NAME" \
                     --arg timestamp "$timestamp" \
                     --arg version_id "${FORTIFY_PROJECT_VERSION_ID:-0}" \
                     '(.runs[0].properties // {}) |= . + {
                        "fortify_project": $project,
                        "fortify_version": $version,
                        "fortify_version_id": $version_id,
                        "fortify_scan_time": $timestamp,
                        "fortify_engine_version": "25.2.0"
                      }' "$sarif_file" > "${sarif_file}.tmp" && mv "${sarif_file}.tmp" "$sarif_file"
                  
                  file_size=$(wc -c < "$sarif_file")
                  echo "üìä Tamanho: $((file_size/1024))KB"
                fi
              else
                echo "‚ùå Falha na convers√£o: $(basename "$fpr_file")"
              fi
            fi
          done
          
          echo "üìà Convers√£o conclu√≠da: $converted_count arquivos convertidos"
          
          if [ "$converted_count" -eq 0 ]; then
            echo "‚ùå Nenhum arquivo foi convertido"
            exit 1
          fi

      - name: Validate SARIF files
        if: ${{ fromJSON(inputs.validate_sarif) }}
        run: |
          echo "üîç Validando arquivos SARIF..."
          
          valid_count=0
          
          for sarif_file in ./sarif-output/*.sarif; do
            if [ -f "$sarif_file" ]; then
              if sarif validate "$sarif_file" 2>/dev/null; then
                echo "‚úÖ $(basename "$sarif_file") - v√°lido"
                valid_count=$((valid_count + 1))
              else
                echo "‚ùå $(basename "$sarif_file") - inv√°lido"
              fi
            fi
          done
          
          echo "üìä Valida√ß√£o: $valid_count arquivos v√°lidos"

      - name: Summary and upload
        run: |
          echo "üìã Resumo final:"
          
          for sarif_file in ./sarif-output/*.sarif; do
            if [ -f "$sarif_file" ]; then
              findings=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
              rules=$(jq '.runs[0].tool.driver.rules | length' "$sarif_file" 2>/dev/null || echo "0")
              echo "  ‚Ä¢ $(basename "$sarif_file"): $findings findings, $rules rules"
            fi
          done

      - name: Upload SARIF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: './sarif-output/'
          if-no-files-found: error
          retention-days: 30 
