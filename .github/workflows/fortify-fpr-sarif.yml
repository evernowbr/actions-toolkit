name: Fortify FPR to SARIF Converter

permissions:
  contents: read
  actions: read
  security-events: write

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      polling_timeout_minutes:
        description: 'Timeout para aguardar FPR'
        required: false
        default: 45
        type: number
      sarif_multitool_version:
        description: 'Vers√£o espec√≠fica do SARIF MultiTool'
        required: false
        default: 'latest'
        type: string

    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
      FORTIFY_CONTROLLER_URL:
        required: true
      FORTIFY_CONTROLLER_TOKEN:
        required: true

jobs:
  fortify-scan:
    name: Fortify Scan and Publish
    runs-on: self-hosted
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask sensitive data
        run: |
          echo "::add-mask::${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}"
          echo "::add-mask::${{ secrets.FORTIFY_CONTROLLER_TOKEN }}"

      - name: Validate inputs
        run: |
          echo "fortify_project_name=$(echo "${{ inputs.name }}" | sed 's/[^a-zA-Z0-9._/-]//g' | head -c 100)" >> $GITHUB_ENV
          echo "fortify_version_name=$(echo "${{ inputs.version }}" | sed 's/[^a-zA-Z0-9._/-]//g' | head -c 50)" >> $GITHUB_ENV
          echo "::notice title=Input Validation::Project: ${{ inputs.name }}, Version: ${{ inputs.version }}"

      - name: Verify dependencies
        run: |
          echo "::notice title=Dependencies::Checking required tools..."
          
          for cmd in jq curl awk sed; do
            if ! command -v "$cmd" >/dev/null 2>&1; then
              echo "::error title=Missing Dependency::$cmd not found. Install required tool."
              exit 1
            fi
          done
          
          echo "üîç Verificando scancentral..."
          if command -v scancentral >/dev/null 2>&1; then
            echo "::notice title=ScanCentral::Found scancentral in PATH"
          elif [ -f "/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin/scancentral" ]; then
            echo "::notice title=ScanCentral::Found scancentral in /opt/Fortify_ScanCentral_Client_25.2.0_x64/bin/"
            export PATH="/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin:$PATH"
          else
            echo "::error title=Missing ScanCentral::scancentral not found. Install Fortify ScanCentral Client or configure PATH."
            echo "üìã Locais verificados:"
            echo "   - PATH padr√£o"
            echo "   - /opt/Fortify_ScanCentral_Client_25.2.0_x64/bin/"
            echo "   - /usr/local/bin/"
            echo "   - /usr/bin/"
            exit 1
          fi
          
          echo "::notice title=Dependencies::All required tools found and configured"

       - name: Execute Fortify Scan
         env:
          fortify_project_name: ${{ inputs.name }}
          fortify_version_name: ${{ inputs.version }}
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
          fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
          fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
        run: |
          echo "::notice title=Debug::Starting script execution"
          echo "::notice title=Debug::Environment variables configured via env block"
          echo "::notice title=Fortify Scan::Starting Fortify SAST scan execution"
          echo "::notice title=Environment::Project: $fortify_project_name, Version: $fortify_version_name"
          echo "üîß Configurando Fortify ScanCentral Client..."
          export PATH="/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin:$PATH"
          echo "export PATH=\$PATH:/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin" >> /home/github-runner/.bashrc
          source ~/.bashrc
          
          echo "üîç Verificando scancentral ap√≥s configura√ß√£o..."
          if ! command -v scancentral >/dev/null 2>&1; then
            echo "::error title=ScanCentral Configuration::scancentral not found after PATH configuration. Check installation."
            echo "üìã PATH atual: $PATH"
            exit 1
          fi
          echo "::notice title=ScanCentral::scancentral configured and ready"
          
          echo "::notice title=API Setup::Configuring Fortify SSC API connection"
          echo "::notice title=API Setup::SSC URL: $fortify_ssc_api_url"
          
          fortify_verificar_resposta_api() {
              if [ "$exit_code" == "0" ] || [ "$exit_code" == "" ]; then
                  responseCode=$(echo "$response" | jq '.responseCode')
                  if [ "$responseCode" != "200" ] && [ "$responseCode" != "201" ]; then
                      echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $responseCode"
                      echo "‚ùå Resposta da API: $response"
                      exit 1
                  fi
              else
                  echo "‚ùå Comando retornou $exit_code"
                  echo "‚ùå Mensagem de erro: $response"  
                  exit $exit_code
              fi
          }

          fortify_verificar_codigo_de_resposta() {
          	if [ "$exit_code" != "0" ]; then
          		echo "‚ùå Comando retornou $exit_code"
          		exit $exit_code
          	fi
          }
          
          fortify_criar_projeto_e_versao() {
              echo "::notice title=Project Creation::Creating new project $fortify_project_name with version $fortify_version_name"
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name":"'$fortify_version_name'","customTagValuesAutoApply":true,"autoPredict":true,"predictionPolicy":"LAB Fortify Policy"}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              fortify_verificar_resposta_api
              project_id=$(echo "$response" | jq '.data.project.id')
              version_id=$(echo "$response" | jq '.data.id')
              echo "::notice title=Project Created::Project $fortify_project_name created with ID $project_id"
              echo "::notice title=Version Created::Version $fortify_version_name created with ID $version_id"
          }
          
                    fortify_criar_versao() {
              echo "::notice title=Version Creation::Creating new version $fortify_version_name for existing project"
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'","id":"'$project_id'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name": "'$fortify_version_name'"}' 
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              fortify_verificar_resposta_api
              version_id=$(echo "$response" | jq '.data.id')
              echo "::notice title=Version Created::Version $fortify_version_name created with ID $version_id"
          }
          
          fortify_configurar_projeto() {
              echo "::notice title=Project Configuration::Configuring project attributes and settings"
              fortify_parametros='{"requests":[{"uri":"'$fortify_ssc_api_url/projectVersions/$version_id/attributes'","httpVerb":"PUT","postData":[{"values":[{"guid":"New"}],"attributeDefinitionId":5},{"values":[{"guid":"Internal"}],"attributeDefinitionId":6},{"values":[{"guid":"internalnetwork"}],"attributeDefinitionId":7}]},{"uri":"'$fortify_ssc_api_url/projectVersions/$version_id/authEntities'","httpVerb":"PUT","postData":[]},{"uri":"'$fortify_ssc_api_url/projectVersions/$version_id?hideProgress=true'","httpVerb":"PUT","postData":{"committed":true}}]}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/bulk" -d "$fortify_parametros")
              exit_code=$?
              fortify_verificar_resposta_api
              successCount=$(echo "$response" | jq '.successCount')
              if [[ "$successCount" != "3" ]]; then
                  echo "::error title=Project Configuration Failed::Only $successCount/3 configuration steps succeeded"
                  echo "‚ùå Par√¢metros adicionais do projeto $fortify_project_name configurados sem sucesso."
                  echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $exit_code"
                  echo "‚ùå Resposta da API: $response"
                  exit 1
              else
                  echo "::notice title=Project Configuration::Project attributes configured successfully"
              fi
          }
          
                     fortify_regras_processamento() {
               echo "::notice title=Processing Rules::Configuring result processing rules"
               response=$(curl -sS -k -X PUT --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$version_id/resultProcessingRules" -d '[{"identifier": "com.fortify.manager.BLL.processingrules.BuildProjectProcessingRule","displayName": "Require approval if the Build Project is different between scans","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.FileCountProcessingRule","displayName": "Require approval if file count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.LOCCountProcessingRule","displayName": "Require approval if line count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.NewerEngineVersionProcessingRule","displayName": "Require approval if the engine version of a scan is newer than the engine version of the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.RulePackVersionProcessingRule","displayName": "Require approval if the rulepacks used in the scan do not match the rulepacks used in the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.WarningProcessingRule","displayName": "Require approval if result has analysis warnings","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.ExternalListVersionProcessingRule","displayName": "Check external metadata file versions in scan against versions on server.","displayable": true,"enabled": false}]')
               exit_code=$?
               fortify_verificar_resposta_api
               echo "::notice title=Processing Rules::Result processing rules configured successfully"
           }
           
           # ========== FUN√á√ïES PARA RELAT√ìRIO AVAN√áADO ==========
           # Implementa√ß√£o de relat√≥rio visual estilo Trivy Scanner
           # - Extrai dados detalhados via API do Fortify SSC
           # - Gera tabelas formatadas com vulnerabilidades
           # - Breakdown por categoria e severidade  
           # - Resumo executivo com recomenda√ß√µes
           # - Compat√≠vel com diferentes vers√µes da API (friority/priority)
           # - Tratamento robusto de erros e valores ausentes
           
           fortify_extrair_estatisticas_completas() {
               echo "üìä Extraindo estat√≠sticas completas de vulnerabilidades..."
               
               # Verifica se temos o project_version_id
               if [ -z "$version_id" ]; then
                   echo "‚ùå ID da vers√£o do projeto n√£o encontrado. N√£o √© poss√≠vel gerar relat√≥rio."
                   return 1
               fi
               
               # Busca TODAS as vulnerabilidades (sem filtro de severidade)
               all_issues_response=$(curl -sS -k -X GET --header 'Content-Type: application/json' \
                   --header 'Accept: application/json' \
                   --header "Authorization: FortifyToken $fortify_unified_login_token" \
                   "$fortify_ssc_api_url/projectVersions/$version_id/issues?limit=1000")
               exit_code=$?
               fortify_verificar_resposta_api
               
               # Verifica se a resposta tem dados v√°lidos
               if [ -z "$all_issues_response" ] || [ "$all_issues_response" = "null" ]; then
                   echo "‚ö†Ô∏è Nenhum dado de vulnerabilidade retornado pela API. Pode ser que o scan ainda esteja processando."
                   echo "0" > /tmp/fortify_total_count
                   echo "0" > /tmp/fortify_critical_count  
                   echo "0" > /tmp/fortify_high_count
                   echo "0" > /tmp/fortify_medium_count
                   echo "0" > /tmp/fortify_low_count
                   echo '{"data":[]}' > /tmp/fortify_all_issues.json
                   return 0
               fi
               
               # Salva os dados para an√°lise
               echo "$all_issues_response" > /tmp/fortify_all_issues.json
               
               # Contadores por severidade (tenta friority e priority como fallback)
               critical_count=$(echo "$all_issues_response" | jq '[.data[] | select((.friority // .priority) == "Critical")] | length')
               high_count=$(echo "$all_issues_response" | jq '[.data[] | select((.friority // .priority) == "High")] | length')
               medium_count=$(echo "$all_issues_response" | jq '[.data[] | select((.friority // .priority) == "Medium")] | length')
               low_count=$(echo "$all_issues_response" | jq '[.data[] | select((.friority // .priority) == "Low")] | length')
               total_count=$(echo "$all_issues_response" | jq '.data | length')
               
               # Valida se os contadores s√£o n√∫meros v√°lidos
               critical_count=${critical_count:-0}
               high_count=${high_count:-0}
               medium_count=${medium_count:-0}
               low_count=${low_count:-0}
               total_count=${total_count:-0}
               
               # Salva para uso posterior
               echo "$critical_count" > /tmp/fortify_critical_count
               echo "$high_count" > /tmp/fortify_high_count  
               echo "$medium_count" > /tmp/fortify_medium_count
               echo "$low_count" > /tmp/fortify_low_count
               echo "$total_count" > /tmp/fortify_total_count
           }

           gerar_relatorio_fortify() {
             echo " "
             echo " "
             echo "+----------------- üìä FORTIFY SAST SCAN SUMMARY --------------------+"
             echo "| Projeto: $fortify_project_name $fortify_version_name"
             echo "+--------------------------------------------------------------------+"
             
             # L√™ contadores salvos
             critical_count=$(cat /tmp/fortify_critical_count 2>/dev/null || echo 0)
             high_count=$(cat /tmp/fortify_high_count 2>/dev/null || echo 0)
             medium_count=$(cat /tmp/fortify_medium_count 2>/dev/null || echo 0)
             low_count=$(cat /tmp/fortify_low_count 2>/dev/null || echo 0)
             total_count=$(cat /tmp/fortify_total_count 2>/dev/null || echo 0)
             
             echo "| Total: $total_count (CRITICAL: $critical_count, HIGH: $high_count, MEDIUM: $medium_count, LOW: $low_count)"
             echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
             echo "| CATEGORY                     | ISSUE ID   | SEVERITY | PRIMARY LOCATION            | TAGGED         | RECOMMENDATIONS               |"
             echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
             
             # TABELA DETALHADA DE FINDINGS
             cat /tmp/fortify_all_issues.json 2>/dev/null | jq -r '
               .data | .[0:10] | .[] | [
                 (if .subCategoryName then .subCategoryName
                  elif .categoryName then .categoryName
                  elif .issueName then .issueName
                  elif .subCategory then .subCategory
                  elif .category then .category
                  elif .kingdom then .kingdom
                  else "Unknown"
                  end),
                 (.issueInstanceId // (.id | tostring)),
                 (.friority // .priority // "Unknown"),
                 ((.fileName // .primaryLocation // .folderName // "Unknown File") + ":" + ((.lineNumber // "N/A")|tostring)),
                 (.analysisType // .analysis.analysisType // .analysisName // .analysis // (.customAttributes[]? | select(.name=="Tagged") | .value) // (.attributes[]? | select(.name=="Tagged") | .value) // "N/A"),
                 (.description // "Ver detalhes no SSC")
               ] | @tsv' | while IFS=$'\t' read -r category issue severity location tagged recommendation; do
               mapfile -t lines < <(echo "$category" | fold -s -w 28 | head -n 3)
               for i in "${!lines[@]}"; do
                 if [[ $i -eq 0 ]]; then
                   printf "| %-28s | %-10s | %-8s | %-27s | %-15s | %-29s |\n" \
                     "${lines[$i]}" "${issue:0:10}" "${severity:0:8}" "${location:0:27}" "${tagged:0:15}" "${recommendation:0:29}"
                 else
                   printf "| %-28s | %-10s | %-8s | %-27s | %-15s | %-29s |\n" "${lines[$i]}" "" "" "" "" ""
                 fi
               done
               echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
             done
             
             # BREAKDOWN DETALHADO POR CATEGORIA E SEVERIDADE
             echo " "
             echo "üîç DETAILED BREAKDOWN BY CATEGORY:"
             echo "+------------------------------+------------+----------+----------+----------+---------------+"
             echo "| CATEGORY                     | CRITICAL   | HIGH     | MEDIUM   | LOW      | TOTAL ISSUES  |"
             echo "+------------------------------+------------+----------+----------+----------+---------------+"
             
             cat /tmp/fortify_all_issues.json | jq -r '
               .data[] | 
               [(.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"), (.friority // .priority // "Unknown")] | @tsv' | awk -F'\t' '
               function wrap(str, width, arr, n, out, i, len) {
                 n = split(str, arr, " ");
                 out = arr[1];
                 len = length(arr[1]);
                 for (i=2; i<=n; i++) {
                   if (len + 1 + length(arr[i]) > width) {
                     out = out "\n" arr[i];
                     len = length(arr[i]);
                   } else {
                     out = out " " arr[i];
                     len += 1 + length(arr[i]);
                   }
                 }
                 return out;
               }
               {
                 c[$1, $2]++;
                 cat[$1]=1;
               }
               END {
                 sep = "+------------------------------+------------+----------+----------+----------+---------------+";
                 for (k in cat) {
                   crit = c[k, "Critical"]+0;
                   high = c[k, "High"]+0;
                   med  = c[k, "Medium"]+0;
                   low  = c[k, "Low"]+0;
                   total = crit+high+med+low;
                   wrapped = wrap(k, 28);
                   n = split(wrapped, lines, "\n");
                   for (i=1; i<=n; i++) {
                     if (i==1) {
                       printf "| %-28s | %-10s | %-8s | %-8s | %-8s | %-13s |\n", lines[i], crit, high, med, low, total;
                     } else {
                       printf "|   %-26s | %-10s | %-8s | %-8s | %-8s | %-13s |\n", lines[i], "", "", "", "", "";
                     }
                   }
                   print sep;
                 }
                 
               }'
             echo " "
             echo "üìä EXECUTIVE SUMMARY:"
             echo "+-------------------------------+"
             printf "| %-29s|\n" "CRITICAL: $critical_count"
             printf "| %-29s|\n" "HIGH:    $high_count"
             printf "| %-29s|\n" "MEDIUM:  $medium_count"
             printf "| %-29s|\n" "LOW:     $low_count"
             printf "| %-29s|\n" "TOTAL ISSUES FOUND: $total_count"
             echo "+-------------------------------+"
             echo " "
             # Garantir link absoluto
             echo "üîó Detailed Report: https://fortify-ssc.evernow.com.br/html/ssc/version/${version_id}/audit"
             echo "+-------------------------------------------------------------------------------------------------------------+"
             echo " "
           }
          
          echo '   ____            __   _  ___        ____ ___    ____ ______ '
          echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
          echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
          echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
          echo '                            /___/                             '
          
          echo "::notice title=Project Check::Checking if project $fortify_project_name exists in SSC"
          echo "üîç Verificando se o projeto $fortify_project_name existe no SSC..."
          
          response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true")
          exit_code=$?
          
          fortify_verificar_resposta_api
          echo "::notice title=API Response::Project check completed successfully"
          project_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | .project.id' | head -1 | awk '{$1=$1};1')
          version_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | select(.name=="'$fortify_version_name'") | .id' | awk '{$1=$1};1')
          echo "::notice title=Project Status::Project ID: $project_id, Version ID: $version_id"
          
          if [[ "$version_id" != "" ]]; then
              echo "::notice title=Project Status::Project $fortify_project_name exists with ID $project_id"
              echo "::notice title=Version Status::Version $fortify_version_name exists with ID $version_id"
          elif [[ "$project_id" != "" ]]; then
              echo "::notice title=Project Status::Project $fortify_project_name exists with ID $project_id"
              echo "::notice title=Version Status::Creating new version $fortify_version_name"
              fortify_criar_versao
          else
              echo "::notice title=Project Status::Creating new project $fortify_project_name and version $fortify_version_name"
              fortify_criar_projeto_e_versao
          fi
          
          fortify_configurar_projeto
          fortify_regras_processamento
          
          echo "::notice title=Scan Preparation::All configuration completed, starting scancentral"
                     echo "üîß Executando Scancentral Client"
           echo "::notice title=Scan Execution::Starting Fortify SAST scan"
           
                       # Executar scan e gerar FPR localmente
            echo "::notice title=Scan Execution::Starting Fortify SAST scan with local FPR generation"
            
            # Primeiro: executar scan sem upload para gerar FPR localmente
            scan_output=$(scancentral -ssctoken "$fortify_controller_token" -url "$fortify_controller_url" start -skipBuild -block --log-file fortify.log --overwrite -application "$fortify_project_name" -version "$fortify_version_name" 2>&1 | tee /dev/stderr)
          
                      exit_code=$?
            fortify_verificar_codigo_de_resposta
            
            job_token=$(echo "$scan_output" | grep "Submitted job and received token" | grep -E -o "[a-f0-9-]{36}")
            
                         # Segundo: fazer upload do FPR para o SSC
             echo "::notice title=SSC Upload::Uploading FPR to Fortify SSC"
             fpr_file=$(find . -name "*.fpr" -type f | head -1)
             
             if [[ -n "$fpr_file" ]]; then
                 echo "::notice title=SSC Upload::Found FPR file: $fpr_file"
                 
                 # Upload do FPR para o SSC
                 upload_output=$(scancentral -ssctoken "$fortify_controller_token" -url "$fortify_controller_url" upload -f "$fpr_file" --application "$fortify_project_name" --version "$fortify_version_name" 2>&1 | tee /dev/stderr)
                 upload_exit_code=$?
                 
                 if [[ $upload_exit_code -eq 0 ]]; then
                     echo "::notice title=SSC Upload::FPR uploaded successfully to SSC"
                     echo "‚úÖ FPR enviado para o SSC com sucesso"
                 else
                     echo "::error title=SSC Upload::FPR upload failed"
                     echo "‚ùå Falha no upload do FPR para o SSC"
                     exit 1
                 fi
             else
                 echo "::error title=SSC Upload::No FPR file found for upload"
                 echo "‚ùå Nenhum arquivo FPR encontrado para upload"
                 exit 1
             fi
          
                     if [[ -z "$job_token" ]]; then
               echo "::error title=Scan Failed::Job token not created. Check scancentral output for errors."
               echo "‚ùå Job token n√£o foi criado."
               exit 1
           else
               echo "::notice title=Scan Success::Files submitted for scan with job token: $job_token"
           fi
           
           # ========== GERA RELAT√ìRIO DETALHADO ANTES DO GATE ==========
           echo ""
           echo "‚è≥ Aguardando finaliza√ß√£o do scan para gerar relat√≥rio detalhado..."
           sleep 60  # Aguarda o scan processar (aumentado para 60s)
           
           # Extrai estat√≠sticas completas
           if fortify_extrair_estatisticas_completas; then
               # Gera relat√≥rio visual apenas se a extra√ß√£o foi bem-sucedida
               echo ""
               echo "üìä GERANDO RELAT√ìRIO DETALHADO:"
               gerar_relatorio_fortify
           else
               echo "‚ö†Ô∏è N√£o foi poss√≠vel extrair dados de vulnerabilidades para gerar relat√≥rio detalhado."
               echo "   O gate de qualidade ainda ser√° aplicado normalmente."
           fi
           
           echo "‚öôÔ∏è Iniciando processamento das regras de gate para o projeto."
          
          regras_json='[
            {
              "gate": "audited:false [fortify priority order]:critical [fortify priority order]:high",
              "name": "default",
              "bypass": "false"
            },
            {
              "gate": "audited:false [fortify priority order]:critical [fortify priority order]:high",
              "name": "teste",
              "bypass": "true"
            }
          ]'
          
          gate=$(echo "$regras_json" | jq --compact-output --raw-output '.[] | select(.name=="default") | .gate')
          if [[ -z "$gate" ]]; then
              echo "::error title=Gate Configuration::No 'default' rule defined for project"
              echo "‚ùå Nenhuma regra 'default' foi definida para o projeto no Fortify."
              exit 1
          fi
          
          bypass=$(echo "$regras_json" | jq --compact-output --raw-output '.[] | select(.name=="default") | .bypass')
          filtro_aplicado="$gate"
          
          if [[ "$bypass" == "true" ]]; then
              echo "::warning title=Gate Bypass::Default gate rule bypassed - pipeline continuation allowed"
              echo "‚ö†Ô∏è  Bypass ativado: a regra 'default' n√£o ser√° aplicada."
              echo "‚úÖ Continua√ß√£o do pipeline permitida."
          else
              echo "::notice title=Gate Check::Applying default gate rule: $filtro_aplicado"
              echo "üîí Bypass desativado: a regra 'default' ser√° aplicada."
              echo "üîç Filtro aplicado: \`$filtro_aplicado\`"
              filtro_url_encoded=$(echo "$filtro_aplicado" | jq -sRr '@uri')
              echo "üì° Consultando vulnerabilidades no Fortify SSC..."
          
              response=$(curl -sS -k -X GET --header 'Content-Type: application/json' \
                  --header 'Accept: application/json' \
                  --header "Authorization: FortifyToken $fortify_unified_login_token" \
                  "$fortify_ssc_api_url/projectVersions/$version_id/issues?qm=issues&q=$filtro_url_encoded")
              exit_code=$?
          
              fortify_verificar_resposta_api
          
              num_issues=$(echo "$response" | jq '.count')
          
              if [[ "$num_issues" -gt 0 ]]; then
                  echo "::error title=Gate Failed::$num_issues vulnerabilities found. Pipeline blocked."
                  echo "‚ùå Gate falhou: **$num_issues** vulnerabilidades encontradas com base no filtro aplicado."
                  echo "üìÑ Verifique o relat√≥rio detalhado acima para mais informa√ß√µes."
                  echo '  _____       __         ____       _  __ '
                  echo ' / ___/___ _ / /_ ___   / __/___ _ (_)/ / '
                  echo '/ (_ // _ `// __// -_) / _/ / _ `// // /  '
                  echo '\___/ \_,_/ \__/ \__/ /_/   \_,_//_//_/   '
                  exit 1
              else
                  echo "::notice title=Gate Passed::No critical or high vulnerabilities found. Pipeline authorized."
                  echo "‚úÖ Gate aprovado: Nenhuma vulnerabilidade cr√≠tica ou alta encontrada."
                  echo "üöÄ Continua√ß√£o do build autorizada."
                  echo '  _____       __         ___                 '
                  echo ' / ___/___ _ / /_ ___   / _ \ ___ _ ___  ___ '
                  echo '/ (_ // _ `// __// -_) / ___// _ `/(_-< (_-< '
                  echo '\___/ \_,_/ \__/ \__/ /_/    \_,_//___//___/ '
              fi
                     fi
           
           # Ap√≥s gerar o relat√≥rio detalhado, salvar findings como artefato
           echo "Salvando findings do Fortify como artefato para an√°lise..."
           if [ -f /tmp/fortify_all_issues.json ]; then
             mkdir -p fortify-artifacts
             cp /tmp/fortify_all_issues.json fortify-artifacts/
           fi
           
                       mkdir -p /tmp/fortify-metadata
            echo "$version_id" > /tmp/fortify-metadata/version_id
            echo "$job_token" > /tmp/fortify-metadata/job_token
            echo "$fortify_project_name" > /tmp/fortify-metadata/project_name
            echo "$fortify_version_name" > /tmp/fortify-metadata/version_name
            
                         # ========== DOWNLOAD FPR DO SSC E CONVERS√ÉO ‚Üí SARIF ==========
             echo "::notice title=FPR Download::Starting FPR download from SSC"
             
             # Aguardar um pouco para o SSC processar o upload
             echo "::notice title=FPR Download::Waiting for SSC to process upload..."
             sleep 30
             
             # Buscar FPR no SSC
             echo "::notice title=FPR Download::Searching for FPR artifacts in SSC..."
             artifacts_response=$(curl -sS -k -X GET \
                 --connect-timeout 30 \
                 --max-time 120 \
                 -H "Accept: application/json" \
                 -H "Authorization: FortifyToken $fortify_unified_login_token" \
                 "$fortify_ssc_api_url/projectVersions/$version_id/artifacts" 2>/dev/null)
             
             if [[ $? -eq 0 ]] && echo "$artifacts_response" | jq -e . >/dev/null 2>&1; then
                 fpr_id=$(echo "$artifacts_response" | jq -r '.data[]? | select(.name? | test("\\.fpr$")) | .id' | head -1)
                 
                 if [[ -n "$fpr_id" ]] && [[ "$fpr_id" != "null" ]]; then
                     echo "::notice title=FPR Download::FPR artifact found with ID: $fpr_id"
                     mkdir -p fortify-artifacts
                     fpr_filename="$fortify_project_name-${fortify_version_name}.fpr"
                     
                     echo "::notice title=FPR Download::Downloading FPR file: $fpr_filename"
                     curl -sS -k -L \
                         --connect-timeout 60 \
                         --max-time 600 \
                         -H "Authorization: FortifyToken $fortify_unified_login_token" \
                         -H "Accept: application/octet-stream" \
                         "$fortify_ssc_api_url/projectVersions/$version_id/artifacts/$fpr_id/content" \
                         -o "fortify-artifacts/$fpr_filename"
                     
                     if [[ -f "fortify-artifacts/$fpr_filename" ]] && [[ $(wc -c < "fortify-artifacts/$fpr_filename") -gt 1024 ]]; then
                         fpr_size=$(wc -c < "fortify-artifacts/$fpr_filename")
                         echo "::notice title=FPR Download::FPR downloaded successfully - Size: $fpr_size bytes"
                         fpr_file="fortify-artifacts/$fpr_filename"
                     else
                         echo "::error title=FPR Download::FPR file too small or empty"
                         echo "‚ùå Arquivo FPR baixado √© muito pequeno ou vazio"
                         exit 1
                     fi
                 else
                     echo "::error title=FPR Download::No FPR artifact found in SSC"
                     echo "‚ùå Nenhum artefato FPR encontrado no SSC"
                     exit 1
                 fi
             else
                 echo "::error title=FPR Download::Failed to retrieve artifacts from SSC"
                 echo "‚ùå Falha ao buscar artefatos do SSC"
                 exit 1
             fi
            
            echo "::notice title=SARIF Conversion::Found FPR file: $fpr_file"
            
            # Instalar SARIF MultiTool se necess√°rio
            if ! command -v sarif >/dev/null 2>&1; then
                echo "::notice title=SARIF MultiTool::Installing SARIF MultiTool"
                dotnet tool install --global Sarif.Multitool --version latest --no-cache 2>/dev/null || true
                export PATH="$HOME/.dotnet/tools:$PATH"
            fi
            
            # Converter FPR para SARIF
            sarif_file="fortify-sast-results.sarif"
            echo "::notice title=SARIF Conversion::Converting $fpr_file to SARIF format"
            
            timeout 300 sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force 2>/dev/null || true
            
            if [[ -f "$sarif_file" ]] && [[ -s "$sarif_file" ]]; then
                echo "::notice title=SARIF Conversion::SARIF conversion completed successfully"
                
                # Adicionar metadados ao SARIF
                echo "::notice title=SARIF Conversion::Adding metadata to SARIF"
                jq --arg project "$fortify_project_name" \
                   --arg version "$fortify_version_name" \
                   --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                   --arg job_token "$job_token" \
                   --arg version_id "$version_id" \
                   --arg fpr_file "$(basename "$fpr_file")" \
                   '(.runs[0].properties // {}) |= . + {
                      "fortify_project": $project,
                      "fortify_version": $version,
                      "fortify_scan_time": $timestamp,
                      "fortify_job_token": $job_token,
                      "fortify_version_id": $version_id,
                      "fortify_engine_version": "25.2.0",
                      "fortify_fpr_file": $fpr_file,
                      "conversion_method": "fpr_to_sarif",
                      "github_run_id": "'${{ github.run_id }}'",
                      "github_run_number": "'${{ github.run_number }}'"
                    }' "$sarif_file" > "$sarif_file.tmp" && mv "$sarif_file.tmp" "$sarif_file"
                
                # Validar SARIF
                if jq -e . "$sarif_file" >/dev/null 2>&1; then
                    findings_count=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
                    echo "::notice title=SARIF Validation::SARIF validation passed - $findings_count findings found"
                else
                    echo "::warning title=SARIF Validation::SARIF file contains invalid JSON, creating fallback"
                    jq -n '{"$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},"results":[]}]}' > "$sarif_file"
                fi
                
                # Salvar SARIF para upload
                mkdir -p fortify-artifacts
                cp "$sarif_file" fortify-artifacts/
                echo "$sarif_file" > /tmp/fortify-metadata/sarif_file
                
            else
                echo "::warning title=SARIF Conversion::SARIF conversion failed, creating fallback SARIF"
                jq -n '{"$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},"results":[]}]}' > "fortify-artifacts/fortify-sast-results.sarif"
                echo "fortify-sast-results.sarif" > /tmp/fortify-metadata/sarif_file
            fi

       - name: Upload scan metadata
         uses: actions/upload-artifact@v4
         with:
           name: fortify-metadata-${{ github.run_number }}
           path: /tmp/fortify-metadata/
           retention-days: 2
           if-no-files-found: error

       - name: Upload Fortify findings
         uses: actions/upload-artifact@v4
         with:
           name: fortify-findings-${{ github.run_number }}
           path: fortify-artifacts/
           retention-days: 7
           if-no-files-found: warn

       - name: Upload SARIF to Code Scanning
         uses: github/codeql-action/upload-sarif@v2
         with:
           sarif_file: fortify-artifacts/fortify-sast-results.sarif
         continue-on-error: true

       - name: Upload SARIF Artifact
         uses: actions/upload-artifact@v4
         with:
           name: fortify-sarif-${{ github.run_number }}
           path: fortify-artifacts/fortify-sast-results.sarif
           if-no-files-found: error
           retention-days: 30

       - name: Create scan summary
         if: always()
         run: |
           if [ -f /tmp/fortify-metadata/version_id ]; then
             echo "## ‚úÖ Fortify SAST Scan Summary" >> $GITHUB_STEP_SUMMARY
             echo "| Status | Result |" >> $GITHUB_STEP_SUMMARY
             echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
             echo "| Scan | ‚úÖ SUCCESS |" >> $GITHUB_STEP_SUMMARY
             echo "| SSC Upload | ‚úÖ SUCCESS |" >> $GITHUB_STEP_SUMMARY
             echo "| FPR Download | ‚úÖ SUCCESS |" >> $GITHUB_STEP_SUMMARY
             echo "| Gate Check | ‚úÖ PASSED |" >> $GITHUB_STEP_SUMMARY
             echo "| SARIF Conversion | ‚úÖ SUCCESS |" >> $GITHUB_STEP_SUMMARY
             echo "" >> $GITHUB_STEP_SUMMARY
             echo "**Project:** $(cat /tmp/fortify-metadata/project_name)" >> $GITHUB_STEP_SUMMARY
             echo "**Version:** $(cat /tmp/fortify-metadata/version_name)" >> $GITHUB_STEP_SUMMARY
             echo "**Job Token:** $(cat /tmp/fortify-metadata/job_token)" >> $GITHUB_STEP_SUMMARY
             echo "**Version ID:** $(cat /tmp/fortify-metadata/version_id)" >> $GITHUB_STEP_SUMMARY
             
             if [ -f /tmp/fortify-metadata/sarif_file ]; then
               sarif_file=$(cat /tmp/fortify-metadata/sarif_file)
               findings_count=$(jq '.runs[0].results | length' "fortify-artifacts/$sarif_file" 2>/dev/null || echo "0")
               echo "**SARIF File:** $sarif_file" >> $GITHUB_STEP_SUMMARY
               echo "**Findings:** $findings_count" >> $GITHUB_STEP_SUMMARY
               echo "" >> $GITHUB_STEP_SUMMARY
               echo "### üì• Downloads:" >> $GITHUB_STEP_SUMMARY
               echo "- **SARIF for IDE:** Actions ‚Üí This run ‚Üí Artifacts ‚Üí fortify-sarif-${{ github.run_number }}.zip" >> $GITHUB_STEP_SUMMARY
               echo "- **Findings JSON:** Actions ‚Üí This run ‚Üí Artifacts ‚Üí fortify-findings-${{ github.run_number }}.zip" >> $GITHUB_STEP_SUMMARY
               echo "" >> $GITHUB_STEP_SUMMARY
               echo "### üîó Links:" >> $GITHUB_STEP_SUMMARY
               echo "- **GitHub Code Scanning:** Available in Security tab" >> $GITHUB_STEP_SUMMARY
               echo "- **Fortify SSC:** https://fortify-ssc.evernow.com.br/html/ssc/version/$(cat /tmp/fortify-metadata/version_id)/audit" >> $GITHUB_STEP_SUMMARY
             fi
           else
             echo "## ‚ùå Fortify SAST Scan Failed" >> $GITHUB_STEP_SUMMARY
             echo "**Status:** FAILED" >> $GITHUB_STEP_SUMMARY
             echo "**Action Required:** Check logs for specific error details" >> $GITHUB_STEP_SUMMARY
           fi
