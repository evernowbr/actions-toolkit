name: Fortify FPR to SARIF Converter

permissions:
  contents: read
  actions: read
  security-events: write

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      polling_timeout_minutes:
        description: 'Timeout para aguardar FPR'
        required: false
        default: 45
        type: number
      sarif_multitool_version:
        description: 'Vers√£o espec√≠fica do SARIF MultiTool'
        required: false
        default: 'latest'
        type: string

    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
      FORTIFY_CONTROLLER_URL:
        required: true
      FORTIFY_CONTROLLER_TOKEN:
        required: true

jobs:
  fortify-scan:
    name: Fortify Scan and Publish
    runs-on: self-hosted
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask sensitive data
        run: |
          echo "::add-mask::${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}"
          echo "::add-mask::${{ secrets.FORTIFY_CONTROLLER_TOKEN }}"

      - name: Validate inputs
        run: |
          echo "fortify_project_name=$(echo "${{ inputs.name }}" | sed 's/[^a-zA-Z0-9._/-]//g' | head -c 100)" >> $GITHUB_ENV
          echo "fortify_version_name=$(echo "${{ inputs.version }}" | sed 's/[^a-zA-Z0-9._/-]//g' | head -c 50)" >> $GITHUB_ENV

      - name: Verify dependencies
        run: |
          for cmd in jq curl awk sed; do
            command -v "$cmd" >/dev/null 2>&1 || { echo "‚ùå $cmd n√£o encontrado"; exit 1; }
          done
          
          echo "üîç Verificando scancentral..."
          if command -v scancentral >/dev/null 2>&1; then
            echo "‚úÖ scancentral encontrado em PATH"
          elif [ -f "/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin/scancentral" ]; then
            echo "‚úÖ scancentral encontrado em /opt/Fortify_ScanCentral_Client_25.2.0_x64/bin/"
            export PATH="/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin:$PATH"
          else
            echo "‚ùå scancentral n√£o encontrado"
            echo "üìã Locais verificados:"
            echo "   - PATH padr√£o"
            echo "   - /opt/Fortify_ScanCentral_Client_25.2.0_x64/bin/"
            echo "   - /usr/local/bin/"
            echo "   - /usr/bin/"
            echo "üîß Instale o Fortify ScanCentral Client ou configure o PATH"
            exit 1
          fi

      - name: Execute Fortify Scan
        env:
          fortify_project_name: ${{ inputs.name }}
          fortify_version_name: ${{ inputs.version }}
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
          fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
          fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}

        run: |
          echo "üîß Configurando Fortify ScanCentral Client..."
          export PATH="/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin:$PATH"
          echo "export PATH=\$PATH:/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin" >> /home/github-runner/.bashrc
          source ~/.bashrc
          
          echo "üîç Verificando scancentral ap√≥s configura√ß√£o..."
          if ! command -v scancentral >/dev/null 2>&1; then
            echo "‚ùå scancentral ainda n√£o encontrado ap√≥s configura√ß√£o do PATH"
            echo "üìã PATH atual: $PATH"
            exit 1
          fi
          echo "‚úÖ scancentral encontrado e configurado"
          
          fortify_verificar_resposta_api() {
              if [[ "$exit_code" == "0" ]] || [[ "$exit_code" == "" ]]; then
                  responseCode=$(echo "$response" | jq '.responseCode')
                  if [[ "$responseCode" != "200" ]] && [[ "$responseCode" != "201" ]]; then
                      echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $responseCode"
                      echo "‚ùå Resposta da API: $response"
                      exit 1
                  fi
              else
                  echo "‚ùå Comando retornou $exit_code"
                  echo "‚ùå Mensagem de erro: $response"  
                  exit $exit_code
              fi
          }

          fortify_verificar_codigo_de_resposta() {
              if [[ "$exit_code" != "0" ]]; then
                  echo "‚ùå Comando retornou $exit_code"
                  exit $exit_code
              fi
          }
          
          fortify_criar_projeto_e_versao() {
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name":"'$fortify_version_name'","customTagValuesAutoApply":true,"autoPredict":true,"predictionPolicy":"LAB Fortify Policy"}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              fortify_verificar_resposta_api
              project_id=$(echo "$response" | jq '.data.project.id')
              version_id=$(echo "$response" | jq '.data.id')
              echo "‚úÖ Projeto $fortify_project_name criado com ID $project_id."
              echo "‚úÖ Vers√£o $fortify_version_name criada com ID $version_id."
          }
          
          fortify_criar_versao() {
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'","id":"'$project_id'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name": "'$fortify_version_name'"}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              fortify_verificar_resposta_api
              version_id=$(echo "$response" | jq '.data.id')
              echo "‚úÖ Vers√£o $fortify_version_name criada com ID $version_id."
          }
          
          fortify_configurar_projeto() {
              fortify_parametros='{"requests":[{"uri":"'$fortify_ssc_api_url/projectVersions/$version_id/attributes'","httpVerb":"PUT","postData":[{"values":[{"guid":"New"}],"attributeDefinitionId":5},{"values":[{"guid":"Internal"}],"attributeDefinitionId":6},{"values":[{"guid":"internalnetwork"}],"attributeDefinitionId":7}]},{"uri":"'$fortify_ssc_api_url/projectVersions/$version_id/authEntities'","httpVerb":"PUT","postData":[]},{"uri":"'$fortify_ssc_api_url/projectVersions/$version_id?hideProgress=true'","httpVerb":"PUT","postData":{"committed":true}}]}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/bulk" -d "$fortify_parametros")
              exit_code=$?
              fortify_verificar_resposta_api
              successCount=$(echo "$response" | jq '.successCount')
              if [[ "$successCount" != "3" ]]; then
                  echo "‚ùå Par√¢metros adicionais do projeto $fortify_project_name configurados sem sucesso."
                  echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $exit_code"
                  echo "‚ùå Resposta da API: $response"
                  exit 1
              else
                  echo "‚úÖ Par√¢metros adicionais do projeto $fortify_project_name configurados com sucesso."
              fi
          }
          
          fortify_regras_processamento() {
              response=$(curl -sS -k -X PUT --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$version_id/resultProcessingRules" -d '[{"identifier": "com.fortify.manager.BLL.processingrules.BuildProjectProcessingRule","displayName": "Require approval if the Build Project is different between scans","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.FileCountProcessingRule","displayName": "Require approval if file count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.LOCCountProcessingRule","displayName": "Require approval if line count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.NewerEngineVersionProcessingRule","displayName": "Require approval if the engine version of a scan is newer than the engine version of the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.RulePackVersionProcessingRule","displayName": "Require approval if the rulepacks used in the scan do not match the rulepacks used in the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.WarningProcessingRule","displayName": "Require approval if result has analysis warnings","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.ExternalListVersionProcessingRule","displayName": "Check external metadata file versions in scan against versions on server.","displayable": true,"enabled": false}]')
              exit_code=$?
              fortify_verificar_resposta_api
              echo "‚úÖ Regras de processamento do projeto $fortify_project_name configuradas com sucesso."
          }
          
          echo '   ____            __   _  ___        ____ ___    ____ ______ '
          echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
          echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
          echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
          echo '                            /___/                             '
          
          echo "üîç Verificando se o projeto $fortify_project_name existe no SSC..."
          response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true")
          exit_code=$?
          fortify_verificar_resposta_api
          project_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | .project.id' | head -1 | awk '{$1=$1};1')
          version_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | select(.name=="'$fortify_version_name'") | .id' | awk '{$1=$1};1')
          
          if [[ "$version_id" != "" ]]; then
              echo "‚úÖ O projeto $fortify_project_name j√° existe no SSC com ID $project_id."
              echo "‚úÖ A vers√£o $fortify_version_name j√° existe no SSC com ID $version_id."
          elif [[ "$project_id" != "" ]]; then
              echo "‚úÖ O projeto $fortify_project_name j√° existe no SSC com ID $project_id. Criando vers√£o..."
              fortify_criar_versao
          else
              echo "‚ö†Ô∏è O projeto $fortify_project_name ainda n√£o existe no SSC. Criando projeto e vers√£o..."
              fortify_criar_projeto_e_versao
          fi
          
          fortify_configurar_projeto
          fortify_regras_processamento
          
          echo "üîß Executando Scancentral Client"
          scan_output=$(scancentral -ssctoken "$fortify_controller_token" -url "$fortify_controller_url" start -skipBuild -block --log-file fortify.log --overwrite -application "$fortify_project_name" -version "$fortify_version_name" --upload-to-ssc --ssc-upload-token "$fortify_controller_token" 2>&1 | tee /dev/stderr)
          
          exit_code=$?
          fortify_verificar_codigo_de_resposta
          
          job_token=$(echo "$scan_output" | grep "Submitted job and received token" | grep -E -o "[a-f0-9-]{36}")
          
          if [[ -z "$job_token" ]]; then
              echo "‚ùå Job token n√£o foi criado."
              exit 1
          else
              echo "‚úÖ Arquivos para scan enviados com sucesso. ID do Scan: $job_token"
          fi
          
          echo "‚öôÔ∏è Iniciando processamento das regras de gate para o projeto."
          
          regras_json='[
            {
              "gate": "audited:false [fortify priority order]:critical [fortify priority order]:high",
              "name": "default",
              "bypass": "false"
            },
            {
              "gate": "audited:false [fortify priority order]:critical [fortify priority order]:high",
              "name": "teste",
              "bypass": "true"
            }
          ]'
          
          gate=$(echo "$regras_json" | jq --compact-output --raw-output '.[] | select(.name=="default") | .gate')
          if [[ -z "$gate" ]]; then
              echo "‚ùå Nenhuma regra 'default' foi definida para o projeto no Fortify."
              exit 1
          fi
          
          bypass=$(echo "$regras_json" | jq --compact-output --raw-output '.[] | select(.name=="default") | .bypass')
          filtro_aplicado="$gate"
          
          if [[ "$bypass" == "true" ]]; then
              echo "‚ö†Ô∏è  Bypass ativado: a regra 'default' n√£o ser√° aplicada."
              echo "‚úÖ Continua√ß√£o do pipeline permitida."
          else
              echo "üîí Bypass desativado: a regra 'default' ser√° aplicada."
              echo "üîç Filtro aplicado: \`$filtro_aplicado\`"
              filtro_url_encoded=$(echo "$filtro_aplicado" | jq -sRr '@uri')
              echo "üì° Consultando vulnerabilidades no Fortify SSC..."
          
              response=$(curl -sS -k -X GET --header 'Content-Type: application/json' \
                  --header 'Accept: application/json' \
                  --header "Authorization: FortifyToken $fortify_unified_login_token" \
                  "$fortify_ssc_api_url/projectVersions/$version_id/issues?qm=issues&q=$filtro_url_encoded")
              exit_code=$?
          
              fortify_verificar_resposta_api
          
              num_issues=$(echo "$response" | jq '.count')
          
              if [[ "$num_issues" -gt 0 ]]; then
                  echo "‚ùå Gate falhou: **$num_issues** vulnerabilidades encontradas com base no filtro aplicado."
                  echo "üìÑ Verifique o relat√≥rio detalhado acima para mais informa√ß√µes."
                  echo '  _____       __         ____       _  __ '
                  echo ' / ___/___ _ / /_ ___   / __/___ _ (_)/ / '
                  echo '/ (_ // _ `// __// -_) / _/ / _ `// // /  '
                  echo '\___/ \_,_/ \__/ \__/ /_/   \_,_//_//_/   '
                  exit 1
              else
                  echo "‚úÖ Gate aprovado: Nenhuma vulnerabilidade cr√≠tica ou alta encontrada."
                  echo "üöÄ Continua√ß√£o do build autorizada."
                  echo '  _____       __         ___                 '
                  echo ' / ___/___ _ / /_ ___   / _ \ ___ _ ___  ___ '
                  echo '/ (_ // _ `// __// -_) / ___// _ `/(_-< (_-< '
                  echo '\___/ \_,_/ \__/ \__/ /_/    \_,_//___//___/ '
              fi
          fi
          
          mkdir -p /tmp/fortify-metadata
          echo "$version_id" > /tmp/fortify-metadata/version_id
          echo "$job_token" > /tmp/fortify-metadata/job_token
          echo "$fortify_project_name" > /tmp/fortify-metadata/project_name
          echo "$fortify_version_name" > /tmp/fortify-metadata/version_name

      - name: Upload scan metadata
        uses: actions/upload-artifact@v4
        with:
          name: fortify-metadata-${{ github.run_number }}
          path: /tmp/fortify-metadata/
          retention-days: 2
          if-no-files-found: error

  convert-fpr-sarif:
    name: Download FPR and Convert to SARIF
    runs-on: ubuntu-latest
    needs: fortify-scan
    timeout-minutes: ${{ inputs.polling_timeout_minutes }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq curl >/dev/null 2>&1

      - name: Download scan metadata
        uses: actions/download-artifact@v4
        with:
          name: fortify-metadata-${{ github.run_number }}
          path: /tmp/fortify-metadata/

      - name: Load metadata
        run: |
          echo "VERSION_ID=$(cat /tmp/fortify-metadata/version_id)" >> $GITHUB_ENV
          echo "JOB_TOKEN=$(cat /tmp/fortify-metadata/job_token)" >> $GITHUB_ENV
          echo "fortify_project_name=$(cat /tmp/fortify-metadata/project_name)" >> $GITHUB_ENV
          echo "fortify_version_name=$(cat /tmp/fortify-metadata/version_name)" >> $GITHUB_ENV

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache .NET tools
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/tools
          key: dotnet-tools-${{ inputs.sarif_multitool_version }}-${{ runner.os }}
          restore-keys: |
            dotnet-tools-${{ runner.os }}-

      - name: Install SARIF MultiTool
        run: |
          command -v sarif >/dev/null 2>&1 || dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }} --no-cache 2>/dev/null
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Download FPR
        env:
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
        run: |
          for attempt in $(seq 1 ${{ inputs.polling_timeout_minutes }}); do
              artifacts_response=$(curl -sS -k -X GET \
                  --connect-timeout 30 \
                  --max-time 120 \
                  -H "Accept: application/json" \
                  -H "Authorization: FortifyToken $fortify_unified_login_token" \
                  "$fortify_ssc_api_url/projectVersions/$VERSION_ID/artifacts" 2>/dev/null)
              
              if [[ $? -eq 0 ]] && echo "$artifacts_response" | jq -e . >/dev/null 2>&1; then
                  fpr_id=$(echo "$artifacts_response" | jq -r '.data[]? | select(.name? | test("\\.fpr$")) | .id' | head -1)
                  
                  if [[ -n "$fpr_id" ]] && [[ "$fpr_id" != "null" ]]; then
                      mkdir -p fortify-artifacts
                      fpr_filename="$fortify_project_name-${fortify_version_name}.fpr"
                      
                      curl -sS -k -L \
                          --connect-timeout 60 \
                          --max-time 600 \
                          -H "Authorization: FortifyToken $fortify_unified_login_token" \
                          -H "Accept: application/octet-stream" \
                          "$fortify_ssc_api_url/projectVersions/$VERSION_ID/artifacts/$fpr_id/content" \
                          -o "fortify-artifacts/$fpr_filename"
                      
                      if [[ -f "fortify-artifacts/$fpr_filename" ]] && [[ $(wc -c < "fortify-artifacts/$fpr_filename") -gt 1024 ]]; then
                          echo "FPR_FILE=fortify-artifacts/$fpr_filename" >> $GITHUB_ENV
                          echo "FPR_FILENAME=$fpr_filename" >> $GITHUB_ENV
                          break
                      fi
                  fi
              fi
              
              [[ $attempt -lt ${{ inputs.polling_timeout_minutes }} ]] && sleep 60 || exit 1
          done

      - name: Convert to SARIF
        run: |
          [[ -f "$FPR_FILE" ]] || exit 1
          
          timeout 300 sarif convert "$FPR_FILE" --tool FortifyFpr --output "fortify-artifacts/fortify-sast-results.sarif" --pretty-print --force 2>/dev/null || true
          
          [[ -f "fortify-artifacts/fortify-sast-results.sarif" ]] && [[ -s "fortify-artifacts/fortify-sast-results.sarif" ]] || jq -n '{"$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},"results":[]}]}' > "fortify-artifacts/fortify-sast-results.sarif"
          
          jq --arg project "$fortify_project_name" \
             --arg version "$fortify_version_name" \
             --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
             --arg job_token "$JOB_TOKEN" \
             --arg version_id "$VERSION_ID" \
             --arg fpr_file "$FPR_FILENAME" \
             '(.runs[0].properties // {}) |= . + {
                "fortify_project": $project,
                "fortify_version": $version,
                "fortify_scan_time": $timestamp,
                "fortify_job_token": $job_token,
                "fortify_version_id": $version_id,
                "fortify_engine_version": "25.2.0",
                "fortify_fpr_file": $fpr_file,
                "conversion_method": "optimized_fpr_to_sarif",
                "github_run_id": "'${{ github.run_id }}'",
                "github_run_number": "'${{ github.run_number }}'"
              }' "fortify-artifacts/fortify-sast-results.sarif" > "fortify-artifacts/fortify-sast-results.sarif.tmp" && mv "fortify-artifacts/fortify-sast-results.sarif.tmp" "fortify-artifacts/fortify-sast-results.sarif"

      - name: Validate SARIF
        run: |
          [[ -f "fortify-artifacts/fortify-sast-results.sarif" ]] || exit 1
          jq -e . "fortify-artifacts/fortify-sast-results.sarif" >/dev/null 2>&1 || exit 1

      - name: Upload to Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: fortify-artifacts/fortify-sast-results.sarif
        continue-on-error: true

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30
        if: always()

      - name: Create summary
        run: |
          echo "# Fortify FPR ‚Üí SARIF Conversion Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Findings | $(jq '.runs[0].results | length' "fortify-artifacts/fortify-sast-results.sarif" 2>/dev/null || echo "0") |" >> $GITHUB_STEP_SUMMARY
          echo "| Project | $fortify_project_name |" >> $GITHUB_STEP_SUMMARY
          echo "| Version | $fortify_version_name |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Download: Actions ‚Üí This run ‚Üí Artifacts ‚Üí fortify-sarif-${{ github.run_number }}.zip" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        uses: geekyeggo/delete-artifact@v5
        with:
          name: fortify-metadata-${{ github.run_number }}
        continue-on-error: true
        if: always() 
