name: Fortify FPR to SARIF Converter

permissions:
  contents: read
  actions: read

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      sarif_multitool_version:
        description: 'Vers√£o espec√≠fica do SARIF MultiTool'
        required: false
        default: 'latest'
        type: string

    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
      FORTIFY_CONTROLLER_URL:
        required: true
      FORTIFY_CONTROLLER_TOKEN:
        required: true

jobs:
  fortify-fpr-sarif:
    name: FPR to SARIF Conversion
    runs-on: self-hosted
    timeout-minutes: 120
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Fortify Environment
        run: |
          echo "::notice title=Fortify Setup::Configurando ambiente Fortify"
          
          # Tentar m√∫ltiplos caminhos para o ScanCentral
          scancentral_path=""
          
          # Caminhos poss√≠veis
          possible_paths=(
            "/opt/fortify/bin/scancentral"
            "/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin/scancentral"
            "/opt/Fortify_ScanCentral_Client_25.2.0/bin/scancentral"
            "/opt/fortify/ScanCentral_Client/bin/scancentral"
            "/usr/local/bin/scancentral"
            "/usr/bin/scancentral"
            "/opt/fortify/scancentral"
            "/opt/Fortify/scancentral"
          )
          
          echo "::notice title=Fortify Setup::Procurando ScanCentral..."
          
          for path in "${possible_paths[@]}"; do
            if [ -f "$path" ] && [ -x "$path" ]; then
              scancentral_path="$path"
              echo "::notice title=Fortify Setup::ScanCentral encontrado em: $path"
              break
            fi
          done
          
          # Se n√£o encontrou nos caminhos fixos, procurar no PATH
          if [ -z "$scancentral_path" ]; then
            if command -v scancentral >/dev/null 2>&1; then
              scancentral_path=$(which scancentral)
              echo "::notice title=Fortify Setup::ScanCentral encontrado no PATH: $scancentral_path"
            fi
          fi
          
          # Se ainda n√£o encontrou, procurar recursivamente
          if [ -z "$scancentral_path" ]; then
            echo "::notice title=Fortify Setup::Procurando ScanCentral recursivamente..."
            scancentral_path=$(find /opt -name "scancentral" -type f -executable 2>/dev/null | head -1)
            if [ -n "$scancentral_path" ]; then
              echo "::notice title=Fortify Setup::ScanCentral encontrado recursivamente: $scancentral_path"
            fi
          fi
          
          # Se encontrou, configurar PATH
          if [ -n "$scancentral_path" ]; then
            scancentral_dir=$(dirname "$scancentral_path")
            export PATH="$scancentral_dir:$PATH"
            echo "::notice title=Fortify Setup::PATH atualizado: $scancentral_dir"
            
            # Verificar vers√£o
            if scancentral -version >/dev/null 2>&1; then
              echo "::notice title=Fortify Setup::ScanCentral version: $(scancentral -version)"
            else
              echo "::notice title=Fortify Setup::ScanCentral encontrado mas n√£o consegue executar -version"
            fi
          else
            echo "::error title=Fortify Setup::ScanCentral n√£o encontrado"
            echo "::notice title=Fortify Setup::Caminhos verificados:"
            for path in "${possible_paths[@]}"; do
              echo "  - $path"
            done
            echo "::notice title=Fortify Setup::Procurando no sistema..."
            find /opt -name "*scancentral*" -type f 2>/dev/null | head -10
            exit 1
          fi

      - name: Fortify SAST Scan and FPR Download
        env:
          fortify_project_name: ${{ inputs.name }}
          fortify_version_name: ${{ inputs.version }}
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
          fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
          fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
        run: |
          echo "::notice title=Fortify SAST::Starting scan for $fortify_project_name/$fortify_version_name"
          
          # Definir vari√°vel scancentral_tool (mesma do fortify-sast.yml)
          fortify_scancentral_tool="scancentral"
          
          # Fun√ß√µes de valida√ß√£o de API (mesmas do fortify-sast.yml)
          fortify_verificar_resposta_api() {
              if [ "$exit_code" == "0" ] || [ "$exit_code" == "" ]; then
                  responseCode=$(echo "$response" | jq '.responseCode')
                  if [ "$responseCode" != "200" ] && [ "$responseCode" != "201" ]; then
                      echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $responseCode"
                      echo "‚ùå Resposta da API: $response"
                      exit 1
                  fi
              else
                  echo "‚ùå Comando retornou $exit_code"
                  echo "‚ùå Mensagem de erro: $response"  
                  exit $exit_code
              fi
          }

          fortify_verificar_codigo_de_resposta() {
              if [ "$exit_code" != "0" ]; then
                  echo "‚ùå Comando retornou $exit_code"
                  exit $exit_code
              fi
          }
          
          # Fun√ß√£o para criar projeto e vers√£o (mesma do fortify-sast.yml)
          fortify_criar_projeto_e_versao() {
              echo "üîß Criando projeto e vers√£o no SSC..."
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name":"'$fortify_version_name'","customTagValuesAutoApply":true,"autoPredict":true,"predictionPolicy":"LAB Fortify Policy"}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              fortify_verificar_resposta_api
              fortify_project_id=$(echo "$response" | jq '.data.project.id')
              fortify_project_version_id=$(echo "$response" | jq '.data.id')
              echo "‚úÖ Projeto $fortify_project_name criado com ID $fortify_project_id."
              echo "‚úÖ Vers√£o $fortify_version_name criada com ID $fortify_project_version_id."
          }
          
          fortify_criar_versao() {
              echo "üîß Criando vers√£o para projeto existente..."
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'","id":"'$fortify_project_id'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name": "'$fortify_version_name'"}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              fortify_verificar_resposta_api
              fortify_project_version_id=$(echo "$response" | jq '.data.id')
              echo "‚úÖ Vers√£o $fortify_version_name criada com ID $fortify_project_version_id."
          }
          
          # Fun√ß√£o para configurar projeto (adicionada do fortify-sast.yml)
          fortify_configurar_projeto() {
              echo "üîß Configurando par√¢metros adicionais do projeto..."
              fortify_parametros='{"requests":[{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/attributes'","httpVerb":"PUT","postData":[{"values":[{"guid":"New"}],"attributeDefinitionId":5},{"values":[{"guid":"Internal"}],"attributeDefinitionId":6},{"values":[{"guid":"internalnetwork"}],"attributeDefinitionId":7}]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/authEntities'","httpVerb":"PUT","postData":[]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id?hideProgress=true'","httpVerb":"PUT","postData":{"committed":true}}]}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/bulk" -d "$fortify_parametros")
              exit_code=$?
              fortify_verificar_resposta_api
              successCount=$(echo "$response" | jq '.successCount')
              if [ "$successCount" != "3" ]; then
                  echo "‚ùå Par√¢metros adicionais do projeto $fortify_project_name configurados sem sucesso."
                  echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $exit_code"
                  echo "‚ùå Resposta da API: $response"
                  exit 1
              else
                  echo "‚úÖ Par√¢metros adicionais do projeto $fortify_project_name configurados com sucesso."
              fi
          }
          
          # Fun√ß√£o para regras de processamento (adicionada do fortify-sast.yml)
          fortify_regras_processamento() {
              echo "üîß Configurando regras de processamento..."
              response=$(curl -sS -k -X PUT --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/resultProcessingRules" -d '[{"identifier": "com.fortify.manager.BLL.processingrules.BuildProjectProcessingRule","displayName": "Require approval if the Build Project is different between scans","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.FileCountProcessingRule","displayName": "Require approval if file count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.LOCCountProcessingRule","displayName": "Require approval if line count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.NewerEngineVersionProcessingRule","displayName": "Require approval if the engine version of a scan is newer than the engine version of the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.RulePackVersionProcessingRule","displayName": "Require approval if the rulepacks used in the scan do not match the rulepacks used in the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.WarningProcessingRule","displayName": "Require approval if result has analysis warnings","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.ExternalListVersionProcessingRule","displayName": "Check external metadata file versions in scan against versions on server.","displayable": true,"enabled": false}]')
              exit_code=$?
              fortify_verificar_resposta_api
              echo "‚úÖ Regras de processamento do projeto $fortify_project_name configuradas com sucesso."
          }
          
          # Fun√ß√£o para executar scan (corrigida baseada no fortify-sast.yml)
          fortify_executar_scan() {
              echo "üîç Executando ScanCentral..."
              
              # Usar o comando correto do fortify-sast.yml
              echo "üîß Executando Scancentral Client"
              output=$($fortify_scancentral_tool -ssctoken $fortify_controller_token -url $fortify_controller_url start -skipBuild -block --log-file fortify.log --overwrite -application $fortify_project_name -version $fortify_version_name --upload-to-ssc --ssc-upload-token $fortify_controller_token 2>&1 | tee /dev/stderr)
              
              # Verifica o c√≥digo de resposta
              exit_code=$?
              fortify_verificar_codigo_de_resposta
              
              # Extrai o job token da sa√≠da usando grep e regex
              fortify_job_token=$(echo "$output" | grep "Submitted job and received token" | grep -E -o "[a-f0-9-]{36}")
              
              # Verifica se o job token foi encontrado
              if [ -z "$fortify_job_token" ]; then
                  echo "‚ùå Job token n√£o foi criado."
                  return 1
              else
                  echo "‚úÖ Arquivos para scan enviados com sucesso. ID do Scan: $fortify_job_token"
                  return 0
              fi
          }
          
          # Fun√ß√£o para download FPR (baseada no fortify-json-sarif.yaml)
          fortify_download_fpr() {
              echo "üì• Aguardando FPR dispon√≠vel..."
              
              local max_attempts=30
              local attempt=1
              local fpr_file=""
              
              while [ $attempt -le $max_attempts ]; do
                  echo "‚è≥ Tentativa $attempt de $max_attempts..."
                  
                  # Buscar artifacts usando a mesma l√≥gica do fortify-json-sarif.yaml
                  response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts")
                  exit_code=$?
                  fortify_verificar_resposta_api
                  
                  fpr_id=$(echo "$response" | jq -r '.data[]? | select(.name? | test("\\.fpr$")) | .id' | head -1)
                  
                  if [ -n "$fpr_id" ] && [ "$fpr_id" != "null" ]; then
                      echo "‚úÖ FPR encontrado - ID: $fpr_id"
                      mkdir -p fortify-artifacts
                      fpr_filename="$fortify_project_name-${fortify_version_name}.fpr"
                      
                      curl -sS -k -L -H "Authorization: FortifyToken $fortify_unified_login_token" -H "Accept: application/octet-stream" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts/$fpr_id/content" -o "fortify-artifacts/$fpr_filename"
                      
                      if [ -f "fortify-artifacts/$fpr_filename" ] && [ $(wc -c < "fortify-artifacts/$fpr_filename") -gt 1024 ]; then
                          echo "‚úÖ FPR baixado com sucesso - $(wc -c < "fortify-artifacts/$fpr_filename") bytes"
                          fpr_file="fortify-artifacts/$fpr_filename"
                          break
                      fi
                  fi
                  
                  if [ $attempt -lt $max_attempts ]; then
                      echo "‚è≥ Aguardando 60 segundos..."
                      sleep 60
                  fi
                  
                  attempt=$((attempt + 1))
              done
              
              if [ -n "$fpr_file" ]; then
                  echo "‚úÖ FPR dispon√≠vel: $fpr_file"
                  return 0
              else
                  echo "‚ùå FPR n√£o encontrado ap√≥s $max_attempts tentativas"
                  return 1
              fi
          }
          
          # Fun√ß√£o para converter FPR para SARIF
          fortify_converter_fpr_sarif() {
              echo "üîÑ Convertendo FPR para SARIF..."
              
              if ! command -v sarif >/dev/null 2>&1; then
                  echo "üì¶ Instalando SARIF MultiTool..."
                  dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }} --no-cache 2>/dev/null || true
                  export PATH="$HOME/.dotnet/tools:$PATH"
              fi
              
              local fpr_file="$1"
              local sarif_file="fortify-artifacts/fortify-sast-results.sarif"
              
              if [ -n "$fpr_file" ] && [ -f "$fpr_file" ]; then
                  echo "üîÑ Convertendo: $fpr_file"
                  timeout 300 sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force 2>/dev/null || true
                  
                  if [ -f "$sarif_file" ] && [ -s "$sarif_file" ]; then
                      echo "‚úÖ Convers√£o FPR para SARIF conclu√≠da"
                      
                      # Adicionar metadados ao SARIF
                      jq --arg project "$fortify_project_name" \
                         --arg version "$fortify_version_name" \
                         --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                         --arg version_id "$fortify_project_version_id" \
                         --arg project_id "$fortify_project_id" \
                         '(.runs[0].properties // {}) |= . + {
                           "fortify_project": $project,
                           "fortify_version": $version,
                           "fortify_scan_time": $timestamp,
                           "fortify_version_id": $version_id,
                           "fortify_project_id": $project_id,
                           "fortify_engine_version": "25.2.0",
                           "conversion_method": "fpr_to_sarif",
                           "github_run_id": "'${{ github.run_id }}'",
                           "github_run_number": "'${{ github.run_number }}'"
                         }' "$sarif_file" > "$sarif_file.tmp" && mv "$sarif_file.tmp" "$sarif_file"
                      
                      # Validar SARIF
                      if jq -e . "$sarif_file" >/dev/null 2>&1; then
                          findings_count=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
                          echo "‚úÖ SARIF v√°lido - $findings_count findings encontrados"
                          return 0
                      else
                          echo "‚ùå SARIF inv√°lido"
                          return 1
                      fi
                  else
                      echo "‚ùå Falha na convers√£o FPR para SARIF"
                      return 1
                  fi
              else
                  echo "‚ùå Arquivo FPR n√£o encontrado"
                  return 1
              fi
          }
          
          # ========== EXECU√á√ÉO PRINCIPAL ==========
          
          echo '   ____            __   _  ___        ____ ___    ____ ______ '
          echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
          echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
          echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
          echo '                            /___/                             '
          echo ""
          echo "üöÄ Iniciando Fortify SAST Scan..."
          
          # Verificar se projeto e vers√£o j√° existem (mesma l√≥gica do fortify-sast.yml)
          echo "üîç Verificando se o projeto $fortify_project_name existe no SSC..."
          response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true")
          exit_code=$?
          fortify_verificar_resposta_api
          
          fortify_project_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | .project.id' | head -1 | awk '{$1=$1};1')
          fortify_project_version_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | select(.name=="'$fortify_version_name'") | .id' | awk '{$1=$1};1')
          
          if [ "$fortify_project_version_id" != "" ]; then
              # J√° existe projeto e vers√£o no SSC
              echo "‚úÖ O projeto $fortify_project_name j√° existe no SSC com ID $fortify_project_id."
              echo "‚úÖ A vers√£o $fortify_version_name j√° existe no SSC com ID $fortify_project_version_id."
          elif [ "$fortify_project_id" != "" ]; then
              # J√° existe projeto (sem vers√£o) no SSC
              echo "‚úÖ O projeto $fortify_project_name j√° existe no SSC com ID $fortify_project_id. Criando vers√£o..."
              fortify_criar_versao
          else
              # N√£o tem projeto nem vers√£o no SSC
              echo "‚ö†Ô∏è O projeto $fortify_project_name ainda n√£o existe no SSC. Criando projeto e vers√£o..."
              fortify_criar_projeto_e_versao
          fi
          
          # Configurar projeto (adicionado do fortify-sast.yml)
          fortify_configurar_projeto
          fortify_regras_processamento
          
          # Executar scan
          if fortify_executar_scan; then
              echo "‚úÖ Scan executado com sucesso"
              
              # Download FPR
              if fortify_download_fpr; then
                  echo "‚úÖ FPR baixado com sucesso"
                  
                  # Converter FPR para SARIF
                  if fortify_converter_fpr_sarif "fortify-artifacts/$fortify_project_name-${fortify_version_name}.fpr"; then
                      echo "‚úÖ SARIF gerado com sucesso"
                  else
                      echo "‚ùå Falha na convers√£o FPR para SARIF"
                      exit 1
                  fi
              else
                  echo "‚ùå Falha ao baixar FPR"
                  exit 1
              fi
          else
              echo "‚ùå Falha na execu√ß√£o do scan"
              exit 1
          fi

      - name: Upload SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30
