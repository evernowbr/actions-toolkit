name: Fortify FPR to SARIF Converter

permissions:
  contents: read
  actions: read

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string

    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
      FORTIFY_CONTROLLER_URL:
        required: true
      FORTIFY_CONTROLLER_TOKEN:
        required: true

jobs:
  fortify-fpr-sarif:
    name: FPR to SARIF Conversion
    runs-on: self-hosted
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Fortify SAST Scan and FPR Download
        env:
          fortify_project_name: ${{ inputs.name }}
          fortify_version_name: ${{ inputs.version }}
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
          fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
          fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
        run: |
    
          # Fun√ß√£o de valida√ß√£o de API 
          fortify_verificar_resposta_api() {
              if [ "$exit_code" == "0" ] || [ "$exit_code" == "" ]; then
                  responseCode=$(echo "$response" | jq '.responseCode')
                  if [ "$responseCode" != "200" ] && [ "$responseCode" != "201" ]; then
                      echo "C√≥digo de retorno diferente de 200: API retornou c√≥digo $responseCode"
                      echo "Resposta da API: $response"
                      exit 1
                  fi
              else
                  echo "Comando retornou $exit_code"
                  echo "Mensagem de erro: $response"  
                  exit $exit_code
              fi
          }
          # Fun√ß√£o de validar c√≥digo de resposta
          fortify_verificar_codigo_de_resposta() {
              if [ "$exit_code" != "0" ]; then
                  echo "Comando retornou $exit_code"
                  exit $exit_code
              fi
          }
          
         
          # Fun√ß√£o para download FPR (baseada no fortify-json-sarif.yaml)
          fortify_download_fpr() {
              echo "Aguardando FPR dispon√≠vel..."
              
              local max_attempts=30
              local attempt=1
              local fpr_file=""
              
              while [ $attempt -le $max_attempts ]; do
                  echo "‚è≥ Tentativa $attempt de $max_attempts..."
                  
                  # Buscar artifacts usando a mesma l√≥gica do fortify-json-sarif.yaml
                  response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts")
                  exit_code=$?
                  fortify_verificar_resposta_api
                  
                  fpr_id=$(echo "$response" | jq -r '.data[]? | select(.name? | test("\\.fpr$")) | .id' | head -1)
                  
                  if [ -n "$fpr_id" ] && [ "$fpr_id" != "null" ]; then
                      echo "FPR encontrado - ID: $fpr_id"
                      mkdir -p fortify-artifacts
                      fpr_filename="$fortify_project_name-${fortify_version_name}.fpr"
                      
                      curl -sS -k -L -H "Authorization: FortifyToken $fortify_unified_login_token" -H "Accept: application/octet-stream" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts/$fpr_id/content" -o "fortify-artifacts/$fpr_filename"
                      
                      if [ -f "fortify-artifacts/$fpr_filename" ] && [ $(wc -c < "fortify-artifacts/$fpr_filename") -gt 1024 ]; then
                          echo "FPR baixado com sucesso - $(wc -c < "fortify-artifacts/$fpr_filename") bytes"
                          fpr_file="fortify-artifacts/$fpr_filename"
                          break
                      fi
                  fi
                  
                  if [ $attempt -lt $max_attempts ]; then
                      echo "‚è≥ Aguardando 60 segundos..."
                      sleep 60
                  fi
                  
                  attempt=$((attempt + 1))
              done
              
              if [ -n "$fpr_file" ]; then
                  echo "FPR dispon√≠vel: $fpr_file"
                  return 0
              else
                  echo "FPR n√£o encontrado ap√≥s $max_attempts tentativas"
                  return 1
              fi
          }
          
          # Fun√ß√£o para converter FPR para SARIF
          fortify_converter_fpr_sarif() {
              echo "Convertendo FPR para SARIF..."
              
              if ! command -v sarif >/dev/null 2>&1; then
                  echo "Instalando SARIF MultiTool..."
                  dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }} --no-cache 2>/dev/null || true
                  export PATH="$HOME/.dotnet/tools:$PATH"
              fi
              
              local fpr_file="$1"
              local sarif_file="fortify-artifacts/fortify-sast-results.sarif"
              
              if [ -n "$fpr_file" ] && [ -f "$fpr_file" ]; then
                  echo "Convertendo: $fpr_file"
                  timeout 300 sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force 2>/dev/null || true
                  
                  if [ -f "$sarif_file" ] && [ -s "$sarif_file" ]; then
                      echo "Convers√£o FPR para SARIF conclu√≠da"
                      
                      # Adicionar metadados ao SARIF
                      jq --arg project "$fortify_project_name" \
                         --arg version "$fortify_version_name" \
                         --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                         --arg version_id "$fortify_project_version_id" \
                         --arg project_id "$fortify_project_id" \
                         '(.runs[0].properties // {}) |= . + {
                           "fortify_project": $project,
                           "fortify_version": $version,
                           "fortify_scan_time": $timestamp,
                           "fortify_version_id": $version_id,
                           "fortify_project_id": $project_id,
                           "fortify_engine_version": "25.2.0",
                           "conversion_method": "fpr_to_sarif",
                           "github_run_id": "'${{ github.run_id }}'",
                           "github_run_number": "'${{ github.run_number }}'"
                         }' "$sarif_file" > "$sarif_file.tmp" && mv "$sarif_file.tmp" "$sarif_file"
                      
                      # Validar SARIF
                      if jq -e . "$sarif_file" >/dev/null 2>&1; then
                          findings_count=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
                          echo "SARIF v√°lido - $findings_count findings encontrados"
                          return 0
                      else
                          echo "SARIF inv√°lido"
                          return 1
                      fi
                  else
                      echo "Falha na convers√£o FPR para SARIF"
                      return 1
                  fi
              else
                  echo "Arquivo FPR n√£o encontrado"
                  return 1
              fi
          }
          
          # Verificar se projeto e vers√£o j√° existem (mesma l√≥gica do fortify-sast.yml)
          echo "üîç Verificando se o projeto $fortify_project_name existe no SSC..."
          response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true")
          exit_code=$?
          fortify_verificar_resposta_api
          
          fortify_project_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | .project.id' | head -1 | awk '{$1=$1};1')
          fortify_project_version_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | select(.name=="'$fortify_version_name'") | .id' | awk '{$1=$1};1')
          
          if [ "$fortify_project_version_id" != "" ]; then
              # J√° existe projeto e vers√£o no SSC
              echo "O projeto $fortify_project_name j√° existe no SSC com ID $fortify_project_id."
              echo "A vers√£o $fortify_version_name j√° existe no SSC com ID $fortify_project_version_id."
          elif [ "$fortify_project_id" != "" ]; then
              # J√° existe projeto (sem vers√£o) no SSC
              echo "O projeto $fortify_project_name j√° existe no SSC com ID $fortify_project_id. Criando vers√£o..."
          else
              # N√£o tem projeto nem vers√£o no SSC
              echo "O projeto $fortify_project_name ainda n√£o existe no SSC. Criando projeto e vers√£o..."
          fi
        
              
              # Download FPR
              if fortify_download_fpr; then
                  echo "‚úÖ FPR baixado com sucesso"
                  
                  # Converter FPR para SARIF
                  if fortify_converter_fpr_sarif "fortify-artifacts/$fortify_project_name-${fortify_version_name}.fpr"; then
                      echo "‚úÖ SARIF gerado com sucesso"
                  else
                      echo "‚ùå Falha na convers√£o FPR para SARIF"
                      exit 1
                  fi
              else
                  echo "‚ùå Falha ao baixar FPR"
                  exit 1
              fi
          else
              echo "‚ùå Falha na execu√ß√£o do scan"
              exit 1
          fi

      - name: Upload SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30

