name: Fortify FPR to SARIF Converter

permissions:
  contents: read
  actions: read

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      sarif_multitool_version:
        required: false
        type: string
        default: "4.4.0"
      fortify_scancentral_tool:
        required: false
        type: string
        default: "scancentral"
      fortify_translate_name:
        required: false
        type: string
        default: "sourceanalyzer"
      fortify_translate_additional_flags:
        required: false
        type: string
        default: ""

    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
      FORTIFY_CONTROLLER_URL:
        required: true
      FORTIFY_CONTROLLER_TOKEN:
        required: true

jobs:
  fortify-fpr-sarif:
    name: FPR to SARIF Conversion
    runs-on: self-hosted
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fortify SAST Scan and FPR Download
        env:
          fortify_project_name: ${{ inputs.name }}
          fortify_version_name: ${{ inputs.version }}
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
          fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
          fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
          fortify_scancentral_tool: ${{ inputs.fortify_scancentral_tool }}
          fortify_translate_name: ${{ inputs.fortify_translate_name }}
          fortify_translate_additional_flags: ${{ inputs.fortify_translate_additional_flags }}
        run: |
    
          # Função de validação de API 
          fortify_verificar_resposta_api() {
              if [ "$exit_code" == "0" ] || [ "$exit_code" == "" ]; then
                  responseCode=$(echo "$response" | jq '.responseCode')
                  if [ "$responseCode" != "200" ] && [ "$responseCode" != "201" ]; then
                      echo "Código de retorno diferente de 200: API retornou código $responseCode"
                      echo "Resposta da API: $response"
                      exit 1
                  fi
              else
                  echo "Comando retornou $exit_code"
                  echo "Mensagem de erro: $response"  
                  exit $exit_code
              fi
          }
          
          # Função de validar código de resposta
          fortify_verificar_codigo_de_resposta() {
              if [ "$exit_code" != "0" ]; then
                  echo "Comando retornou $exit_code"
                  exit $exit_code
              fi
          }
          
          # Função para criar projeto e versão (baseada no fortify-sast.yml)
          fortify_criar_projeto_e_versao() {
              # Cria um projeto e uma versão novos
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name":"'$fortify_version_name'","customTagValuesAutoApply":true,"autoPredict":true,"predictionPolicy":"LAB Fortify Policy"}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              fortify_verificar_resposta_api
              fortify_project_id=$(echo "$response" | jq '.data.project.id')
              fortify_project_version_id=$(echo "$response" | jq '.data.id')
              echo "✅ Projeto $fortify_project_name criado com ID $fortify_project_id."
              echo "✅ Versão $fortify_version_name criada com ID $fortify_project_version_id."
          }
          
          # Função para criar apenas versão (baseada no fortify-sast.yml)
          fortify_criar_versao() {
              # Cria uma versão para um projeto já existente
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'","id":"'$fortify_project_id'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name": "'$fortify_version_name'"}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              fortify_verificar_resposta_api
              fortify_project_version_id=$(echo "$response" | jq '.data.id')
              echo "✅ Versão $fortify_version_name criada com ID $fortify_project_version_id."
          }
          
          # Função para configurar projeto (baseada no fortify-sast.yml)
          fortify_configurar_projeto() {
              # Configurar parâmetros adicionais do projeto
              fortify_parametros='{"requests":[{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/attributes'","httpVerb":"PUT","postData":[{"values":[{"guid":"New"}],"attributeDefinitionId":5},{"values":[{"guid":"Internal"}],"attributeDefinitionId":6},{"values":[{"guid":"internalnetwork"}],"attributeDefinitionId":7}]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/authEntities'","httpVerb":"PUT","postData":[]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id?hideProgress=true'","httpVerb":"PUT","postData":{"committed":true}}]}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/bulk" -d "$fortify_parametros")
              exit_code=$?
              fortify_verificar_resposta_api
              successCount=$(echo "$response" | jq '.successCount')
              if [ "$successCount" != "3" ]; then
                  echo "❌ Parâmetros adicionais do projeto $fortify_project_name configurados sem sucesso."
                  echo "❌ Código de retorno diferente de 200: API retornou código $exit_code"
                  echo "❌ Resposta da API: $response"
                  exit 1
              else
                  echo "✅ Parâmetros adicionais do projeto $fortify_project_name configurados com sucesso."
              fi
          }
          
          # Função para executar scan e gerar FPR localmente
          fortify_executar_scan() {
              echo "🔧 Executando Scancentral Client"
              output=$($fortify_scancentral_tool -ssctoken $fortify_controller_token -url $fortify_controller_url start -skipBuild -block --log-file fortify.log --overwrite -application $fortify_project_name -version $fortify_version_name --upload-to-ssc --ssc-upload-token $fortify_controller_token 2>&1 | tee /dev/stderr )                    
              
              # Verifica o código de resposta
              exit_code=$?
              fortify_verificar_codigo_de_resposta
                
              # Extrai o job token da saída usando grep e regex
              fortify_job_token=$(echo "$output" | grep "Submitted job and received token" | grep -E -o "[a-f0-9-]{36}")
              
              # Verifica se o job token foi encontrado
              if [ -z "$fortify_job_token" ]; then
                  echo "❌ Job token não foi criado."
                  exit 1
              else
                  echo "✅ Arquivos para scan enviados com sucesso. ID do Scan: $fortify_job_token"
              fi
              
              # Gerar FPR localmente após scan
              echo "📦 Gerando FPR localmente..."
              mkdir -p fortify-artifacts
              fpr_filename="$fortify_project_name-${fortify_version_name}.fpr"
              
              # Usar sourceanalyzer para gerar FPR local
              if command -v sourceanalyzer >/dev/null 2>&1; then
                  echo "🔄 Gerando FPR com sourceanalyzer..."
                  sourceanalyzer -b $fortify_project_name -scan -f "fortify-artifacts/$fpr_filename" 2>/dev/null || true
                  
                  if [ -f "fortify-artifacts/$fpr_filename" ] && [ $(wc -c < "fortify-artifacts/$fpr_filename") -gt 1024 ]; then
                      echo "✅ FPR gerado localmente: fortify-artifacts/$fpr_filename"
                      return 0
                  fi
              fi
              
              echo "⚠️ FPR local não gerado, tentando download do SSC..."
              return 1
          }
          
          # Função para download FPR (baseada no projeto original FPR)
          fortify_download_fpr() {
              echo "📥 Aguardando FPR disponível..."
              
              local max_attempts=30
              local attempt=1
              local fpr_file=""
              
              while [ $attempt -le $max_attempts ]; do
                  echo "⏳ Tentativa $attempt de $max_attempts..."
                  
                  # Buscar artifacts
                  response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts")
                  exit_code=$?
                  fortify_verificar_resposta_api
                  
                  fpr_id=$(echo "$response" | jq -r '.data[]? | select(.name? | test("\\.fpr$")) | .id' | head -1)
                  
                  if [ -n "$fpr_id" ] && [ "$fpr_id" != "null" ]; then
                      echo "✅ FPR encontrado - ID: $fpr_id"
                      mkdir -p fortify-artifacts
                      fpr_filename="$fortify_project_name-${fortify_version_name}.fpr"
                      
                      curl -sS -k -L -H "Authorization: FortifyToken $fortify_unified_login_token" -H "Accept: application/octet-stream" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts/$fpr_id/content" -o "fortify-artifacts/$fpr_filename"
                      
                      if [ -f "fortify-artifacts/$fpr_filename" ] && [ $(wc -c < "fortify-artifacts/$fpr_filename") -gt 1024 ]; then
                          echo "✅ FPR baixado com sucesso - $(wc -c < "fortify-artifacts/$fpr_filename") bytes"
                          fpr_file="fortify-artifacts/$fpr_filename"
                          break
                      fi
                  fi
                  
                  if [ $attempt -lt $max_attempts ]; then
                      echo "⏳ Aguardando 60 segundos..."
                      sleep 60
                  fi
                  
                  attempt=$((attempt + 1))
              done
              
              if [ -n "$fpr_file" ]; then
                  echo "✅ FPR disponível: $fpr_file"
                  return 0
              else
                  echo "❌ FPR não encontrado após $max_attempts tentativas"
                  return 1
              fi
          }
          
          # Função para converter FPR para SARIF (NOSSO OBJETIVO PRINCIPAL)
          fortify_converter_fpr_sarif() {
              echo "🔄 Convertendo FPR para SARIF..."
              
              if ! command -v sarif >/dev/null 2>&1; then
                  echo "📦 Instalando SARIF MultiTool..."
                  dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }} --no-cache 2>/dev/null || true
                  export PATH="$HOME/.dotnet/tools:$PATH"
              fi
              
              local fpr_file="$1"
              local sarif_file="fortify-artifacts/fortify-sast-results.sarif"
              
              if [ -n "$fpr_file" ] && [ -f "$fpr_file" ]; then
                  echo "🔄 Convertendo: $fpr_file"
                  timeout 300 sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force 2>/dev/null || true
                  
                  if [ -f "$sarif_file" ] && [ -s "$sarif_file" ]; then
                      echo "✅ Conversão FPR para SARIF concluída"
                      
                      # Adicionar metadados ao SARIF
                      jq --arg project "$fortify_project_name" \
                         --arg version "$fortify_version_name" \
                         --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                         --arg version_id "$fortify_project_version_id" \
                         --arg project_id "$fortify_project_id" \
                         '(.runs[0].properties // {}) |= . + {
                           "fortify_project": $project,
                           "fortify_version": $version,
                           "fortify_scan_time": $timestamp,
                           "fortify_version_id": $version_id,
                           "fortify_project_id": $project_id,
                           "fortify_engine_version": "25.2.0",
                           "conversion_method": "fpr_to_sarif",
                           "github_run_id": "'${{ github.run_id }}'",
                           "github_run_number": "'${{ github.run_number }}'"
                         }' "$sarif_file" > "$sarif_file.tmp" && mv "$sarif_file.tmp" "$sarif_file"
                      
                      # Validar SARIF
                      if jq -e . "$sarif_file" >/dev/null 2>&1; then
                          findings_count=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
                          echo "✅ SARIF válido - $findings_count findings encontrados"
                          return 0
                      else
                          echo "❌ SARIF inválido"
                          return 1
                      fi
                  else
                      echo "❌ Falha na conversão FPR para SARIF"
                      return 1
                  fi
              else
                  echo "❌ Arquivo FPR não encontrado"
                  return 1
              fi
          }
          
          # Função para download FPR
          fortify_download_fpr() {
              echo "Aguardando FPR disponível..."
              
              local max_attempts=30
              local attempt=1
              local fpr_file=""
              
              while [ $attempt -le $max_attempts ]; do
                  echo "⏳ Tentativa $attempt de $max_attempts..."
                  
                  # Buscar artifacts
                  response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts")
                  exit_code=$?
                  fortify_verificar_resposta_api
                  
                  fpr_id=$(echo "$response" | jq -r '.data[]? | select(.name? | test("\\.fpr$")) | .id' | head -1)
                  
                  if [ -n "$fpr_id" ] && [ "$fpr_id" != "null" ]; then
                      echo "FPR encontrado - ID: $fpr_id"
                      mkdir -p fortify-artifacts
                      fpr_filename="$fortify_project_name-${fortify_version_name}.fpr"
                      
                      curl -sS -k -L -H "Authorization: FortifyToken $fortify_unified_login_token" -H "Accept: application/octet-stream" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts/$fpr_id/content" -o "fortify-artifacts/$fpr_filename"
                      
                      if [ -f "fortify-artifacts/$fpr_filename" ] && [ $(wc -c < "fortify-artifacts/$fpr_filename") -gt 1024 ]; then
                          echo "FPR baixado com sucesso - $(wc -c < "fortify-artifacts/$fpr_filename") bytes"
                          fpr_file="fortify-artifacts/$fpr_filename"
                          break
                      fi
                  fi
                  
                  if [ $attempt -lt $max_attempts ]; then
                      echo "⏳ Aguardando 60 segundos..."
                      sleep 60
                  fi
                  
                  attempt=$((attempt + 1))
              done
              
              if [ -n "$fpr_file" ]; then
                  echo "FPR disponível: $fpr_file"
                  return 0
              else
                  echo "FPR não encontrado após $max_attempts tentativas"
                  return 1
              fi
          }
          
          # Função para converter FPR para SARIF
          fortify_converter_fpr_sarif() {
              echo "Convertendo FPR para SARIF..."
              
              if ! command -v sarif >/dev/null 2>&1; then
                  echo "Instalando SARIF MultiTool..."
                  dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }} --no-cache 2>/dev/null || true
                  export PATH="$HOME/.dotnet/tools:$PATH"
              fi
              
              local fpr_file="$1"
              local sarif_file="fortify-artifacts/fortify-sast-results.sarif"
              
              if [ -n "$fpr_file" ] && [ -f "$fpr_file" ]; then
                  echo "Convertendo: $fpr_file"
                  timeout 300 sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force 2>/dev/null || true
                  
                  if [ -f "$sarif_file" ] && [ -s "$sarif_file" ]; then
                      echo "Conversão FPR para SARIF concluída"
                      
                      # Adicionar metadados ao SARIF
                      jq --arg project "$fortify_project_name" \
                         --arg version "$fortify_version_name" \
                         --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                         --arg version_id "$fortify_project_version_id" \
                         --arg project_id "$fortify_project_id" \
                         '(.runs[0].properties // {}) |= . + {
                           "fortify_project": $project,
                           "fortify_version": $version,
                           "fortify_scan_time": $timestamp,
                           "fortify_version_id": $version_id,
                           "fortify_project_id": $project_id,
                           "fortify_engine_version": "25.2.0",
                           "conversion_method": "fpr_to_sarif",
                           "github_run_id": "'${{ github.run_id }}'",
                           "github_run_number": "'${{ github.run_number }}'"
                         }' "$sarif_file" > "$sarif_file.tmp" && mv "$sarif_file.tmp" "$sarif_file"
                      
                      # Validar SARIF
                      if jq -e . "$sarif_file" >/dev/null 2>&1; then
                          findings_count=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
                          echo "SARIF válido - $findings_count findings encontrados"
                          return 0
                      else
                          echo "SARIF inválido"
                          return 1
                      fi
                  else
                      echo "Falha na conversão FPR para SARIF"
                      return 1
                  fi
              else
                  echo "Arquivo FPR não encontrado"
                  return 1
              fi
          }
          
          # Verificar se projeto e versão já existem
          echo "🔍 Verificando se o projeto $fortify_project_name existe no SSC..."
          response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true")
          echo "Resposta da API: $response"
          exit_code=$?
          fortify_verificar_resposta_api
          
          fortify_project_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | .project.id' | head -1 | awk '{$1=$1};1')
          fortify_project_version_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | select(.name=="'$fortify_version_name'") | .id' | awk '{$1=$1};1')
          
          if [ "$fortify_project_version_id" != "" ]; then
              # Já existe projeto e versão no SSC
              echo "O projeto $fortify_project_name já existe no SSC com ID $fortify_project_id."
              echo "A versão $fortify_version_name já existe no SSC com ID $fortify_project_version_id."
              
              # Download FPR e converter para SARIF
              if fortify_download_fpr; then
                  echo "✅ FPR baixado com sucesso"
                  
                  # Converter FPR para SARIF
                  if fortify_converter_fpr_sarif "fortify-artifacts/$fortify_project_name-${fortify_version_name}.fpr"; then
                      echo "✅ SARIF gerado com sucesso"
                  else
                      echo "❌ Falha na conversão FPR para SARIF"
                      exit 1
                  fi
              else
                  echo "❌ Falha ao baixar FPR"
                  exit 1
              fi
          elif [ "$fortify_project_id" != "" ]; then
              # Já existe projeto (sem versão) no SSC
              echo "O projeto $fortify_project_name já existe no SSC com ID $fortify_project_id. Criando versão..."
              fortify_criar_versao
              
              # Configurar projeto
              fortify_configurar_projeto
              
              # Executar scan e gerar FPR local
              if fortify_executar_scan; then
                  echo "✅ FPR gerado localmente"
                  
                  # Converter FPR para SARIF
                  if fortify_converter_fpr_sarif "fortify-artifacts/$fortify_project_name-${fortify_version_name}.fpr"; then
                      echo "✅ SARIF gerado com sucesso"
                  else
                      echo "❌ Falha na conversão FPR para SARIF"
                      exit 1
                  fi
              else
                  # Fallback: Download FPR do SSC
                  echo "⚠️ Tentando download FPR do SSC..."
                  if fortify_download_fpr; then
                      echo "✅ FPR baixado com sucesso"
                      
                      # Converter FPR para SARIF
                      if fortify_converter_fpr_sarif "fortify-artifacts/$fortify_project_name-${fortify_version_name}.fpr"; then
                          echo "✅ SARIF gerado com sucesso"
                      else
                          echo "❌ Falha na conversão FPR para SARIF"
                          exit 1
                      fi
                  else
                      echo "❌ Falha ao baixar FPR"
                      exit 1
                  fi
              fi
          else
              # Não tem projeto nem versão no SSC
              echo "O projeto $fortify_project_name ainda não existe no SSC. Criando projeto e versão..."
              fortify_criar_projeto_e_versao
              
              # Configurar projeto
              fortify_configurar_projeto
              
              # Executar scan e gerar FPR local
              if fortify_executar_scan; then
                  echo "✅ FPR gerado localmente"
                  
                  # Converter FPR para SARIF
                  if fortify_converter_fpr_sarif "fortify-artifacts/$fortify_project_name-${fortify_version_name}.fpr"; then
                      echo "✅ SARIF gerado com sucesso"
                  else
                      echo "❌ Falha na conversão FPR para SARIF"
                      exit 1
                  fi
              else
                  # Fallback: Download FPR do SSC
                  echo "⚠️ Tentando download FPR do SSC..."
                  if fortify_download_fpr; then
                      echo "✅ FPR baixado com sucesso"
                      
                      # Converter FPR para SARIF
                      if fortify_converter_fpr_sarif "fortify-artifacts/$fortify_project_name-${fortify_version_name}.fpr"; then
                          echo "✅ SARIF gerado com sucesso"
                      else
                          echo "❌ Falha na conversão FPR para SARIF"
                          exit 1
                      fi
                  else
                      echo "❌ Falha ao baixar FPR"
                      exit 1
                  fi
              fi
          fi

      - name: Upload SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30

