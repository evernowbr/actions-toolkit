name: Fortify FPR → SARIF Converter

on:
  workflow_call:
    inputs:
      enable_sarif_multitool:
        description: 'Habilita conversão FPR→SARIF'
        required: false
        default: 'true'
        type: string
      dotnet_version:
        description: 'Versão do .NET SDK'
        required: false
        default: '8.0.x'
        type: string
      sarif_multitool_version:
        description: 'Versão do SARIF MultiTool'
        required: false
        default: '4.5.4'
        type: string
      fpr_artifact_name:
        description: 'Nome do artefato FPR'
        required: true
        type: string
      validate_sarif:
        description: 'Validar SARIF gerado'
        required: false
        default: 'true'
        type: string
      fortify_project_name:
        description: 'Nome do projeto Fortify'
        required: true
        type: string
      fortify_version_name:
        description: 'Versão do projeto'
        required: true
        type: string
    secrets:
      FORTIFY_SSC_API_URL:
        required: false
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: false

jobs:
  convert-fpr:
    name: Convert FPR to SARIF
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ fromJSON(inputs.enable_sarif_multitool) }}
    permissions:
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744

      - name: Download FPR artifacts
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e
        with:
          name: ${{ inputs.fpr_artifact_name }}
          path: ./fpr-files

      - name: Validate inputs and prerequisites
        run: |
          set -euo pipefail
          
          echo "🔍 Validando inputs..."
          
          if [[ -z "${{ inputs.fortify_project_name }}" ]]; then
            echo "❌ Nome do projeto é obrigatório"
            exit 1
          fi
          
          if [[ -z "${{ inputs.fortify_version_name }}" ]]; then
            echo "❌ Nome da versão é obrigatório" 
            exit 1
          fi
          
          if [[ ! "${{ inputs.sarif_multitool_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Versão SARIF MultiTool inválida (formato: x.y.z)"
            exit 1
          fi
          
          echo "🔍 Validando artefatos FPR..."
          
          if [ ! -d "./fpr-files" ]; then
            echo "❌ Diretório fpr-files não encontrado"
            echo "💡 Verifique se o job fortify-sast foi executado com sucesso"
            exit 1
          fi
          
          fpr_files=$(find ./fpr-files -name "*.fpr" 2>/dev/null | wc -l)
          if [ "$fpr_files" -eq 0 ]; then
            echo "❌ Nenhum arquivo .fpr encontrado"
            echo "💡 Verifique o nome do artefato: ${{ inputs.fpr_artifact_name }}"
            exit 1
          fi
          
          echo "✅ Validação concluída - $fpr_files arquivos FPR encontrados"

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Cache .NET tools
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/tools
          key: dotnet-tools-${{ inputs.sarif_multitool_version }}-${{ runner.os }}
          restore-keys: |
            dotnet-tools-${{ inputs.sarif_multitool_version }}-
            dotnet-tools-

      - name: Install SARIF MultiTool
        run: |
          echo "🔧 Instalando SARIF MultiTool v${{ inputs.sarif_multitool_version }}..."
          
          for attempt in {1..3}; do
            if dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }}; then
              echo "✅ SARIF MultiTool instalado com sucesso (tentativa $attempt)"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "❌ Falha após 3 tentativas"
                exit 1
              fi
              echo "⚠️ Tentativa $attempt falhou, tentando novamente em 5s..."
              sleep 5
            fi
          done
          
          if command -v sarif >/dev/null 2>&1; then
            sarif --version
            echo "✅ SARIF MultiTool pronto para uso"
          else
            echo "❌ SARIF MultiTool não encontrado no PATH"
            exit 1
          fi

      - name: Convert FPR to SARIF
        shell: bash
        env:
          FORTIFY_PROJECT_NAME: ${{ inputs.fortify_project_name }}
          FORTIFY_VERSION_NAME: ${{ inputs.fortify_version_name }}
        run: |
          set -euo pipefail
          
          echo "🔄 Iniciando conversão FPR → SARIF..."
          
          mkdir -p ./sarif-output
          
          converted_count=0
          failed_count=0
          
          for fpr_file in ./fpr-files/*.fpr; do
            if [ -f "$fpr_file" ]; then
              echo "📁 Processando: $(basename "$fpr_file")"
              
              sarif_file="./sarif-output/$(basename "$fpr_file" .fpr).sarif"
              
              if sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force; then
                converted_count=$((converted_count + 1))
                echo "✅ Convertido: $(basename "$fpr_file")"
                
                if [ -f "$sarif_file" ]; then
                  apply_fortify_metadata() {
                      local sarif_file="$1"
                      local temp_file="${sarif_file}.tmp"
                      
                      if [[ ! -f "$sarif_file" ]] || [[ ! -s "$sarif_file" ]]; then
                          return 1
                      fi
                      
                      if ! jq empty "$sarif_file" 2>/dev/null; then
                          return 1
                      fi
                      
                      local schema_version=$(jq -r '."$schema" // empty' "$sarif_file" 2>/dev/null)
                      local sarif_version=$(jq -r '.version // empty' "$sarif_file" 2>/dev/null)
                      
                      if [[ -z "$schema_version" || -z "$sarif_version" ]]; then
                          return 1
                      fi
                      
                      local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                      local fortify_version="25.2.0"
                      
                      if jq --arg timestamp "$timestamp" \
                            --arg project_name "$FORTIFY_PROJECT_NAME" \
                            --arg version_name "$FORTIFY_VERSION_NAME" \
                            --arg fortify_version "$fortify_version" \
                            --arg version_id "0" '
                         if (.runs | type) != "array" or (.runs | length) == 0 then 
                             .runs = [{"tool": {"driver": {}}, "invocations": [{}], "results": []}] 
                         else . end |
                         
                         (.runs[0].tool.driver.name = "Fortify Static Code Analyzer") |
                         (.runs[0].tool.driver.version = $fortify_version) |
                         (.runs[0].tool.driver.informationUri = "https://www.microfocus.com/en-us/cyberres/application-security/static-code-analyzer") |
                         
                         if (.runs[0].invocations | type) != "array" or (.runs[0].invocations | length) == 0 then
                             .runs[0].invocations = [{}]
                         else . end |
                         
                         (.runs[0].invocations[0].startTimeUtc = $timestamp) |
                         (.runs[0].invocations[0].endTimeUtc = $timestamp) |
                         (.runs[0].invocations[0].executionSuccessful = true) |
                         (.runs[0].invocations[0].commandLine = "scancentral") |
                         (.runs[0].invocations[0].workingDirectory = {"uri": "file:///github/workspace/"}) |
                         
                         if (.runs[0].results | type) == "array" then
                             .runs[0].results |= map(
                                 if (.locations | type) == "array" and (.locations | length) > 0 and
                                    .locations[0].physicalLocation.artifactLocation.uri and
                                    .locations[0].physicalLocation.region.startLine and
                                    .ruleId then
                                     . + {
                                         "partialFingerprints": {
                                             "primaryLocationLineHash": (.locations[0].physicalLocation.artifactLocation.uri + ":" + (.locations[0].physicalLocation.region.startLine | tostring) + ":" + .ruleId)
                                         },
                                         "properties": {
                                             "fortify_project": $project_name,
                                             "fortify_version": $version_name,
                                             "fortify_version_id": $version_id,
                                             "fortify_scan_time": $timestamp,
                                             "fortify_engine_version": $fortify_version
                                         }
                                     }
                                 else
                                     .
                                 end
                             )
                         else . end' "$sarif_file" > "$temp_file"; then
                          
                          if jq empty "$temp_file" 2>/dev/null && [[ -s "$temp_file" ]]; then
                              mv "$temp_file" "$sarif_file"
                              return 0
                          else
                              rm -f "$temp_file"
                              return 1
                          fi
                      else
                          rm -f "$temp_file"
                          return 1
                      fi
                  }
                  
                  if apply_fortify_metadata "$sarif_file"; then
                    echo "✅ Metadados Fortify adicionados"
                  else
                    echo "⚠️ Falha ao adicionar metadados, continuando..."
                  fi
                fi
              else
                failed_count=$((failed_count + 1))
                echo "❌ Falha na conversão: $(basename "$fpr_file")"
              fi
            fi
          done
          
          echo "📈 Conversão concluída:"
          echo "   • Arquivos convertidos: $converted_count"
          echo "   • Failures: $failed_count"
          
          if [ "$converted_count" -eq 0 ]; then
            echo "❌ Nenhum arquivo foi convertido"
            exit 1
          fi

      - name: Validate SARIF files
        if: ${{ fromJSON(inputs.validate_sarif) }}
        run: |
          echo "🔍 Validando arquivos SARIF..."
          
          validation_errors=0
          
          for sarif_file in ./sarif-output/*.sarif; do
            if [ -f "$sarif_file" ]; then
              if sarif validate "$sarif_file" 2>/dev/null; then
                echo "✅ $(basename "$sarif_file") - válido"
              else
                echo "❌ $(basename "$sarif_file") - inválido"
                validation_errors=$((validation_errors + 1))
              fi
            fi
          done
          
          if [ $validation_errors -gt 0 ]; then
            echo "⚠️ $validation_errors arquivos com problemas de validação"
          fi

      - name: Upload SARIF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: './sarif-output/'
          if-no-files-found: error
          retention-days: 30 
