name: Fortify Remote Scan + SARIF Converter

on:
  workflow_call:
    inputs:
      enable_sarif_multitool:
        description: 'Habilita convers√£o FPR‚ÜíSARIF'
        required: false
        default: 'true'
        type: string
      dotnet_version:
        description: 'Vers√£o do .NET SDK'
        required: false
        default: '8.0.x'
        type: string
      sarif_multitool_version:
        description: 'Vers√£o do SARIF MultiTool'
        required: false
        default: '4.5.4'
        type: string
      validate_sarif:
        description: 'Validar SARIF gerado'
        required: false
        default: 'true'
        type: string
      fortify_project_name:
        description: 'Nome do projeto Fortify'
        required: true
        type: string
      fortify_version_name:
        description: 'Vers√£o do projeto'
        required: true
        type: string
    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true

jobs:
  fortify-complete:
    name: Fortify Remote Scan + SARIF Conversion
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: ${{ fromJSON(inputs.enable_sarif_multitool) }}
    permissions:
      actions: read
      contents: read

    env:
      FORTIFY_SSC_API_URL: ${{ secrets.FORTIFY_SSC_API_URL }}
      FORTIFY_UNIFIED_LOGIN_TOKEN: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
      FORTIFY_PROJECT_NAME: ${{ inputs.fortify_project_name }}
      FORTIFY_VERSION_NAME: ${{ inputs.fortify_version_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate inputs
        run: |
          set -euo pipefail
          
          echo "::add-mask::${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}"
          
          if [[ -z "${{ inputs.fortify_project_name }}" ]]; then
            echo "‚ùå Nome do projeto √© obrigat√≥rio"
            exit 1
          fi
          
          if [[ -z "${{ inputs.fortify_version_name }}" ]]; then
            echo "‚ùå Nome da vers√£o √© obrigat√≥rio" 
            exit 1
          fi
          
          if [[ ! "${{ inputs.sarif_multitool_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Vers√£o SARIF MultiTool inv√°lida"
            exit 1
          fi
          
          echo "‚úÖ Valida√ß√£o conclu√≠da"

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq curl

      - name: Setup utility functions
        run: |
          validate_json_response() {
              local response="$1"
              local context="$2"
              
              if [ -z "$response" ]; then
                  echo "‚ùå Resposta vazia ($context)"
                  return 1
              fi
              
              if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                  echo "‚ùå JSON inv√°lido ($context)"
                  return 1
              fi
              
              local error_msg=$(echo "$response" | jq -r '.message // empty')
              if [ -n "$error_msg" ]; then
                  echo "‚ùå Erro da API ($context): $error_msg"
                  return 1
              fi
              
              return 0
          }
          
          api_call() {
              local method="${1:-GET}"
              local url="$2"
              local data="${3:-}"
              local context="$4"
              
              local curl_opts=(-sS -k -L --fail)
              curl_opts+=(-H "Content-Type: application/json")
              curl_opts+=(-H "Accept: application/json")
              curl_opts+=(-H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN")
              
              if [ "$method" = "POST" ] || [ "$method" = "PUT" ]; then
                  curl_opts+=(-X "$method")
                  if [ -n "$data" ]; then
                      curl_opts+=(-d "$data")
                  fi
              fi
              
              curl_opts+=("$url")
              
              local response
              local exit_code
              
              response=$(curl "${curl_opts[@]}" 2>/dev/null) || exit_code=$?
              
              if [ "${exit_code:-0}" -ne 0 ]; then
                  echo "‚ùå Falha na API ($context): $exit_code"
                  return 1
              fi
              
              if ! validate_json_response "$response" "$context"; then
                  return 1
              fi
              
              echo "$response"
              return 0
          }
          
          export -f validate_json_response api_call

      - name: Verify project exists
        run: |
          echo "üîç Verificando projeto no SSC..."
          
          project_response=$(api_call "GET" "$FORTIFY_SSC_API_URL/api/v1/projectVersions?q=$FORTIFY_PROJECT_NAME&fulltextsearch=true" "" "verificar projeto")
          
          if [ $? -ne 0 ]; then
              echo "‚ùå Falha ao verificar projeto"
              exit 1
          fi
          
          version_id=$(echo "$project_response" | jq -r --arg proj "$FORTIFY_PROJECT_NAME" --arg ver "$FORTIFY_VERSION_NAME" \
              '.data[] | select(.project.name==$proj and .name==$ver) | .id')
          
          if [ -z "$version_id" ] || [ "$version_id" == "null" ]; then
              echo "‚ùå Projeto/vers√£o n√£o encontrado"
              exit 1
          fi
          
          echo "‚úÖ Projeto encontrado: $version_id"
          echo "FORTIFY_PROJECT_VERSION_ID=$version_id" >> $GITHUB_ENV

      - name: Queue remote scan
        run: |
          echo "üöÄ Enfileirando scan remoto..."
          
          scan_job=$(api_call "POST" "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$FORTIFY_PROJECT_VERSION_ID/scanQueue" \
              '{"scanType":"REMOTE","engineType":"STATIC"}' "enfileirar scan")
          
          if [ $? -ne 0 ]; then
              echo "‚ùå Falha ao enfileirar scan"
              exit 1
          fi
          
          job_id=$(echo "$scan_job" | jq -r '.data.jobId')
          
          if [ -z "$job_id" ] || [ "$job_id" == "null" ]; then
              echo "‚ùå Job ID n√£o encontrado"
              exit 1
          fi
          
          echo "‚úÖ Scan enfileirado: $job_id"
          echo "FORTIFY_SCAN_JOB_ID=$job_id" >> $GITHUB_ENV

      - name: Wait for scan completion
        run: |
          echo "‚è≥ Aguardando conclus√£o do scan..."
          
          attempt=0
          max_attempts=90
          
          until [[ $attempt -eq $max_attempts ]]; do
              status_response=$(api_call "GET" "$FORTIFY_SSC_API_URL/api/v1/scanQueue/$FORTIFY_SCAN_JOB_ID" "" "verificar status")
              
              if [ $? -ne 0 ]; then
                  sleep 60
                  attempt=$((attempt + 1))
                  continue
              fi
              
              status=$(echo "$status_response" | jq -r '.data.status')
              
              case "$status" in
                  "PROCESSED")
                      echo "‚úÖ Scan conclu√≠do"
                      break
                      ;;
                  "FAILED")
                      echo "‚ùå Scan falhou"
                      exit 1
                      ;;
                  "QUEUED"|"PROCESSING")
                      sleep_time=$((30 * (2 ** (attempt / 20))))
                      if [ $sleep_time -gt 300 ]; then
                          sleep_time=300
                      fi
                      sleep $sleep_time
                      attempt=$((attempt + 1))
                      ;;
                  *)
                      sleep 60
                      attempt=$((attempt + 1))
                      ;;
              esac
          done
          
          if [[ $attempt -eq $max_attempts ]]; then
              echo "‚ùå Timeout: Scan n√£o conclu√≠do"
              exit 1
          fi

      - name: Download FPR
        run: |
          echo "üì• Baixando FPR..."
          
          artifacts_response=$(api_call "GET" "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$FORTIFY_PROJECT_VERSION_ID/artifacts" "" "buscar artefatos")
          
          if [ $? -ne 0 ]; then
              echo "‚ùå Falha ao buscar artefatos"
              exit 1
          fi
          
          fpr_id=$(echo "$artifacts_response" | jq -r '.data[] | select(.name | endswith(".fpr")) | .id' | head -1)
          
          if [ -z "$fpr_id" ] || [ "$fpr_id" == "null" ]; then
              echo "‚ùå FPR n√£o encontrado"
              exit 1
          fi
          
          mkdir -p ./fpr-files
          fpr_filename="$FORTIFY_PROJECT_NAME-$FORTIFY_VERSION_NAME.fpr"
          
          if curl -k -sSL \
              -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
              -H "Accept: application/octet-stream" \
              "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$FORTIFY_PROJECT_VERSION_ID/artifacts/$fpr_id/content" \
              -o "./fpr-files/$fpr_filename"; then
              
              file_size=$(wc -c < "./fpr-files/$fpr_filename")
              echo "‚úÖ FPR baixado: $fpr_filename ($((file_size/1024/1024))MB)"
          else
              echo "‚ùå Falha ao baixar FPR"
              exit 1
          fi

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Cache .NET tools
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/tools
          key: dotnet-tools-${{ inputs.sarif_multitool_version }}-${{ runner.os }}
          restore-keys: |
            dotnet-tools-${{ inputs.sarif_multitool_version }}-
            dotnet-tools-

      - name: Install SARIF MultiTool
        run: |
          for attempt in {1..3}; do
            if dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }}; then
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Falha ap√≥s 3 tentativas"
                exit 1
              fi
              sleep 5
            fi
          done
          
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          export PATH="$HOME/.dotnet/tools:$PATH"

      - name: Convert FPR to SARIF
        run: |
          echo "üîÑ Convertendo FPR ‚Üí SARIF..."
          
          mkdir -p ./sarif-output
          converted_count=0
          
          for fpr_file in ./fpr-files/*.fpr; do
            if [ -f "$fpr_file" ]; then
              sarif_file="./sarif-output/$(basename "$fpr_file" .fpr).sarif"
              
              if sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force; then
                converted_count=$((converted_count + 1))
                
                if [ -f "$sarif_file" ]; then
                  timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                  
                  jq --arg project "$FORTIFY_PROJECT_NAME" \
                     --arg version "$FORTIFY_VERSION_NAME" \
                     --arg timestamp "$timestamp" \
                     --arg version_id "$FORTIFY_PROJECT_VERSION_ID" \
                     '(.runs[0].properties // {}) |= . + {
                        "fortify_project": $project,
                        "fortify_version": $version,
                        "fortify_version_id": $version_id,
                        "fortify_scan_time": $timestamp,
                        "fortify_engine_version": "25.2.0",
                        "fortify_scan_type": "REMOTE"
                      }' "$sarif_file" > "${sarif_file}.tmp" && mv "${sarif_file}.tmp" "$sarif_file"
                fi
              fi
            fi
          done
          
          if [ "$converted_count" -eq 0 ]; then
            echo "‚ùå Nenhum arquivo convertido"
            exit 1
          fi

      - name: Validate SARIF files
        if: ${{ fromJSON(inputs.validate_sarif) }}
        run: |
          echo "üîç Validando SARIF..."
          
          for sarif_file in ./sarif-output/*.sarif; do
            if [ -f "$sarif_file" ]; then
              if sarif validate "$sarif_file" 2>/dev/null; then
                echo "‚úÖ $(basename "$sarif_file") - v√°lido"
              else
                echo "‚ùå $(basename "$sarif_file") - inv√°lido"
              fi
            fi
          done

      - name: Apply quality gate
        run: |
          echo "üîí Aplicando gate de qualidade..."
          
          gate_query="audited:false [fortify priority order]:critical [fortify priority order]:high"
          gate_response=$(api_call "GET" "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$FORTIFY_PROJECT_VERSION_ID/issues?qm=issues&q=$(echo "$gate_query" | jq -sRr '@uri')" "" "consultar gate")
          
          if [ $? -eq 0 ]; then
              gate_count=$(echo "$gate_response" | jq -r '.count // 0')
              
              if [ "$gate_count" -gt 0 ]; then
                  echo "‚ùå Gate falhou: $gate_count vulnerabilidades cr√≠ticas/altas"
                  exit 1
              else
                  echo "‚úÖ Gate aprovado"
              fi
          else
              echo "‚ö†Ô∏è Falha ao consultar gate"
              exit 1
          fi

      - name: Upload SARIF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: './sarif-output/'
          if-no-files-found: error
          retention-days: 30 
