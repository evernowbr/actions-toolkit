name: Fortify FPR to SARIF Converter

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: 'Nome do projeto Fortify'
      version:
        required: true
        type: string
        description: 'Vers√£o do projeto Fortify'
      dotnet_version:
        description: 'Vers√£o do .NET SDK'
        required: false
        default: '8.0.x'
        type: string
      validate_sarif:
        description: 'Validar SARIF gerado'
        required: false
        default: 'true'
        type: string
      timeout_minutes:
        description: 'Timeout em minutos'
        required: false
        default: 30
        type: number
    secrets:
      FORTIFY_SSC_API_URL:
        required: true
        description: 'URL da API do Fortify SSC'
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
        description: 'Token de autentica√ß√£o Fortify'

jobs:
  # ========== JOB 1: DOWNLOAD FPR (Self-hosted para conectividade) ==========
  download-fpr:
    name: Download FPR from SSC
    runs-on: self-hosted
    timeout-minutes: 15
    
    steps:
      - name: Download FPR from SSC
        env:
          FORTIFY_PROJECT_NAME: ${{ inputs.name }}
          FORTIFY_VERSION_NAME: ${{ inputs.version }}
          FORTIFY_SSC_API_URL: ${{ secrets.FORTIFY_SSC_API_URL }}
          FORTIFY_UNIFIED_LOGIN_TOKEN: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
        run: |
          echo "üì• Baixando FPR do SSC (conectividade corporativa)..."
          
          # Fun√ß√£o simplificada para verificar resposta API
          verify_api_response() {
              local response="$1"
              local context="$2"
              
              if [ -z "$response" ]; then
                  echo "‚ùå Resposta vazia ($context)"
                  return 1
              fi
              
              if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                  echo "‚ùå JSON inv√°lido ($context)"
                  return 1
              fi
              
              return 0
          }
          
          # Buscar projeto/vers√£o
          echo "üîç Buscando projeto: $FORTIFY_PROJECT_NAME/$FORTIFY_VERSION_NAME"
          project_response=$(curl -sS -k -X GET \
              -H "Accept: application/json" \
              -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
              "$FORTIFY_SSC_API_URL/api/v1/projectVersions?q=$FORTIFY_PROJECT_NAME&fulltextsearch=true")
          
          if ! verify_api_response "$project_response" "buscar projeto"; then
              exit 1
          fi
          
          # Extrair version_id
          version_id=$(echo "$project_response" | jq -r --arg proj "$FORTIFY_PROJECT_NAME" --arg ver "$FORTIFY_VERSION_NAME" \
              '.data[] | select(.project.name==$proj and .name==$ver) | .id')
          
          if [ -z "$version_id" ] || [ "$version_id" == "null" ]; then
              echo "‚ùå Projeto/vers√£o n√£o encontrado: $FORTIFY_PROJECT_NAME/$FORTIFY_VERSION_NAME"
              echo "üí° Certifique-se de que o scan j√° foi executado e processado"
              exit 1
          fi
          
          echo "‚úÖ Projeto encontrado - Version ID: $version_id"
          
          # Buscar artefatos FPR
          echo "üìã Buscando artefatos FPR..."
          artifacts_response=$(curl -sS -k -X GET \
              -H "Accept: application/json" \
              -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
              "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$version_id/artifacts")
          
          if ! verify_api_response "$artifacts_response" "buscar artefatos"; then
              exit 1
          fi
          
          # Encontrar FPR mais recente
          fpr_id=$(echo "$artifacts_response" | jq -r '.data[] | select(.name | endswith(".fpr")) | .id' | head -1)
          
          if [ -z "$fpr_id" ] || [ "$fpr_id" == "null" ]; then
              echo "‚ùå Nenhum FPR encontrado"
              echo "üí° Execute um scan Fortify antes de tentar a convers√£o"
              exit 1
          fi
          
          echo "‚úÖ FPR encontrado - Artifact ID: $fpr_id"
          
          # Baixar FPR
          mkdir -p fortify-artifacts
          safe_project_name=$(echo "$FORTIFY_PROJECT_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
          fpr_filename="${safe_project_name}-${FORTIFY_VERSION_NAME}.fpr"
          
          echo "üì• Baixando FPR: $fpr_filename"
          if curl -sS -k -L \
              -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
              -H "Accept: application/octet-stream" \
              "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$version_id/artifacts/$fpr_id/content" \
              -o "fortify-artifacts/$fpr_filename"; then
              
              file_size=$(wc -c < "fortify-artifacts/$fpr_filename")
              if [ "$file_size" -lt 1024 ]; then
                  echo "‚ùå Arquivo FPR muito pequeno ($file_size bytes)"
                  exit 1
              fi
              
              echo "‚úÖ FPR baixado com sucesso: $fpr_filename ($((file_size/1024/1024))MB)"
          else
              echo "‚ùå Falha ao baixar FPR"
              exit 1
          fi

      - name: Upload FPR as temporary artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: fortify-fpr-temp-${{ github.run_number }}
          path: fortify-artifacts/
          retention-days: 1

  # ========== JOB 2: CONVERS√ÉO SARIF (GitHub-hosted para .NET otimizado) ==========
  convert-sarif:
    name: Convert FPR to SARIF
    runs-on: ubuntu-latest
    needs: download-fpr
    timeout-minutes: ${{ inputs.timeout_minutes }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744

      - name: Download FPR artifact
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e
        with:
          name: fortify-fpr-temp-${{ github.run_number }}
          path: fortify-artifacts/

      - name: Validate FPR file
        run: |
          echo "üîç Validando arquivo FPR..."
          
          fpr_file=$(find fortify-artifacts -name "*.fpr" | head -1)
          if [ -z "$fpr_file" ]; then
              echo "‚ùå Arquivo FPR n√£o encontrado"
              exit 1
          fi
          
          file_size=$(wc -c < "$fpr_file")
          if [ "$file_size" -lt 1024 ]; then
              echo "‚ùå Arquivo FPR muito pequeno ($file_size bytes)"
              exit 1
          fi
          
          echo "‚úÖ FPR validado: $(basename "$fpr_file") ($((file_size/1024/1024))MB)"
          echo "FPR_FILE=$fpr_file" >> $GITHUB_ENV

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Install SARIF MultiTool
        run: |
          echo "üîß Instalando SARIF MultiTool..."
          
          # Vers√µes compat√≠veis em ordem de prefer√™ncia
          versions_to_try=("4.8.0" "4.7.1" "latest")
          installed=false
          
          for version in "${versions_to_try[@]}"; do
              echo "üîÑ Tentando vers√£o $version..."
              if dotnet tool install --global Sarif.Multitool --version "$version" 2>/dev/null; then
                  echo "‚úÖ SARIF MultiTool v$version instalado com sucesso"
                  installed=true
                  break
              fi
          done
          
          if [ "$installed" = false ]; then
              echo "‚ùå Falha na instala√ß√£o - tentando vers√£o latest..."
              if dotnet tool install --global Sarif.Multitool; then
                  echo "‚úÖ SARIF MultiTool (latest) instalado"
              else
                  echo "‚ùå Falha cr√≠tica na instala√ß√£o do SARIF MultiTool"
                  exit 1
              fi
          fi
          
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          echo "‚úÖ SARIF MultiTool pronto para convers√£o"

      - name: Convert FPR to SARIF
        env:
          FORTIFY_PROJECT_NAME: ${{ inputs.name }}
          FORTIFY_VERSION_NAME: ${{ inputs.version }}
        run: |
          echo "üîÑ Convertendo FPR ‚Üí SARIF..."
          
          sarif_file="fortify-artifacts/fortify-sast-results.sarif"
          
          # Convers√£o com retry
          conversion_success=false
          for attempt in {1..3}; do
              echo "üìÅ Tentativa $attempt: Convertendo $(basename "$FPR_FILE")"
              
              if sarif convert "$FPR_FILE" \
                    --tool FortifyFpr \
                    --output "$sarif_file" \
                    --pretty-print --force; then
                  
                  echo "‚úÖ Convers√£o bem-sucedida na tentativa $attempt"
                  conversion_success=true
                  break
              else
                  echo "‚ö†Ô∏è Tentativa $attempt falhou"
                  if [ $attempt -lt 3 ]; then
                      sleep 5
                  fi
              fi
          done
          
          if [ "$conversion_success" = false ]; then
              echo "‚ùå Falha na convers√£o ap√≥s 3 tentativas"
              exit 1
          fi
          
          # Verificar se SARIF foi gerado
          if [ ! -f "$sarif_file" ]; then
              echo "‚ùå Arquivo SARIF n√£o foi gerado"
              exit 1
          fi
          
          # Adicionar metadados essenciais
          echo "üè∑Ô∏è Adicionando metadados..."
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          jq --arg project "$FORTIFY_PROJECT_NAME" \
             --arg version "$FORTIFY_VERSION_NAME" \
             --arg timestamp "$timestamp" \
             '(.runs[0].properties // {}) |= . + {
                "fortify_project": $project,
                "fortify_version": $version,
                "fortify_scan_time": $timestamp,
                "fortify_engine_version": "25.2.0",
                "conversion_method": "fpr_to_sarif_hybrid"
              }' "$sarif_file" > "${sarif_file}.tmp" && mv "${sarif_file}.tmp" "$sarif_file"
          
          # Estat√≠sticas finais
          file_size=$(wc -c < "$sarif_file")
          findings=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
          rules=$(jq '.runs[0].tool.driver.rules | length' "$sarif_file" 2>/dev/null || echo "0")
          
          echo "üìä SARIF gerado com sucesso:"
          echo "   ‚Ä¢ Tamanho: $((file_size/1024))KB"
          echo "   ‚Ä¢ Findings: $findings"
          echo "   ‚Ä¢ Regras: $rules"
          echo "   ‚Ä¢ Formato: SARIF 2.1.0"

      - name: Validate SARIF
        if: inputs.validate_sarif == 'true'
        run: |
          echo "üîç Valida√ß√£o final do SARIF..."
          
          sarif_file="fortify-artifacts/fortify-sast-results.sarif"
          
          if [ -f "$sarif_file" ]; then
              if sarif validate "$sarif_file" 2>/dev/null; then
                  count=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
                  rules=$(jq '.runs[0].tool.driver.rules | length' "$sarif_file" 2>/dev/null || echo "0")
                  echo "‚úÖ SARIF v√°lido: $count findings, $rules regras"
              else
                  echo "‚ùå SARIF gerado mas inv√°lido"
                  echo "üîç Verificando problemas..."
                  sarif validate "$sarif_file" || true
                  exit 1
              fi
          else
              echo "‚ùå Arquivo SARIF n√£o encontrado"
              exit 1
          fi

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: fortify-artifacts/fortify-sast-results.sarif
        continue-on-error: true

      - name: Upload SARIF Artifact for Developer
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30

      - name: Cleanup temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: fortify-fpr-temp-${{ github.run_number }}
        continue-on-error: true

      - name: Summary for Developer
        run: |
          echo "üéâ Convers√£o FPR ‚Üí SARIF conclu√≠da!"
          echo ""
          echo "üìã INSTRU√á√ïES PARA O DESENVOLVEDOR:"
          echo "1. Acesse: Actions ‚Üí Esta execu√ß√£o ‚Üí Artifacts"
          echo "2. Baixe: fortify-sarif-${{ github.run_number }}.zip"
          echo "3. Extraia o arquivo .sarif"
          echo "4. Abra no VS Code com extens√£o 'SARIF Viewer'"
          echo "5. Analise as vulnerabilidades e aplique corre√ß√µes"
          echo ""
          echo "üîó Documenta√ß√£o SARIF Viewer: https://marketplace.visualstudio.com/items?itemName=MS-SarifVSCode.sarif-viewer" 
