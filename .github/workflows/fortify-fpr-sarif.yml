name: Fortify FPR to SARIF Converter

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: 'Nome do projeto Fortify'
      version:
        required: true
        type: string
        description: 'Vers√£o do projeto Fortify'
      dotnet_version:
        description: 'Vers√£o do .NET SDK'
        required: false
        default: '8.0.x'
        type: string
      validate_sarif:
        description: 'Validar SARIF gerado'
        required: false
        default: 'true'
        type: string
      timeout_minutes:
        description: 'Timeout em minutos'
        required: false
        default: 45
        type: number
    secrets:
      FORTIFY_SSC_API_URL:
        required: true
        description: 'URL da API do Fortify SSC'
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
        description: 'Token de autentica√ß√£o Fortify'

jobs:
  convert:
    name: Fortify FPR to SARIF Conversion
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744

      - name: Install dependencies
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          sudo apt-get update -qq
          sudo apt-get install -y jq curl
          echo "‚úÖ Depend√™ncias instaladas"

      - name: Validate inputs
        run: |
          echo "üîç Validando inputs..."
          
          if [[ -z "${{ inputs.name }}" ]]; then
            echo "‚ùå Nome do projeto √© obrigat√≥rio"
            exit 1
          fi
          
          if [[ -z "${{ inputs.version }}" ]]; then
            echo "‚ùå Vers√£o do projeto √© obrigat√≥ria"
            exit 1
          fi
          
          # Sanitiza√ß√£o mais robusta com fallback
          PROJECT_NAME=$(echo "${{ inputs.name }}" | tr -d '\n\r\t' | sed 's/[^a-zA-Z0-9._-]//g' | head -c 100)
          PROJECT_VERSION=$(echo "${{ inputs.version }}" | tr -d '\n\r\t' | sed 's/[^a-zA-Z0-9._-]//g' | head -c 50)
          
          # Se sanitiza√ß√£o removeu tudo, usar valor original
          if [[ -z "$PROJECT_NAME" ]]; then
            PROJECT_NAME=$(echo "${{ inputs.name }}" | tr -d '\n\r\t' | head -c 100)
            if [[ -z "$PROJECT_NAME" ]]; then
              echo "‚ùå Nome do projeto inv√°lido"
              exit 1
            fi
          fi
          
          if [[ -z "$PROJECT_VERSION" ]]; then
            PROJECT_VERSION=$(echo "${{ inputs.version }}" | tr -d '\n\r\t' | head -c 50)
            if [[ -z "$PROJECT_VERSION" ]]; then
              echo "‚ùå Vers√£o do projeto inv√°lida"
              exit 1
            fi
          fi
          
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

      - name: Validate secrets
        run: |
          echo "üîê Validando secrets..."
          
          # Validar URL de forma mais robusta
          if [[ -z "${{ secrets.FORTIFY_SSC_API_URL }}" ]]; then
            echo "‚ùå FORTIFY_SSC_API_URL n√£o configurado"
            exit 1
          fi
          
          # Usar grep em vez de regex bash
          if ! echo "${{ secrets.FORTIFY_SSC_API_URL }}" | grep -qE '^https?://'; then
            echo "‚ùå FORTIFY_SSC_API_URL formato inv√°lido"
            exit 1
          fi
          
          if [[ -z "${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}" ]]; then
            echo "‚ùå FORTIFY_UNIFIED_LOGIN_TOKEN n√£o configurado"
            exit 1
          fi
          
          echo "‚úÖ Secrets validados"

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Install SARIF MultiTool
        run: |
          echo "üîß Instalando SARIF MultiTool..."
          
          if ! dotnet tool install --global Sarif.Multitool; then
            echo "‚ùå Falha na instala√ß√£o do SARIF MultiTool"
            exit 1
          fi
          
          # Adicionar ao PATH
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          
          echo "‚úÖ SARIF MultiTool instalado"

      - name: Test connectivity
        env:
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
        run: |
          echo "üîç Testando conectividade..."
          
          if ! curl -k -sSL --connect-timeout 10 --max-time 30 \
              -H "Authorization: FortifyToken $fortify_unified_login_token" \
              "$fortify_ssc_api_url/api/v1/projectVersions" >/dev/null 2>&1; then
            echo "‚ùå Falha na conectividade/autentica√ß√£o"
            exit 1
          fi
          
          echo "‚úÖ Conectividade OK"

      - name: Download FPR
        env:
          fortify_project_name: ${{ env.PROJECT_NAME }}
          fortify_version_name: ${{ env.PROJECT_VERSION }}
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
        run: |
          echo "üì• Baixando FPR..."
          
          # Buscar projeto/vers√£o
          project_response=$(curl -k -sSL --connect-timeout 10 --max-time 30 \
              -H "Authorization: FortifyToken $fortify_unified_login_token" \
              "$fortify_ssc_api_url/api/v1/projectVersions?q=$fortify_project_name&fulltextsearch=true")
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Falha ao buscar projeto"
            exit 1
          fi
          
          # Validar se resposta √© JSON v√°lido
          if ! echo "$project_response" | jq -e . >/dev/null 2>&1; then
            echo "‚ùå Resposta inv√°lida da API"
            exit 1
          fi
          
          # Buscar version_id com valida√ß√£o
          version_id=$(echo "$project_response" | jq -r --arg proj "$fortify_project_name" --arg ver "$fortify_version_name" \
              '.data[] | select(.project.name==$proj and .name==$ver) | .id')
          
          if [ -z "$version_id" ] || [ "$version_id" == "null" ]; then
            echo "‚ùå Projeto/vers√£o n√£o encontrado: $fortify_project_name/$fortify_version_name"
            exit 1
          fi
          
          echo "‚úÖ Projeto encontrado: $version_id"
          
          # Buscar FPR
          artifacts_response=$(curl -k -sSL --connect-timeout 10 --max-time 30 \
              -H "Authorization: FortifyToken $fortify_unified_login_token" \
              "$fortify_ssc_api_url/api/v1/projectVersions/$version_id/artifacts")
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Falha ao buscar artefatos"
            exit 1
          fi
          
          # Validar se resposta √© JSON v√°lido
          if ! echo "$artifacts_response" | jq -e . >/dev/null 2>&1; then
            echo "‚ùå Resposta inv√°lida da API de artefatos"
            exit 1
          fi
          
          # Buscar FPR com valida√ß√£o
          fpr_id=$(echo "$artifacts_response" | jq -r '.data[] | select(.name | endswith(".fpr")) | .id' | head -1)
          
          if [ -z "$fpr_id" ] || [ "$fpr_id" == "null" ]; then
            echo "‚ùå Nenhum FPR encontrado"
            exit 1
          fi
          
          echo "‚úÖ FPR encontrado: $fpr_id"
          
          # Baixar FPR
          mkdir -p fortify-artifacts
          
          # Nome de arquivo mais seguro com valida√ß√£o
          safe_project_name=$(echo "$fortify_project_name" | sed 's/[^a-zA-Z0-9._-]/-/g')
          if [[ -z "$safe_project_name" ]]; then
            safe_project_name="project"
          fi
          
          fpr_filename="${safe_project_name}-${fortify_version_name}.fpr"
          
          if ! curl -k -sSL --connect-timeout 30 --max-time 300 \
              -H "Authorization: FortifyToken $fortify_unified_login_token" \
              -H "Accept: application/octet-stream" \
              "$fortify_ssc_api_url/api/v1/projectVersions/$version_id/artifacts/$fpr_id/content" \
              -o "fortify-artifacts/$fpr_filename"; then
            echo "‚ùå Falha ao baixar FPR"
            exit 1
          fi
          
          file_size=$(wc -c < "fortify-artifacts/$fpr_filename")
          if [ "$file_size" -lt 1024 ]; then
            echo "‚ùå Arquivo FPR muito pequeno"
            exit 1
          fi
          
          echo "‚úÖ FPR baixado: $fpr_filename ($((file_size/1024/1024))MB)"
          echo "fpr_filename=$fpr_filename" >> $GITHUB_ENV

      - name: Convert FPR to SARIF
        env:
          fortify_project_name: ${{ env.PROJECT_NAME }}
          fortify_version_name: ${{ env.PROJECT_VERSION }}
        run: |
          echo "üîÑ Convertendo FPR ‚Üí SARIF..."
          
          fpr_file="fortify-artifacts/$fpr_filename"
          sarif_file="fortify-artifacts/fortify-sast-results.sarif"
          
          if ! sarif convert "$fpr_file" \
                --tool FortifyFpr \
                --output "$sarif_file" \
                --pretty-print --force; then
            echo "‚ùå Falha na convers√£o"
            exit 1
          fi
          
          if [ ! -f "$sarif_file" ]; then
            echo "‚ùå Arquivo SARIF n√£o foi gerado"
            exit 1
          fi
          
          file_size=$(wc -c < "$sarif_file")
          # Contagem de findings mais robusta
          findings=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
          
          echo "‚úÖ SARIF gerado: $((file_size/1024))KB, $findings findings"

      - name: Validate SARIF
        if: inputs.validate_sarif == 'true'
        run: |
          sarif_file="fortify-artifacts/fortify-sast-results.sarif"
          
          if [ ! -f "$sarif_file" ]; then
            echo "‚ùå Arquivo SARIF n√£o encontrado"
            exit 1
          fi
          
          if ! sarif validate "$sarif_file" 2>/dev/null; then
            echo "‚ùå SARIF inv√°lido"
            exit 1
          fi
          
          echo "‚úÖ SARIF v√°lido"

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: fortify-artifacts/fortify-sast-results.sarif
        continue-on-error: true

      - name: Upload SARIF Artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30 
