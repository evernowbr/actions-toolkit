name: Fortify FPR to SARIF Converter

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      dotnet_version:
        description: 'Vers√£o do .NET SDK'
        required: false
        default: '8.0.x'
        type: string
      validate_sarif:
        description: 'Validar SARIF gerado'
        required: false
        default: 'true'
        type: string
    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true

jobs:
  convert:
    name: Fortify FPR to SARIF Conversion
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq curl unzip

      - name: Diagnose connectivity
        env:
          FORTIFY_SSC_API_URL: ${{ secrets.FORTIFY_SSC_API_URL }}
          FORTIFY_UNIFIED_LOGIN_TOKEN: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
        run: |
          echo "üîç Diagn√≥stico de conectividade..."
          echo "üìã Configura√ß√£o:"
          echo "   ‚Ä¢ URL: $FORTIFY_SSC_API_URL"
          echo "   ‚Ä¢ Token: ${FORTIFY_UNIFIED_LOGIN_TOKEN:0:10}..."
          
          # Testar conectividade b√°sica
          echo "üåê Testando conectividade b√°sica..."
          if curl -k -sSL --connect-timeout 10 --max-time 30 "$FORTIFY_SSC_API_URL" >/dev/null 2>&1; then
              echo "‚úÖ Servidor acess√≠vel"
          else
              echo "‚ùå Servidor n√£o acess√≠vel"
              echo "üí° Verifique se a URL est√° correta"
          fi
          
          # Testar autentica√ß√£o
          echo "üîê Testando autentica√ß√£o..."
          if curl -k -sSL --connect-timeout 10 --max-time 30 \
              -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
              "$FORTIFY_SSC_API_URL/api/v1/projectVersions" >/dev/null 2>&1; then
              echo "‚úÖ Autentica√ß√£o OK"
          else
              echo "‚ùå Falha na autentica√ß√£o"
              echo "üí° Verifique se o token est√° correto"
          fi

      - name: Verify and Download FPR
        env:
          FORTIFY_PROJECT_NAME: ${{ inputs.name }}
          FORTIFY_VERSION_NAME: ${{ inputs.version }}
          FORTIFY_SSC_API_URL: ${{ secrets.FORTIFY_SSC_API_URL }}
          FORTIFY_UNIFIED_LOGIN_TOKEN: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
        run: |
          set -euo pipefail
          
          echo "üì• Verificando e baixando FPR existente..."
          
          # Fun√ß√£o para chamadas API com tratamento de erro robusto
          api_call() {
              local method="${1:-GET}"
              local url="$2"
              local context="$3"
              
              echo "üîó Conectando ao SSC: $url"
              
              # Testar conectividade primeiro
              if ! curl -k -sSL --connect-timeout 10 --max-time 30 \
                  -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                  "$FORTIFY_SSC_API_URL/api/v1/projectVersions" >/dev/null 2>&1; then
                  echo "‚ùå Erro de conectividade com o SSC"
                  echo "üîç Verificando configura√ß√£o..."
                  echo "   ‚Ä¢ URL: $FORTIFY_SSC_API_URL"
                  echo "   ‚Ä¢ Token: ${FORTIFY_UNIFIED_LOGIN_TOKEN:0:10}..."
                  echo "üí° Verifique se:"
                  echo "   ‚Ä¢ O servidor SSC est√° acess√≠vel"
                  echo "   ‚Ä¢ O token est√° correto"
                  echo "   ‚Ä¢ A URL est√° correta"
                  return 1
              fi
              
              # Fazer chamada real
              local response
              local exit_code
              
              response=$(curl -k -sSL --connect-timeout 10 --max-time 30 \
                  -H "Content-Type: application/json" \
                  -H "Accept: application/json" \
                  -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                  ${method:+-X "$method"} \
                  "$url" 2>/dev/null)
              exit_code=$?
              
              if [ $exit_code -ne 0 ]; then
                  echo "‚ùå Falha na chamada API ($context): c√≥digo $exit_code"
                  return 1
              fi
              
              if [ -z "$response" ]; then
                  echo "‚ùå Resposta vazia da API ($context)"
                  return 1
              fi
              
              # Validar JSON
              if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                  echo "‚ùå Resposta inv√°lida da API ($context)"
                  echo "Resposta: $response"
                  return 1
              fi
              
              echo "$response"
              return 0
          }
          
          # Buscar projeto/vers√£o
          echo "üîç Buscando projeto: $FORTIFY_PROJECT_NAME/$FORTIFY_VERSION_NAME"
          project_response=$(api_call "GET" "$FORTIFY_SSC_API_URL/api/v1/projectVersions?q=$FORTIFY_PROJECT_NAME&fulltextsearch=true" "verificar projeto")
          
          if [ $? -ne 0 ]; then
              echo "‚ùå Falha ao buscar projeto no SSC"
              exit 1
          fi
          
          version_id=$(echo "$project_response" | jq -r --arg proj "$FORTIFY_PROJECT_NAME" --arg ver "$FORTIFY_VERSION_NAME" \
              '.data[] | select(.project.name==$proj and .name==$ver) | .id')
          
          if [ -z "$version_id" ] || [ "$version_id" == "null" ]; then
              echo "‚ùå Projeto/vers√£o n√£o encontrado: $FORTIFY_PROJECT_NAME/$FORTIFY_VERSION_NAME"
              echo "üí° Certifique-se de que o scan j√° foi executado"
              echo "üîç Projetos dispon√≠veis:"
              echo "$project_response" | jq -r '.data[] | "   ‚Ä¢ \(.project.name)/\(.name)"' 2>/dev/null || echo "   ‚Ä¢ Nenhum projeto encontrado"
              exit 1
          fi
          
          echo "‚úÖ Projeto encontrado: $version_id"
          echo "FORTIFY_PROJECT_VERSION_ID=$version_id" >> $GITHUB_ENV
          
          # Buscar FPR mais recente
          echo "üìã Buscando artefatos FPR..."
          artifacts_response=$(api_call "GET" "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$version_id/artifacts" "buscar artefatos")
          
          if [ $? -ne 0 ]; then
              echo "‚ùå Falha ao buscar artefatos no SSC"
              exit 1
          fi
          
          # Pegar o FPR mais recente (ordenado por data)
          fpr_id=$(echo "$artifacts_response" | jq -r '.data[] | select(.name | endswith(".fpr")) | .id' | head -1)
          
          if [ -z "$fpr_id" ] || [ "$fpr_id" == "null" ]; then
              echo "‚ùå Nenhum FPR encontrado para este projeto/vers√£o"
              echo "üí° Execute um scan Fortify antes de converter para SARIF"
              echo "üîç Artefatos dispon√≠veis:"
              echo "$artifacts_response" | jq -r '.data[] | "   ‚Ä¢ \(.name) (\(.id))"' 2>/dev/null || echo "   ‚Ä¢ Nenhum artefato encontrado"
              exit 1
          fi
          
          echo "‚úÖ FPR encontrado: $fpr_id"
          
          # Criar diret√≥rio e baixar FPR
          mkdir -p fortify-artifacts
          fpr_filename="$(echo "$FORTIFY_PROJECT_NAME" | sed 's/\//-/g')-$FORTIFY_VERSION_NAME.fpr"
          
          echo "üì• Baixando FPR: $fpr_filename"
          
          # Download com retry e timeout
          download_success=false
          for attempt in {1..3}; do
              echo "üîÑ Tentativa $attempt de download..."
              
              if curl -k -sSL --connect-timeout 30 --max-time 300 \
                  -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                  -H "Accept: application/octet-stream" \
                  "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$version_id/artifacts/$fpr_id/content" \
                  -o "fortify-artifacts/$fpr_filename"; then
                  
                  file_size=$(wc -c < "fortify-artifacts/$fpr_filename")
                  if [ "$file_size" -gt 1024 ]; then
                      echo "‚úÖ FPR baixado com sucesso: $fpr_filename ($((file_size/1024/1024))MB)"
                      echo "FPR_FILENAME=$fpr_filename" >> $GITHUB_ENV
                      download_success=true
                      break
                  else
                      echo "‚ö†Ô∏è Arquivo baixado muito pequeno ($file_size bytes), tentando novamente..."
                      rm -f "fortify-artifacts/$fpr_filename"
                  fi
              else
                  echo "‚ö†Ô∏è Tentativa $attempt falhou"
                  if [ $attempt -lt 3 ]; then
                      echo "‚è≥ Aguardando 10 segundos antes da pr√≥xima tentativa..."
                      sleep 10
                  fi
              fi
          done
          
          if [ "$download_success" = false ]; then
              echo "‚ùå Falha ao baixar FPR ap√≥s 3 tentativas"
              echo "üîç Verificando conectividade..."
              curl -k -sSL --connect-timeout 10 \
                  -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                  "$FORTIFY_SSC_API_URL/api/v1/projectVersions" >/dev/null 2>&1 && \
                  echo "‚úÖ Conectividade OK" || echo "‚ùå Problema de conectividade"
              exit 1
          fi

      - name: Validate FPR File
        run: |
          echo "üîç Validando arquivo FPR..."
          
          fpr_file="fortify-artifacts/$FPR_FILENAME"
          
          # Verificar se arquivo existe e n√£o est√° vazio
          if [ ! -f "$fpr_file" ]; then
              echo "‚ùå Arquivo FPR n√£o encontrado: $fpr_file"
              exit 1
          fi
          
          file_size=$(wc -c < "$fpr_file")
          if [ "$file_size" -lt 1024 ]; then
              echo "‚ùå Arquivo FPR muito pequeno ($file_size bytes) - pode estar corrompido"
              exit 1
          fi
          
          # Verificar cabe√ßalho FPR (arquivos FPR come√ßam com bytes espec√≠ficos)
          if ! file "$fpr_file" | grep -q "data"; then
              echo "‚ùå Arquivo n√£o parece ser um FPR v√°lido"
              file "$fpr_file"
              exit 1
          fi
          
          echo "‚úÖ FPR validado: $((file_size/1024/1024))MB"
          echo "üìä Arquivo pronto para convers√£o"

      - name: Setup .NET SDK for SARIF Conversion
        uses: actions/setup-dotnet@6bd8b7f7774af54e05809fcc5431931b3eb1ddee
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Install Latest Compatible SARIF MultiTool
        run: |
          echo "üîß Preparando runner para convers√£o SARIF..."
          
          # Verificar vers√µes dispon√≠veis do SARIF MultiTool
          echo "üìã Verificando vers√µes SARIF MultiTool dispon√≠veis..."
          available_versions=$(dotnet tool search Sarif.Multitool | grep "Sarif.Multitool" | head -5)
          echo "$available_versions"
          
          # Tentar instalar vers√µes em ordem de prefer√™ncia (mais recente primeiro)
          versions_to_try=("4.8.0" "4.7.1" "4.7.0" "4.6.0")
          installed=false
          
          for version in "${versions_to_try[@]}"; do
              echo "üîÑ Tentando instalar SARIF MultiTool v$version..."
              
              if dotnet tool install --global Sarif.Multitool --version "$version" 2>/dev/null; then
                  echo "‚úÖ SARIF MultiTool v$version instalado com sucesso"
                  echo "SARIF_VERSION=$version" >> $GITHUB_ENV
                  installed=true
                  break
              else
                  echo "‚ö†Ô∏è Vers√£o $version n√£o dispon√≠vel, tentando pr√≥xima..."
              fi
          done
          
          if [ "$installed" = false ]; then
              echo "‚ùå Nenhuma vers√£o compat√≠vel encontrada"
              echo "üí° Tentando instalar a vers√£o mais recente dispon√≠vel..."
              if dotnet tool install --global Sarif.Multitool; then
                  echo "‚úÖ SARIF MultiTool (latest) instalado"
              else
                  echo "‚ùå Falha total na instala√ß√£o do SARIF MultiTool"
                  exit 1
              fi
          fi
          
          # Adicionar ao PATH e verificar
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          export PATH="$HOME/.dotnet/tools:$PATH"
          
          # Testar se funciona
          if sarif --version >/dev/null 2>&1; then
              echo "‚úÖ SARIF MultiTool pronto para convers√£o"
              sarif --version
          else
              echo "‚ùå SARIF MultiTool instalado mas n√£o funciona"
              exit 1
          fi

      - name: Convert FPR to SARIF
        env:
          FORTIFY_PROJECT_NAME: ${{ inputs.name }}
          FORTIFY_VERSION_NAME: ${{ inputs.version }}
        run: |
          echo "üîÑ Convertendo FPR ‚Üí SARIF com runner otimizado..."
          
          fpr_file="fortify-artifacts/$FPR_FILENAME"
          sarif_file="fortify-artifacts/fortify-sast-results.sarif"
          
          # Convers√£o com retry
          conversion_success=false
          for attempt in {1..3}; do
              echo "üìÅ Tentativa $attempt: Convertendo $(basename "$fpr_file")"
              
              if sarif convert "$fpr_file" \
                    --tool FortifyFpr \
                    --output "$sarif_file" \
                    --pretty-print --force; then
                  
                  echo "‚úÖ Convers√£o bem-sucedida na tentativa $attempt"
                  conversion_success=true
                  break
              else
                  echo "‚ö†Ô∏è Tentativa $attempt falhou"
                  if [ $attempt -lt 3 ]; then
                      sleep 5
                  fi
              fi
          done
          
          if [ "$conversion_success" = false ]; then
              echo "‚ùå Falha na convers√£o ap√≥s 3 tentativas"
              exit 1
          fi
          
          # Verificar se SARIF foi gerado
          if [ ! -f "$sarif_file" ]; then
              echo "‚ùå Arquivo SARIF n√£o foi gerado"
              exit 1
          fi
          
          # Adicionar metadados Fortify
          echo "üè∑Ô∏è Adicionando metadados Fortify..."
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          jq --arg project "$FORTIFY_PROJECT_NAME" \
             --arg version "$FORTIFY_VERSION_NAME" \
             --arg timestamp "$timestamp" \
             --arg version_id "${FORTIFY_PROJECT_VERSION_ID:-unknown}" \
             '(.runs[0].properties // {}) |= . + {
                "fortify_project": $project,
                "fortify_version": $version,
                "fortify_version_id": $version_id,
                "fortify_scan_time": $timestamp,
                "fortify_engine_version": "25.2.0",
                "conversion_method": "existing_fpr_direct"
              }' "$sarif_file" > "${sarif_file}.tmp" && mv "${sarif_file}.tmp" "$sarif_file"
          
          # Estat√≠sticas
          file_size=$(wc -c < "$sarif_file")
          findings=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
          rules=$(jq '.runs[0].tool.driver.rules | length' "$sarif_file" 2>/dev/null || echo "0")
          
          echo "üìä SARIF gerado com sucesso:"
          echo "   ‚Ä¢ Tamanho: $((file_size/1024))KB"
          echo "   ‚Ä¢ Findings: $findings"
          echo "   ‚Ä¢ Regras: $rules"

      - name: Validate SARIF Output
        if: ${{ fromJSON(inputs.validate_sarif) }}
        run: |
          echo "üîç Valida√ß√£o final do SARIF..."
          
          sarif_file="fortify-artifacts/fortify-sast-results.sarif"
          
          if [ -f "$sarif_file" ]; then
              if sarif validate "$sarif_file" 2>/dev/null; then
                  echo "‚úÖ SARIF v√°lido e pronto para uso"
              else
                  echo "‚ùå SARIF gerado mas inv√°lido"
                  echo "üîç Tentando identificar o problema..."
                  sarif validate "$sarif_file" || true
                  exit 1
              fi
          else
              echo "‚ùå Arquivo SARIF n√£o encontrado"
              exit 1
          fi

      - name: Upload SARIF Artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: fortify-sarif-optimized-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30 
