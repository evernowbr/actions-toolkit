name: Fortify FPR to SARIF Converter

permissions:
  contents: read
  actions: read

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      sarif_multitool_version:
        description: 'Versão específica do SARIF MultiTool'
        required: false
        default: 'latest'
        type: string

    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
      FORTIFY_CONTROLLER_URL:
        required: true
      FORTIFY_CONTROLLER_TOKEN:
        required: true

jobs:
  fortify-fpr-sarif:
    name: FPR to SARIF Conversion
    runs-on: self-hosted
    timeout-minutes: 120
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Fortify Environment
        run: |
          echo "::notice title=Fortify Setup::Configurando ambiente Fortify"
          export FORTIFY_HOME=/opt/fortify
          export PATH="$FORTIFY_HOME/bin:$PATH"
          
          # Verificar se ScanCentral está disponível
          if ! command -v scancentral >/dev/null 2>&1; then
            echo "::error title=Fortify Setup::ScanCentral não encontrado em $FORTIFY_HOME/bin"
            exit 1
          fi
          
          echo "::notice title=Fortify Setup::ScanCentral version: $(scancentral -version)"

      - name: Fortify SAST Scan and FPR Download
        env:
          fortify_project_name: ${{ inputs.name }}
          fortify_version_name: ${{ inputs.version }}
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
          fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
          fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
        run: |
          echo "::notice title=Fortify SAST::Starting scan for $fortify_project_name/$fortify_version_name"
          
          # Função única de validação JSON (consolidada)
          validate_json_response() {
              local response="$1"
              local context="$2"
              
              if [ -z "$response" ]; then
                  echo "❌ Resposta vazia da API ($context)"
                  return 1
              fi
              
              if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                  echo "❌ JSON inválido ($context):"
                  echo "$response" | head -10
                  return 1
              fi
              
              # Verifica códigos de erro na resposta
              local error_msg=$(echo "$response" | jq -r '.message // empty')
              if [ -n "$error_msg" ]; then
                  echo "❌ Erro da API ($context): $error_msg"
                  return 1
              fi
              
              return 0
          }
          
          # Função segura para chamadas API
          api_call() {
              local method="${1:-GET}"
              local url="$2"
              local data="${3:-}"
              local context="$4"
              
              local curl_opts=(-sS -k -L --fail)
              curl_opts+=(-H "Content-Type: application/json")
              curl_opts+=(-H "Accept: application/json")
              curl_opts+=(-H "Authorization: FortifyToken $fortify_unified_login_token")
              
              if [ "$method" = "POST" ] || [ "$method" = "PUT" ]; then
                  curl_opts+=(-X "$method")
                  if [ -n "$data" ]; then
                      curl_opts+=(-d "$data")
                  fi
              fi
              
              curl_opts+=("$url")
              
              local response
              local exit_code
              
              response=$(curl "${curl_opts[@]}" 2>/dev/null) || exit_code=$?
              
              if [ "${exit_code:-0}" -ne 0 ]; then
                  echo "❌ Falha na chamada API ($context): $exit_code"
                  return 1
              fi
              
              if ! validate_json_response "$response" "$context"; then
                  return 1
              fi
              
              echo "$response"
              return 0
          }
          
          # ========== FUNÇÃO DE CRIAÇÃO DE PROJETO/VERSÃO ==========
          
          fortify_criar_projeto_e_versao() {
              echo "🔧 Criando projeto e versão no SSC..."
              
              # Cria um projeto e uma versão novos
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name":"'$fortify_version_name'","customTagValuesAutoApply":true,"autoPredict":true,"predictionPolicy":"LAB Fortify Policy"}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              
              if [ "$exit_code" -eq 0 ]; then
                  responseCode=$(echo "$response" | jq '.responseCode')
                  if [ "$responseCode" = "200" ] || [ "$responseCode" = "201" ]; then
                      fortify_project_id=$(echo "$response" | jq '.data.project.id')
                      fortify_project_version_id=$(echo "$response" | jq '.data.id')
                      echo "✅ Projeto $fortify_project_name criado com ID $fortify_project_id."
                      echo "✅ Versão $fortify_version_name criada com ID $fortify_project_version_id."
                      return 0
                  else
                      echo "❌ Código de retorno diferente de 200: API retornou código $responseCode"
                      echo "❌ Resposta da API: $response"
                      return 1
                  fi
              else
                  echo "❌ Comando retornou $exit_code"
                  echo "❌ Mensagem de erro: $response"  
                  return 1
              fi
          }
          
          fortify_criar_versao() {
              echo "🔧 Criando versão para projeto existente..."
              
              # Cria uma versão para um projeto já existente
              fortify_project_parameters='{"project":{"name":"'$fortify_project_name'","id":"'$fortify_project_id'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name": "'$fortify_version_name'"}'
              response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
              exit_code=$?
              
              if [ "$exit_code" -eq 0 ]; then
                  responseCode=$(echo "$response" | jq '.responseCode')
                  if [ "$responseCode" = "200" ] || [ "$responseCode" = "201" ]; then
                      fortify_project_version_id=$(echo "$response" | jq '.data.id')
                      echo "✅ Versão $fortify_version_name criada com ID $fortify_project_version_id."
                      return 0
                  else
                      echo "❌ Código de retorno diferente de 200: API retornou código $responseCode"
                      echo "❌ Resposta da API: $response"
                      return 1
                  fi
              else
                  echo "❌ Comando retornou $exit_code"
                  echo "❌ Mensagem de erro: $response"  
                  return 1
              fi
          }
          
          # ========== FUNÇÃO DE SCAN ==========
          
          fortify_executar_scan() {
              echo "🔍 Executando ScanCentral..."
              
              # Detectar tipo de projeto
              local build_type="generic"
              if [ -f "pom.xml" ]; then
                  build_type="mvn"
                  echo "📦 Projeto Maven detectado"
              elif [ -f "build.gradle" ]; then
                  build_type="gradle"
                  echo "📦 Projeto Gradle detectado"
              elif [ -f "package.json" ]; then
                  build_type="nodejs"
                  echo "📦 Projeto Node.js detectado"
              elif [ -f "requirements.txt" ]; then
                  build_type="python"
                  echo "📦 Projeto Python detectado"
              fi
              
              # Package application
              echo "📦 Empacotando aplicação..."
              scancentral package -bt $build_type -o fortify-app.zip
              
              if [ ! -f "fortify-app.zip" ]; then
                  echo "❌ Falha no empacotamento"
                  return 1
              fi
              
              echo "✅ Aplicação empacotada com sucesso"
              
              # Start scan
              echo "🚀 Iniciando scan..."
              output=$(scancentral start -b -f fortify-app.zip -uptoken $fortify_controller_token -url $fortify_controller_url -appversion $fortify_project_version_id 2>&1)
              exit_code=$?
              
              if [ $exit_code -eq 0 ]; then
                  echo "✅ Scan iniciado com sucesso"
                  
                  # Extrai o job token da saída
                  fortify_job_token=$(echo "$output" | grep "Submitted job and received token" | grep -E -o "[a-f0-9-]{36}")
                  
                  if [ -n "$fortify_job_token" ]; then
                      echo "✅ Job token: $fortify_job_token"
                      return 0
                  else
                      echo "❌ Job token não encontrado"
                      return 1
                  fi
              else
                  echo "❌ Falha ao iniciar scan: $output"
                  return 1
              fi
          }
          
          # ========== FUNÇÃO DE DOWNLOAD FPR ==========
          
          fortify_download_fpr() {
              echo "📥 Aguardando FPR disponível..."
              
              local max_attempts=30
              local attempt=1
              local fpr_file=""
              
              while [ $attempt -le $max_attempts ]; do
                  echo "⏳ Tentativa $attempt de $max_attempts..."
                  
                  # Buscar artifacts
                  artifacts_response=$(api_call "GET" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts" "" "buscar artifacts")
                  
                  if [ $? -eq 0 ]; then
                      fpr_id=$(echo "$artifacts_response" | jq -r '.data[]? | select(.name? | test("\\.fpr$")) | .id' | head -1)
                      
                      if [ -n "$fpr_id" ] && [ "$fpr_id" != "null" ]; then
                          echo "✅ FPR encontrado - ID: $fpr_id"
                          mkdir -p fortify-artifacts
                          fpr_filename="$fortify_project_name-${fortify_version_name}.fpr"
                          
                          curl -sS -k -L -H "Authorization: FortifyToken $fortify_unified_login_token" -H "Accept: application/octet-stream" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/artifacts/$fpr_id/content" -o "fortify-artifacts/$fpr_filename"
                          
                          if [ -f "fortify-artifacts/$fpr_filename" ] && [ $(wc -c < "fortify-artifacts/$fpr_filename") -gt 1024 ]; then
                              echo "✅ FPR baixado com sucesso - $(wc -c < "fortify-artifacts/$fpr_filename") bytes"
                              fpr_file="fortify-artifacts/$fpr_filename"
                              break
                          fi
                      fi
                  fi
                  
                  if [ $attempt -lt $max_attempts ]; then
                      echo "⏳ Aguardando 60 segundos..."
                      sleep 60
                  fi
                  
                  attempt=$((attempt + 1))
              done
              
              if [ -n "$fpr_file" ]; then
                  echo "✅ FPR disponível: $fpr_file"
                  return 0
              else
                  echo "❌ FPR não encontrado após $max_attempts tentativas"
                  return 1
              fi
          }
          
          # ========== FUNÇÃO DE CONVERSÃO FPR PARA SARIF ==========
          
          fortify_converter_fpr_sarif() {
              echo "🔄 Convertendo FPR para SARIF..."
              
              if ! command -v sarif >/dev/null 2>&1; then
                  echo "📦 Instalando SARIF MultiTool..."
                  dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }} --no-cache 2>/dev/null || true
                  export PATH="$HOME/.dotnet/tools:$PATH"
              fi
              
              local fpr_file="$1"
              local sarif_file="fortify-artifacts/fortify-sast-results.sarif"
              
              if [ -n "$fpr_file" ] && [ -f "$fpr_file" ]; then
                  echo "🔄 Convertendo: $fpr_file"
                  timeout 300 sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force 2>/dev/null || true
                  
                  if [ -f "$sarif_file" ] && [ -s "$sarif_file" ]; then
                      echo "✅ Conversão FPR para SARIF concluída"
                      
                      # Adicionar metadados ao SARIF
                      jq --arg project "$fortify_project_name" \
                         --arg version "$fortify_version_name" \
                         --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                         --arg version_id "$fortify_project_version_id" \
                         --arg project_id "$fortify_project_id" \
                         '(.runs[0].properties // {}) |= . + {
                           "fortify_project": $project,
                           "fortify_version": $version,
                           "fortify_scan_time": $timestamp,
                           "fortify_version_id": $version_id,
                           "fortify_project_id": $project_id,
                           "fortify_engine_version": "25.2.0",
                           "conversion_method": "fpr_to_sarif",
                           "github_run_id": "'${{ github.run_id }}'",
                           "github_run_number": "'${{ github.run_number }}'"
                         }' "$sarif_file" > "$sarif_file.tmp" && mv "$sarif_file.tmp" "$sarif_file"
                      
                      # Validar SARIF
                      if jq -e . "$sarif_file" >/dev/null 2>&1; then
                          findings_count=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
                          echo "✅ SARIF válido - $findings_count findings encontrados"
                          return 0
                      else
                          echo "❌ SARIF inválido"
                          return 1
                      fi
                  else
                      echo "❌ Falha na conversão FPR para SARIF"
                      return 1
                  fi
              else
                  echo "❌ Arquivo FPR não encontrado"
                  return 1
              fi
          }
          
          # ========== EXECUÇÃO PRINCIPAL ==========
          
          echo '   ____            __   _  ___        ____ ___    ____ ______ '
          echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
          echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
          echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
          echo '                            /___/                             '
          echo ""
          echo "🚀 Iniciando Fortify SAST Scan..."
          
          # Verificar se projeto e versão já existem
          echo "🔍 Verificando se o projeto $fortify_project_name existe no SSC..."
          response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true")
          exit_code=$?
          
          if [ "$exit_code" -eq 0 ]; then
              responseCode=$(echo "$response" | jq '.responseCode')
              if [ "$responseCode" = "200" ] || [ "$responseCode" = "201" ]; then
                  fortify_project_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | .project.id' | head -1 | awk '{$1=$1};1')
                  fortify_project_version_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | select(.name=="'$fortify_version_name'") | .id' | awk '{$1=$1};1')
                  
                  if [ -n "$fortify_project_version_id" ] && [ "$fortify_project_version_id" != "null" ]; then
                      # Já existe projeto e versão no SSC
                      echo "✅ O projeto $fortify_project_name já existe no SSC com ID $fortify_project_id."
                      echo "✅ A versão $fortify_version_name já existe no SSC com ID $fortify_project_version_id."
                  elif [ -n "$fortify_project_id" ] && [ "$fortify_project_id" != "null" ]; then
                      # Já existe projeto (sem versão) no SSC
                      echo "✅ O projeto $fortify_project_name já existe no SSC com ID $fortify_project_id. Criando versão..."
                      if ! fortify_criar_versao; then
                          echo "❌ Falha ao criar versão"
                          exit 1
                      fi
                  else
                      # Não tem projeto nem versão no SSC
                      echo "⚠️ O projeto $fortify_project_name ainda não existe no SSC. Criando projeto e versão..."
                      if ! fortify_criar_projeto_e_versao; then
                          echo "❌ Falha ao criar projeto e versão"
                          exit 1
                      fi
                  fi
              else
                  echo "❌ Falha ao verificar projeto: $responseCode"
                  exit 1
              fi
          else
              echo "❌ Falha ao verificar projeto"
              exit 1
          fi
          
          # Executar scan
          if fortify_executar_scan; then
              echo "✅ Scan executado com sucesso"
              
              # Download FPR
              if fortify_download_fpr; then
                  echo "✅ FPR baixado com sucesso"
                  
                  # Converter FPR para SARIF
                  if fortify_converter_fpr_sarif "fortify-artifacts/$fortify_project_name-${fortify_version_name}.fpr"; then
                      echo "✅ SARIF gerado com sucesso"
                  else
                      echo "❌ Falha na conversão FPR para SARIF"
                      exit 1
                  fi
              else
                  echo "❌ Falha ao baixar FPR"
                  exit 1
              fi
          else
              echo "❌ Falha na execução do scan"
              exit 1
          fi

      - name: Upload SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30
