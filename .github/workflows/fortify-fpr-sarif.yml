name: Fortify FPR ‚Üí SARIF Converter (Linux)

on:
  workflow_call:
    inputs:
      # Flag para ativar a convers√£o
      enable_sarif_multitool:
        description: 'Habilita convers√£o FPR‚ÜíSARIF usando SARIF MultiTool'
        required: false
        default: 'true'
        type: string
      # Vers√£o do .NET SDK
      dotnet_version:
        description: 'Vers√£o do .NET SDK para instalar'
        required: false
        default: '8.0.x'
        type: string
      # Vers√£o do SARIF MultiTool
      sarif_multitool_version:
        description: 'Vers√£o do SARIF MultiTool'
        required: false
        default: '4.5.4'
        type: string
      # Nome do artefato FPR
      fpr_artifact_name:
        description: 'Nome do artefato contendo arquivos .fpr'
        required: false
        default: 'fortify-fpr'
        type: string
      # Validar SARIF gerado
      validate_sarif:
        description: 'Validar arquivos SARIF gerados'
        required: false
        default: 'true'
        type: string
      # Nome do projeto Fortify
      fortify_project_name:
        description: 'Nome do projeto Fortify'
        required: false
        default: 'Unknown'
        type: string
      # Vers√£o do projeto Fortify
      fortify_version_name:
        description: 'Vers√£o do projeto Fortify'
        required: false
        default: 'Unknown'
        type: string
    secrets:
      FORTIFY_SSC_API_URL:
        required: false
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: false

jobs:
  convert-fpr-linux:
    name: Convert FPR to SARIF (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ fromJSON(inputs.enable_sarif_multitool) }}
    permissions:
      actions: read
      contents: read

    steps:
      # ========== CHECKOUT ==========
      - name: Checkout repository
        uses: actions/checkout@v4

      # ========== DOWNLOAD FPR FROM SSC ==========
      - name: Download FPR from SSC
        shell: bash
        env:
          FORTIFY_SSC_API_URL: ${{ secrets.FORTIFY_SSC_API_URL }}
          FORTIFY_UNIFIED_LOGIN_TOKEN: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
          FORTIFY_PROJECT_NAME: ${{ inputs.fortify_project_name }}
          FORTIFY_VERSION_NAME: ${{ inputs.fortify_version_name }}
        run: |
          echo "üì• Baixando .fpr do Fortify SSC..."
          
          # Configura√ß√µes robustas
          set -euo pipefail
          IFS=$'\n\t'
          trap 'echo "‚ùå Script falhou na linha $LINENO"' ERR
          
          # Criar diret√≥rio para .fpr
          mkdir -p ./fpr-files
          
          # ========== FUN√á√ïES UTILIT√ÅRIAS LINUX ==========
          
          # Fun√ß√£o para valida√ß√£o JSON
          validate_json_response() {
              local response="$1"
              local context="$2"
              
              if [ -z "$response" ]; then
                  echo "‚ùå Resposta vazia da API ($context)"
                  return 1
              fi
              
              if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                  echo "‚ùå JSON inv√°lido ($context):"
                  echo "$response" | head -10
                  return 1
              fi
              
              local error_msg=$(echo "$response" | jq -r '.message // empty')
              if [ -n "$error_msg" ]; then
                  echo "‚ùå Erro da API ($context): $error_msg"
                  return 1
              fi
              
              return 0
          }
          
          # Fun√ß√£o para chamadas API
          api_call() {
              local method="${1:-GET}"
              local url="$2"
              local data="${3:-}"
              local context="$4"
              
              local curl_opts=(-sS -k -L --fail)
              curl_opts+=(-H "Content-Type: application/json")
              curl_opts+=(-H "Accept: application/json")
              curl_opts+=(-H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN")
              
              if [ "$method" = "POST" ] || [ "$method" = "PUT" ]; then
                  curl_opts+=(-X "$method")
                  if [ -n "$data" ]; then
                      curl_opts+=(-d "$data")
                  fi
              fi
              
              curl_opts+=("$url")
              
              local response
              local exit_code
              
              response=$(curl "${curl_opts[@]}" 2>/dev/null) || exit_code=$?
              
              if [ "${exit_code:-0}" -ne 0 ]; then
                  echo "‚ùå Falha na chamada API ($context): $exit_code"
                  return 1
              fi
              
              if ! validate_json_response "$response" "$context"; then
                  return 1
              fi
              
              echo "$response"
              return 0
          }
          
          # Fun√ß√£o para buscar projeto/vers√£o no Fortify SSC
          fortify_buscar_projeto_versao() {
              echo "üîç Buscando projeto/vers√£o no Fortify SSC..."
              
              if [ -n "$FORTIFY_SSC_API_URL" ] && [ -n "$FORTIFY_UNIFIED_LOGIN_TOKEN" ]; then
                  local project_response
                  local encoded_name=$(echo "$FORTIFY_PROJECT_NAME" | jq -rR '@uri')
                  project_response=$(api_call "GET" "$FORTIFY_SSC_API_URL/projectVersions?q=$encoded_name&fulltextsearch=true" "" "buscar projeto")
                  
                  if [ $? -eq 0 ]; then
                      local project_id=$(echo "$project_response" | jq -r '.data[] | select(.project.name=="'"$FORTIFY_PROJECT_NAME"'") | .project.id' | head -1)
                      local version_id=$(echo "$project_response" | jq -r '.data[] | select(.project.name=="'"$FORTIFY_PROJECT_NAME"'") | select(.name=="'"$FORTIFY_VERSION_NAME"'") | .id' | head -1)
                      
                      if [ -n "$version_id" ]; then
                          echo "‚úÖ Projeto e vers√£o encontrados: $version_id"
                          FORTIFY_PROJECT_VERSION_ID="$version_id"
                          return 0
                      elif [ -n "$project_id" ]; then
                          echo "‚úÖ Projeto encontrado, vers√£o n√£o existe"
                          FORTIFY_PROJECT_ID="$project_id"
                          return 1
                      else
                          echo "‚ö†Ô∏è Projeto n√£o encontrado"
                          return 2
                      fi
                  else
                      echo "‚ö†Ô∏è Falha ao buscar projeto no SSC"
                      return 3
                  fi
              else
                  echo "‚ö†Ô∏è Secrets do Fortify n√£o configurados"
                  return 4
              fi
          }
          
          # Fun√ß√£o para baixar .fpr do SSC
          download_fpr_from_ssc() {
              echo "üì• Baixando arquivo .fpr do SSC..."
              
              if [ -z "$FORTIFY_PROJECT_VERSION_ID" ]; then
                  echo "‚ùå ID da vers√£o n√£o encontrado"
                  return 1
              fi
              
              # Buscar artefatos da vers√£o
              local artifacts_response=$(api_call "GET" "$FORTIFY_SSC_API_URL/projectVersions/$FORTIFY_PROJECT_VERSION_ID/artifacts" "" "buscar artefatos")
              
              if [ $? -eq 0 ]; then
                  # Encontrar arquivo .fpr
                  local fpr_file_id=$(echo "$artifacts_response" | jq -r '.data[] | select(.name | endswith(".fpr")) | .id' | head -1)
                  
                  if [ -n "$fpr_file_id" ] && [ "$fpr_file_id" != "null" ]; then
                      echo "‚úÖ Arquivo .fpr encontrado: $fpr_file_id"
                      
                      # Baixar arquivo .fpr
                      local fpr_filename="$FORTIFY_PROJECT_NAME-$FORTIFY_VERSION_NAME.fpr"
                      local fpr_path="./fpr-files/$fpr_filename"
                      
                      echo "üì• Baixando: $fpr_filename"
                      
                      # Download do arquivo
                      curl -sS -k -L --fail \
                           -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                           -H "Accept: application/octet-stream" \
                           "$FORTIFY_SSC_API_URL/projectVersions/$FORTIFY_PROJECT_VERSION_ID/artifacts/$fpr_file_id/content" \
                           -o "$fpr_path"
                      
                      if [ $? -eq 0 ] && [ -f "$fpr_path" ]; then
                          local file_size=$(wc -c < "$fpr_path")
                          echo "‚úÖ Download conclu√≠do: $fpr_filename ($((file_size/1024))KB)"
                          return 0
                      else
                          echo "‚ùå Falha no download do arquivo .fpr"
                          return 1
                      fi
                  else
                      echo "‚ö†Ô∏è Nenhum arquivo .fpr encontrado para esta vers√£o"
                      return 2
                  fi
              else
                  echo "‚ùå Falha ao buscar artefatos"
                  return 3
              fi
          }
          
          # Executar busca e download
          fortify_buscar_projeto_versao
          fortify_status=$?
          
          if [ $fortify_status -eq 0 ]; then
              download_fpr_from_ssc
              download_status=$?
              
              if [ $download_status -eq 0 ]; then
                  echo "‚úÖ Download do .fpr conclu√≠do com sucesso"
              else
                  echo "‚ùå Falha no download do .fpr"
                  exit 1
              fi
          else
              echo "‚ùå Falha ao buscar projeto/vers√£o no SSC"
              exit 1
          fi

      # ========== VALIDATE PREREQUISITES ==========
      - name: Validate prerequisites
        run: |
          echo "üîç Validando pr√©-requisitos..."
          
          # Sanitiza√ß√£o mais robusta de inputs
          if [[ ! "${{ inputs.fortify_project_name }}" =~ ^[a-zA-Z0-9_.-]{1,50}$ ]]; then
            echo "‚ùå Nome do projeto inv√°lido (deve ter 1-50 chars: a-zA-Z0-9_.-)"
            exit 1
          fi
          
          if [[ ! "${{ inputs.fortify_version_name }}" =~ ^[a-zA-Z0-9_.-]{1,30}$ ]]; then
            echo "‚ùå Nome da vers√£o inv√°lido (deve ter 1-30 chars: a-zA-Z0-9_.-)"
            exit 1
          fi
          
          # Validar vers√£o do SARIF MultiTool
          if [[ ! "${{ inputs.sarif_multitool_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Vers√£o SARIF MultiTool inv√°lida (formato: x.y.z)"
            exit 1
          fi
          
          # Mascarar tokens com valida√ß√£o
          if [[ -n "${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}" ]]; then
            echo "::add-mask::${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}"
          fi
          
          if [[ -n "${{ secrets.FORTIFY_SSC_API_URL }}" ]]; then
            echo "::add-mask::${{ secrets.FORTIFY_SSC_API_URL }}"
          fi
          
          # Verificar se FPR artifact existe
          if [ ! -d "./fpr-files" ]; then
            echo "‚ùå Diret√≥rio fpr-files n√£o encontrado"
            exit 1
          fi
          
          # Verificar se h√° arquivos FPR
          fpr_files=$(find ./fpr-files -name "*.fpr" 2>/dev/null | wc -l)
          if [ "$fpr_files" -eq 0 ]; then
            echo "‚ùå Nenhum arquivo .fpr encontrado"
            exit 1
          fi
          
          echo "‚úÖ Encontrados $fpr_files arquivos FPR"
          
          # Verificar tamanho dos arquivos
          find ./fpr-files -name "*.fpr" -size +100M | while read large_file; do
            echo "‚ö†Ô∏è Arquivo grande detectado: $large_file"
          done

      # ========== SETUP .NET SDK ==========
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      # ========== CACHE .NET TOOLS ==========
      - name: Cache .NET tools
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/tools
          key: dotnet-tools-${{ inputs.sarif_multitool_version }}-${{ github.repository }}-${{ hashFiles('**/*.yml', '**/*.yaml') }}
          restore-keys: |
            dotnet-tools-${{ inputs.sarif_multitool_version }}-${{ github.repository }}-
            dotnet-tools-${{ inputs.sarif_multitool_version }}-

      # ========== INSTALL LINUX DEPENDENCIES ==========
      - name: Install Linux dependencies
        run: |
          echo "üì¶ Instalando depend√™ncias Linux..."
          sudo apt-get update
          sudo apt-get install -y jq curl
          echo "‚úÖ Depend√™ncias Linux instaladas"

      # ========== INSTALL SARIF MULTITOOL ==========
      - name: Install SARIF MultiTool
        run: |
          echo "üîß Instalando SARIF MultiTool v${{ inputs.sarif_multitool_version }}..."
          
          # Retry logic para instala√ß√£o
          for attempt in {1..3}; do
            if dotnet tool install --global Sarif.Multitool --version ${{ inputs.sarif_multitool_version }}; then
              break
            else
              echo "‚ö†Ô∏è Tentativa $attempt falhou, tentando novamente em 5s..."
              sleep 5
            fi
          done
          
          # Adicionar ao PATH explicitamente
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          
          # Verificar instala√ß√£o com timeout
          timeout 30s sarif --version || {
            echo "‚ùå Falha na verifica√ß√£o do SARIF MultiTool"
            exit 1
          }
          
          echo "‚úÖ SARIF MultiTool instalado com sucesso"

      # ========== CONVERT FPR TO SARIF ==========
      - name: Convert FPR files to SARIF
        shell: bash
        env:
          FORTIFY_SSC_API_URL: ${{ secrets.FORTIFY_SSC_API_URL }}
          FORTIFY_UNIFIED_LOGIN_TOKEN: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
          FORTIFY_PROJECT_NAME: ${{ inputs.fortify_project_name }}
          FORTIFY_VERSION_NAME: ${{ inputs.fortify_version_name }}
        run: |
          # Configura√ß√µes robustas
          set -euo pipefail
          IFS=$'\n\t'
          
          # Trap para cleanup
          trap 'echo "‚ùå Script falhou na linha $LINENO"' ERR
          
          echo "üîÑ Iniciando convers√£o FPR ‚Üí SARIF (Linux)..."
          
          # ========== FUN√á√ïES UTILIT√ÅRIAS LINUX (baseadas no fortify-sast.yml) ==========
          
          # Fun√ß√£o para valida√ß√£o JSON (baseada no fortify-sast.yml)
          validate_json_response() {
              local response="$1"
              local context="$2"
              
              if [ -z "$response" ]; then
                  echo "‚ùå Resposta vazia da API ($context)"
                  return 1
              fi
              
              if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                  echo "‚ùå JSON inv√°lido ($context):"
                  echo "$response" | head -10
                  return 1
              fi
              
              local error_msg=$(echo "$response" | jq -r '.message // empty')
              if [ -n "$error_msg" ]; then
                  echo "‚ùå Erro da API ($context): $error_msg"
                  return 1
              fi
              
              return 0
          }
          
          # Fun√ß√£o para chamadas API (baseada no fortify-sast.yml)
          api_call() {
              local method="${1:-GET}"
              local url="$2"
              local data="${3:-}"
              local context="$4"
              
              local curl_opts=(-sS -k -L --fail)
              curl_opts+=(-H "Content-Type: application/json")
              curl_opts+=(-H "Accept: application/json")
              curl_opts+=(-H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN")
              
              if [ "$method" = "POST" ] || [ "$method" = "PUT" ]; then
                  curl_opts+=(-X "$method")
                  if [ -n "$data" ]; then
                      curl_opts+=(-d "$data")
                  fi
              fi
              
              curl_opts+=("$url")
              
              local response
              local exit_code
              
              response=$(curl "${curl_opts[@]}" 2>/dev/null) || exit_code=$?
              
              if [ "${exit_code:-0}" -ne 0 ]; then
                  echo "‚ùå Falha na chamada API ($context): $exit_code"
                  return 1
              fi
              
              if ! validate_json_response "$response" "$context"; then
                  return 1
              fi
              
              echo "$response"
              return 0
          }
          
          # Fun√ß√£o para buscar projeto/vers√£o no Fortify SSC (Linux)
          fortify_buscar_projeto_versao() {
              echo "üîç Buscando projeto/vers√£o no Fortify SSC (Linux)..."
              
              if [ -n "$FORTIFY_SSC_API_URL" ] && [ -n "$FORTIFY_UNIFIED_LOGIN_TOKEN" ]; then
                  local project_response
                  local encoded_name=$(echo "$FORTIFY_PROJECT_NAME" | jq -rR '@uri')
                  project_response=$(api_call "GET" "$FORTIFY_SSC_API_URL/projectVersions?q=$encoded_name&fulltextsearch=true" "" "buscar projeto")
                  
                  if [ $? -eq 0 ]; then
                      local project_id=$(echo "$project_response" | jq -r '.data[] | select(.project.name=="'"$FORTIFY_PROJECT_NAME"'") | .project.id' | head -1)
                      local version_id=$(echo "$project_response" | jq -r '.data[] | select(.project.name=="'"$FORTIFY_PROJECT_NAME"'") | select(.name=="'"$FORTIFY_VERSION_NAME"'") | .id' | head -1)
                      
                      if [ -n "$version_id" ]; then
                          echo "‚úÖ Projeto e vers√£o encontrados: $version_id"
                          FORTIFY_PROJECT_VERSION_ID="$version_id"
                          return 0
                      elif [ -n "$project_id" ]; then
                          echo "‚úÖ Projeto encontrado, vers√£o n√£o existe"
                          FORTIFY_PROJECT_ID="$project_id"
                          return 1
                      else
                          echo "‚ö†Ô∏è Projeto n√£o encontrado"
                          return 2
                      fi
                  else
                      echo "‚ö†Ô∏è Falha ao buscar projeto no SSC"
                      return 3
                  fi
              else
                  echo "‚ö†Ô∏è Secrets do Fortify n√£o configurados"
                  return 4
              fi
          }
          
          # Criar diret√≥rio de sa√≠da
          mkdir -p ./sarif-output
          
          # Contador de arquivos
          fpr_count=0
          converted_count=0
          failed_count=0
          
          # Buscar projeto/vers√£o no Fortify SSC
          fortify_buscar_projeto_versao
          fortify_status=$?
          
          # Buscar todos os arquivos .fpr
          shopt -s globstar
          for fpr_file in ./fpr-files/**/*.fpr; do
            if [ -f "$fpr_file" ]; then
              fpr_count=$((fpr_count + 1))
              echo "üìÅ Processando: $fpr_file"
              
              # Gerar nome do arquivo SARIF
              sarif_file="./sarif-output/$(basename "$fpr_file" .fpr).sarif"
              
              # Converter usando SARIF MultiTool
              if sarif convert "$fpr_file" --tool FortifyFpr --output "$sarif_file" --pretty-print --force; then
                
                converted_count=$((converted_count + 1))
                echo "‚úÖ Convertido: $sarif_file"
                
                # P√≥s-processamento para melhorar compatibilidade
                if [ -f "$sarif_file" ]; then
                  echo "üîß Aplicando melhorias de compatibilidade..."
                  
                  # Fun√ß√£o melhorada para aplicar metadados SARIF
                  apply_fortify_metadata() {
                      local sarif_file="$1"
                      local temp_file="${sarif_file}.tmp"
                      
                      # Valida√ß√µes de entrada
                      if [[ ! -f "$sarif_file" ]]; then
                          echo "‚ö†Ô∏è Arquivo SARIF n√£o encontrado: $sarif_file"
                          return 1
                      fi
                      
                      if [[ ! -s "$sarif_file" ]]; then
                          echo "‚ö†Ô∏è Arquivo SARIF vazio: $sarif_file"
                          return 1
                      fi
                      
                      # Validar JSON b√°sico
                      if ! jq empty "$sarif_file" 2>/dev/null; then
                          echo "‚ö†Ô∏è Arquivo SARIF com JSON inv√°lido: $sarif_file"
                          return 1
                      fi
                      
                      # Validar estrutura m√≠nima SARIF
                      local schema_version=$(jq -r '."$schema" // empty' "$sarif_file" 2>/dev/null)
                      local sarif_version=$(jq -r '.version // empty' "$sarif_file" 2>/dev/null)
                      
                      if [[ -z "$schema_version" || -z "$sarif_version" ]]; then
                          echo "‚ö†Ô∏è Estrutura SARIF inv√°lida em: $sarif_file"
                          return 1
                      fi
                      
                      local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                      local fortify_version="25.2.0"
                      
                      # Aplicar transforma√ß√µes com valida√ß√£o robusta
                      if jq --arg timestamp "$timestamp" \
                            --arg project_name "$FORTIFY_PROJECT_NAME" \
                            --arg version_name "$FORTIFY_VERSION_NAME" \
                            --arg fortify_version "$fortify_version" \
                            --arg version_id "${FORTIFY_PROJECT_VERSION_ID:-0}" '
                         # Garantir estrutura m√≠nima
                         if (.runs | type) != "array" or (.runs | length) == 0 then 
                             .runs = [{"tool": {"driver": {}}, "invocations": [{}], "results": []}] 
                         else . end |
                         
                         # Garantir estruturas obrigat√≥rias
                         (.runs[0].tool.driver.name = "Fortify Static Code Analyzer") |
                         (.runs[0].tool.driver.version = $fortify_version) |
                         (.runs[0].tool.driver.informationUri = "https://www.microfocus.com/en-us/cyberres/application-security/static-code-analyzer") |
                         
                         # Garantir invocations
                         if (.runs[0].invocations | type) != "array" or (.runs[0].invocations | length) == 0 then
                             .runs[0].invocations = [{}]
                         else . end |
                         
                         (.runs[0].invocations[0].startTimeUtc = $timestamp) |
                         (.runs[0].invocations[0].endTimeUtc = $timestamp) |
                         (.runs[0].invocations[0].executionSuccessful = true) |
                         (.runs[0].invocations[0].commandLine = "scancentral") |
                         (.runs[0].invocations[0].workingDirectory = {"uri": "file:///github/workspace/"}) |
                         
                         # Processar results com valida√ß√£o completa
                         if (.runs[0].results | type) == "array" then
                             .runs[0].results |= map(
                                 if (.locations | type) == "array" and (.locations | length) > 0 and
                                    .locations[0].physicalLocation.artifactLocation.uri and
                                    .locations[0].physicalLocation.region.startLine and
                                    .ruleId then
                                     . + {
                                         "partialFingerprints": {
                                             "primaryLocationLineHash": (.locations[0].physicalLocation.artifactLocation.uri + ":" + (.locations[0].physicalLocation.region.startLine | tostring) + ":" + .ruleId)
                                         },
                                         "properties": {
                                             "fortify_project": $project_name,
                                             "fortify_version": $version_name,
                                             "fortify_version_id": $version_id,
                                             "fortify_scan_time": $timestamp,
                                             "fortify_engine_version": $fortify_version
                                         }
                                     }
                                 else
                                     .
                                 end
                             )
                         else . end' "$sarif_file" > "$temp_file"; then
                          
                          # Validar arquivo gerado
                          if jq empty "$temp_file" 2>/dev/null && [[ -s "$temp_file" ]]; then
                              mv "$temp_file" "$sarif_file"
                              echo "‚úÖ Metadados Fortify aplicados com sucesso"
                              return 0
                          else
                              rm -f "$temp_file"
                              echo "‚ö†Ô∏è Arquivo SARIF gerado inv√°lido"
                              return 1
                          fi
                      else
                          rm -f "$temp_file"
                          echo "‚ö†Ô∏è Falha na transforma√ß√£o JQ"
                          return 1
                      fi
                  }
                  
                  if apply_fortify_metadata "$sarif_file"; then
                    echo "‚úÖ Metadados Fortify adicionados"
                  else
                    echo "‚ö†Ô∏è Falha ao adicionar metadados Fortify"
                  fi
                fi
                
                # Verificar tamanho do arquivo
                if [ -f "$sarif_file" ]; then
                  file_size=$(wc -c < "$sarif_file")
                  echo "üìä Tamanho: $((file_size/1024))KB"
                fi
              else
                failed_count=$((failed_count + 1))
                echo "‚ùå Falha na convers√£o: $fpr_file"
              fi
            fi
          done
          
          # Verificar se h√° arquivos FPR para processar
          if [ "$fpr_count" -eq 0 ]; then
            echo "‚ùå Nenhum arquivo FPR encontrado"
            exit 1
          fi
          
          echo "üìà Resumo da convers√£o (Linux):"
          echo "   ‚Ä¢ Arquivos FPR encontrados: $fpr_count"
          echo "   ‚Ä¢ Arquivos convertidos: $converted_count"
          echo "   ‚Ä¢ Falhas na convers√£o: $failed_count"
          
          # Calcular taxa de sucesso
          if [ "$fpr_count" -gt 0 ]; then
            success_rate=$((converted_count * 100 / fpr_count))
            echo "   ‚Ä¢ Taxa de sucesso: ${success_rate}%"
          else
            echo "   ‚Ä¢ Taxa de sucesso: N/A (nenhum arquivo FPR encontrado)"
          fi
          
          # Falhar se n√£o houve convers√µes bem-sucedidas
          if [ "$converted_count" -eq 0 ] && [ "$fpr_count" -gt 0 ]; then
            echo "‚ùå Nenhum arquivo foi convertido com sucesso"
            exit 1
          fi
          
          # Gerar resumo para GitHub
          echo "### üìä Convers√£o FPR ‚Üí SARIF (Linux)" >> $GITHUB_STEP_SUMMARY
          echo "| M√©trica | Valor | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| FPR Processados | $fpr_count | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          echo "| SARIF Gerados | $converted_count | $([ $converted_count -gt 0 ] && echo "‚úÖ" || echo "‚ùå") |" >> $GITHUB_STEP_SUMMARY
          echo "| Taxa Sucesso | ${success_rate}% | $([ $success_rate -gt 90 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
          echo "| Tempo Execu√ß√£o | $(date -u -d @$SECONDS +%M:%S) | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Status da Integra√ß√£o SSC" >> $GITHUB_STEP_SUMMARY
          echo "| Componente | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| API Endpoint | ${FORTIFY_SSC_API_URL:+‚úÖ Configurado} ${FORTIFY_SSC_API_URL:-‚ùå N√£o configurado} |" >> $GITHUB_STEP_SUMMARY
          echo "| Token Auth | ${FORTIFY_UNIFIED_LOGIN_TOKEN:+‚úÖ Configurado} ${FORTIFY_UNIFIED_LOGIN_TOKEN:-‚ùå N√£o configurado} |" >> $GITHUB_STEP_SUMMARY
          echo "| Projeto/Vers√£o | ${FORTIFY_PROJECT_VERSION_ID:+‚úÖ Encontrado ($FORTIFY_PROJECT_VERSION_ID)} ${FORTIFY_PROJECT_VERSION_ID:-‚ö†Ô∏è N√£o encontrado} |" >> $GITHUB_STEP_SUMMARY

      # ========== VALIDATE SARIF FILES ==========
      - name: Validate SARIF files
        if: ${{ fromJSON(inputs.validate_sarif) }}
        shell: bash
        run: |
          echo "üîç Validando arquivos SARIF..."
          
          validation_errors=0
          valid_files=0
          total_files=0
          
          for sarif_file in ./sarif-output/*.sarif; do
            if [ -f "$sarif_file" ]; then
              total_files=$((total_files + 1))
              echo "üîç Validando: $(basename "$sarif_file")"
              
              if sarif validate "$sarif_file"; then
                valid_files=$((valid_files + 1))
                echo "‚úÖ V√°lido: $(basename "$sarif_file")"
              else
                validation_errors=$((validation_errors + 1))
                echo "‚ùå Inv√°lido: $(basename "$sarif_file")"
              fi
            fi
          done
          
          echo "üìä Resultado da valida√ß√£o:"
          echo "   ‚Ä¢ Total de arquivos: $total_files"
          echo "   ‚Ä¢ Arquivos v√°lidos: $valid_files"
          echo "   ‚Ä¢ Erros de valida√ß√£o: $validation_errors"
          
          if [ $validation_errors -gt 0 ]; then
            echo "‚ö†Ô∏è Alguns arquivos SARIF falharam na valida√ß√£o"
          fi
          
          # Falhar se todos os arquivos s√£o inv√°lidos
          if [ "$valid_files" -eq 0 ] && [ "$total_files" -gt 0 ]; then
            echo "‚ùå Todos os arquivos SARIF s√£o inv√°lidos"
            exit 1
          fi

      # ========== ANALYZE SARIF CONTENT ==========
      - name: Analyze SARIF content
        shell: bash
        run: |
          echo "üìä An√°lise detalhada dos arquivos SARIF..."
          
          for sarif_file in ./sarif-output/*.sarif; do
            if [ -f "$sarif_file" ]; then
              echo ""
              echo "üìã $(basename "$sarif_file"):"
              
              # Contar resultados por n√≠vel
              critical_high=$(jq '.runs[0].results[] | select(.level == "error") | .ruleId' "$sarif_file" 2>/dev/null | wc -l)
              medium=$(jq '.runs[0].results[] | select(.level == "warning") | .ruleId' "$sarif_file" 2>/dev/null | wc -l)
              low=$(jq '.runs[0].results[] | select(.level == "note") | .ruleId' "$sarif_file" 2>/dev/null | wc -l)
              total=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
              
              echo "   ‚Ä¢ Total de findings: $total"
              echo "   ‚Ä¢ Critical/High: $critical_high"
              echo "   ‚Ä¢ Medium: $medium"
              echo "   ‚Ä¢ Low: $low"
              
              # Verificar regras √∫nicas
              unique_rules=$(jq '.runs[0].results[].ruleId' "$sarif_file" 2>/dev/null | sort | uniq | wc -l)
              echo "   ‚Ä¢ Regras √∫nicas: $unique_rules"
            fi
          done

      # ========== UPLOAD SARIF ARTIFACTS ==========
      - name: Upload SARIF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-linux
          path: './sarif-output/*.sarif'
          if-no-files-found: error 
