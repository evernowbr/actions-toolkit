name: Fortify Complete FPR to SARIF

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      fortify_scancentral_tool:
        required: false
        default: 'scancentral'
        type: string
      fortify_translate_name:
        required: false
        default: '-bt none'
        type: string
      fortify_translate_additional_flags:
        required: false
        default: ''
        type: string
      dotnet_version:
        required: false
        default: '8.0.x'
        type: string
      validate_sarif:
        required: false
        default: 'true'
        type: string
      scan_timeout_minutes:
        required: false
        default: 60
        type: number
      processing_timeout_minutes:
        required: false
        default: 45
        type: number
      max_polling_attempts:
        required: false
        default: 45
        type: number
    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true
      FORTIFY_CONTROLLER_URL:
        required: true
      FORTIFY_CONTROLLER_TOKEN:
        required: true

jobs:
  # ========== JOB 1: SCAN + PUBLISH (Self-hosted) ==========
  fortify-scan:
    name: Fortify Scan and Publish
    runs-on: self-hosted
    timeout-minutes: ${{ inputs.scan_timeout_minutes }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v4.1.7

      - name: Mask sensitive data
        run: |
          echo "::add-mask::${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}"
          echo "::add-mask::${{ secrets.FORTIFY_CONTROLLER_TOKEN }}"

      - name: Validate and sanitize inputs
        run: |
          echo "üîç Validando e sanitizando inputs..."
          
          # Valida√ß√£o b√°sica
          if [[ -z "${{ inputs.name }}" ]]; then
              echo "‚ùå Nome do projeto √© obrigat√≥rio"
              exit 1
          fi
          
          if [[ -z "${{ inputs.version }}" ]]; then
              echo "‚ùå Vers√£o do projeto √© obrigat√≥ria"
              exit 1
          fi
          
          # Sanitiza√ß√£o segura
          PROJECT_NAME=$(echo "${{ inputs.name }}" | sed 's/[^a-zA-Z0-9._/-]//g' | head -c 100)
          VERSION_NAME=$(echo "${{ inputs.version }}" | sed 's/[^a-zA-Z0-9._-]//g' | head -c 50)
          
          if [[ -z "$PROJECT_NAME" ]] || [[ -z "$VERSION_NAME" ]]; then
              echo "‚ùå Inputs cont√™m caracteres inv√°lidos"
              exit 1
          fi
          
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "‚úÖ Inputs validados e sanitizados"

      - name: Verify dependencies
        run: |
          echo "üîç Verificando depend√™ncias..."
          
          # Verificar ferramentas essenciais
          command -v jq >/dev/null 2>&1 || { echo "‚ùå jq n√£o encontrado"; exit 1; }
          command -v curl >/dev/null 2>&1 || { echo "‚ùå curl n√£o encontrado"; exit 1; }
          
          # Verificar ScanCentral
          if ! command -v ${{ inputs.fortify_scancentral_tool }} >/dev/null 2>&1; then
              # Tentar path alternativo
              export PATH="$PATH:/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin"
              if ! command -v ${{ inputs.fortify_scancentral_tool }} >/dev/null 2>&1; then
                  echo "‚ùå ScanCentral n√£o encontrado"
                  exit 1
              fi
          fi
          
          echo "‚úÖ Todas as depend√™ncias verificadas"

      - name: Execute Fortify Scan
        env:
          FORTIFY_SSC_API_URL: ${{ secrets.FORTIFY_SSC_API_URL }}
          FORTIFY_UNIFIED_LOGIN_TOKEN: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
          FORTIFY_CONTROLLER_URL: ${{ secrets.FORTIFY_CONTROLLER_URL }}
          FORTIFY_CONTROLLER_TOKEN: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
          FORTIFY_SCANCENTRAL_TOOL: ${{ inputs.fortify_scancentral_tool }}
          FORTIFY_TRANSLATE_NAME: ${{ inputs.fortify_translate_name }}
          FORTIFY_TRANSLATE_FLAGS: ${{ inputs.fortify_translate_additional_flags }}
        run: |
          echo "üöÄ Executando Fortify Scan Completo..."
          
          # Configurar environment
          export PATH="$PATH:/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin"
          
          # ========== FUN√á√ïES OTIMIZADAS ==========
          
          # Fun√ß√£o robusta para valida√ß√£o de resposta API
          validate_api_response() {
              local response="$1"
              local context="$2"
              local expected_codes="${3:-200,201}"
              
              if [[ -z "$response" ]]; then
                  echo "‚ùå Resposta vazia da API ($context)"
                  return 1
              fi
              
              if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                  echo "‚ùå JSON inv√°lido ($context):"
                  echo "$response" | head -5
                  return 1
              fi
              
              # Verificar c√≥digos de erro espec√≠ficos do Fortify
              local error_code=$(echo "$response" | jq -r '.errorCode // empty')
              if [[ -n "$error_code" ]]; then
                  local error_msg=$(echo "$response" | jq -r '.message // "Erro desconhecido"')
                  echo "‚ùå Erro da API ($context): [$error_code] $error_msg"
                  return 1
              fi
              
              return 0
          }
          
          # Fun√ß√£o segura para chamadas API com retry
          api_call_with_retry() {
              local method="${1:-GET}"
              local url="$2"
              local data="${3:-}"
              local context="$4"
              local max_retries="${5:-3}"
              
              for attempt in $(seq 1 $max_retries); do
                  local curl_opts=(-sS -k -L --connect-timeout 30 --max-time 120)
                  curl_opts+=(-H "Content-Type: application/json")
                  curl_opts+=(-H "Accept: application/json")
                  curl_opts+=(-H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN")
                  
                  if [[ "$method" == "POST" ]] || [[ "$method" == "PUT" ]]; then
                      curl_opts+=(-X "$method")
                      if [[ -n "$data" ]]; then
                          curl_opts+=(-d "$data")
                      fi
                  fi
                  
                  curl_opts+=("$url")
                  
                  local response
                  local exit_code
                  
                  response=$(curl "${curl_opts[@]}" 2>/dev/null) || exit_code=$?
                  
                  if [[ "${exit_code:-0}" -eq 0 ]] && validate_api_response "$response" "$context"; then
                      echo "$response"
                      return 0
                  else
                      echo "‚ö†Ô∏è Tentativa $attempt/$max_retries falhou ($context)"
                      if [[ $attempt -lt $max_retries ]]; then
                          sleep $((attempt * 2))  # Backoff exponencial
                      fi
                  fi
              done
              
              echo "‚ùå Falha na API ap√≥s $max_retries tentativas ($context)"
              return 1
          }
          
          # Fun√ß√£o para criar projeto com valida√ß√£o completa
          create_project_version() {
              local project_name="$1"
              local version_name="$2"
              
              local payload=$(jq -nc \
                  --arg name "$project_name" \
                  --arg version "$version_name" \
                  '{
                      "project": {"name": $name},
                      "issueTemplateId": "Prioritized-HighRisk-Project-Template",
                      "name": $version,
                      "customTagValuesAutoApply": true,
                      "autoPredict": true,
                      "predictionPolicy": "LAB Fortify Policy"
                  }')
              
              local response
              response=$(api_call_with_retry "POST" "$FORTIFY_SSC_API_URL/api/v1/projectVersions" "$payload" "criar projeto")
              
              if [[ $? -eq 0 ]]; then
                  local project_id=$(echo "$response" | jq -r '.data.project.id')
                  local version_id=$(echo "$response" | jq -r '.data.id')
                  
                  echo "‚úÖ Projeto criado: $project_name (ID: $project_id)"
                  echo "‚úÖ Vers√£o criada: $version_name (ID: $version_id)"
                  echo "$version_id"
                  return 0
              else
                  return 1
              fi
          }
          
          # ========== EXECU√á√ÉO PRINCIPAL OTIMIZADA ==========
          
          echo '   ____            __   _  ___        ____ ___    ____ ______ '
          echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
          echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
          echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
          echo '                            /___/                             '
          echo ""
          
          # Verificar projeto/vers√£o existente
          echo "üîç Verificando projeto $PROJECT_NAME no SSC..."
          
          project_response=$(api_call_with_retry "GET" \
              "$FORTIFY_SSC_API_URL/api/v1/projectVersions?q=$(echo "$PROJECT_NAME" | jq -sRr '@uri')&fulltextsearch=true" \
              "" "buscar projeto")
          
          if [[ $? -ne 0 ]]; then
              echo "‚ùå Falha ao consultar projetos"
              exit 1
          fi
          
          # Buscar IDs com filtros seguros
          project_id=$(echo "$project_response" | jq -r --arg proj "$PROJECT_NAME" \
              '.data[] | select(.project.name==$proj) | .project.id' | head -1)
          version_id=$(echo "$project_response" | jq -r --arg proj "$PROJECT_NAME" --arg ver "$VERSION_NAME" \
              '.data[] | select(.project.name==$proj and .name==$ver) | .id' | head -1)
          
          # L√≥gica de cria√ß√£o com valida√ß√£o
          if [[ -n "$version_id" ]] && [[ "$version_id" != "null" ]]; then
              echo "‚úÖ Projeto e vers√£o j√° existem (ID: $version_id)"
          elif [[ -n "$project_id" ]] && [[ "$project_id" != "null" ]]; then
              echo "üìã Projeto existe, criando vers√£o..."
              # Criar vers√£o para projeto existente
              local version_payload=$(jq -nc \
                  --arg project_name "$PROJECT_NAME" \
                  --arg project_id "$project_id" \
                  --arg version_name "$VERSION_NAME" \
                  '{
                      "project": {"name": $project_name, "id": $project_id},
                      "issueTemplateId": "Prioritized-HighRisk-Project-Template",
                      "name": $version_name
                  }')
              
              local version_response
              version_response=$(api_call_with_retry "POST" "$FORTIFY_SSC_API_URL/api/v1/projectVersions" "$version_payload" "criar vers√£o")
              
              if [[ $? -eq 0 ]]; then
                  version_id=$(echo "$version_response" | jq -r '.data.id')
                  echo "‚úÖ Vers√£o criada: $VERSION_NAME (ID: $version_id)"
              else
                  echo "‚ùå Falha ao criar vers√£o"
                  exit 1
              fi
          else
              echo "üìã Criando projeto e vers√£o..."
              version_id=$(create_project_version "$PROJECT_NAME" "$VERSION_NAME")
          fi
          
          if [[ -z "$version_id" ]] || [[ "$version_id" == "null" ]]; then
              echo "‚ùå Falha ao obter/criar projeto/vers√£o"
              exit 1
          fi
          
          # Configurar projeto (com as fun√ß√µes originais otimizadas)
          echo "‚öôÔ∏è Configurando projeto..."
          
          # Fun√ß√£o para configurar projeto
          fortify_configurar_projeto() {
              local version_id="$1"
              
              local config_data=$(jq -nc \
                  --arg version_id "$version_id" \
                  --arg base_url "$FORTIFY_SSC_API_URL" \
                  '{
                      "requests": [
                          {
                              "uri": ($base_url + "/api/v1/projectVersions/" + $version_id + "/attributes"),
                              "httpVerb": "PUT",
                              "postData": [
                                  {"values": [{"guid": "New"}], "attributeDefinitionId": 5},
                                  {"values": [{"guid": "Internal"}], "attributeDefinitionId": 6},
                                  {"values": [{"guid": "internalnetwork"}], "attributeDefinitionId": 7}
                              ]
                          },
                          {
                              "uri": ($base_url + "/api/v1/projectVersions/" + $version_id + "/authEntities"),
                              "httpVerb": "PUT",
                              "postData": []
                          },
                          {
                              "uri": ($base_url + "/api/v1/projectVersions/" + $version_id + "?hideProgress=true"),
                              "httpVerb": "PUT",
                              "postData": {"committed": true}
                          }
                      ]
                  }')
              
              local response
              response=$(api_call_with_retry "POST" "$FORTIFY_SSC_API_URL/api/v1/bulk" "$config_data" "configurar projeto")
              
              if [[ $? -eq 0 ]]; then
                  local success_count=$(echo "$response" | jq -r '.successCount')
                  if [[ "$success_count" == "3" ]]; then
                      echo "‚úÖ Projeto configurado com sucesso"
                  else
                      echo "‚ö†Ô∏è Configura√ß√£o parcial: $success_count/3 opera√ß√µes"
                  fi
              else
                  echo "‚ùå Falha ao configurar projeto"
                  return 1
              fi
          }
          
          fortify_configurar_projeto "$version_id"
          
          # Configurar regras de processamento
          fortify_regras_processamento() {
              local version_id="$1"
              
              local rules_payload='[{"identifier": "com.fortify.manager.BLL.processingrules.BuildProjectProcessingRule","displayName": "Require approval if the Build Project is different between scans","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.FileCountProcessingRule","displayName": "Require approval if file count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.LOCCountProcessingRule","displayName": "Require approval if line count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.NewerEngineVersionProcessingRule","displayName": "Require approval if the engine version of a scan is newer than the engine version of the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.RulePackVersionProcessingRule","displayName": "Require approval if the rulepacks used in the scan do not match the rulepacks used in the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.WarningProcessingRule","displayName": "Require approval if result has analysis warnings","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.ExternalListVersionProcessingRule","displayName": "Check external metadata file versions in scan against versions on server.","displayable": true,"enabled": false}]'
              
              local response
              response=$(api_call_with_retry "PUT" "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$version_id/resultProcessingRules" "$rules_payload" "configurar regras")
              
              if [[ $? -eq 0 ]]; then
                  echo "‚úÖ Regras de processamento configuradas"
              else
                  echo "‚ùå Falha ao configurar regras de processamento"
                  return 1
              fi
          }
          
          fortify_regras_processamento "$version_id"
          
          # Executar ScanCentral com valida√ß√£o
          echo "üîß Executando ScanCentral..."
          
          scan_output=$($FORTIFY_SCANCENTRAL_TOOL \
              -ssctoken "$FORTIFY_CONTROLLER_TOKEN" \
              -url "$FORTIFY_CONTROLLER_URL" \
              start $FORTIFY_TRANSLATE_NAME $FORTIFY_TRANSLATE_FLAGS \
              -skipBuild -block \
              --log-file fortify.log \
              --overwrite \
              -application "$PROJECT_NAME" \
              -version "$VERSION_NAME" \
              --upload-to-ssc \
              --ssc-upload-token "$FORTIFY_CONTROLLER_TOKEN" \
              2>&1 | tee /dev/stderr)
          
          scan_exit_code=$?
          
          if [[ $scan_exit_code -ne 0 ]]; then
              echo "‚ùå ScanCentral falhou com c√≥digo $scan_exit_code"
              exit 1
          fi
          
          # Extrair job token com valida√ß√£o robusta
          job_token=$(echo "$scan_output" | grep -E "(Submitted job and received token|Job token)" | grep -oE "[a-f0-9-]{36}" | head -1)
          
          if [[ -z "$job_token" ]]; then
              echo "‚ùå Job token n√£o encontrado no output"
              echo "üìã Output do scan:"
              echo "$scan_output" | tail -20
              exit 1
          fi
          
          echo "‚úÖ Scan enviado com sucesso. Job ID: $job_token"
          
          # Salvar metadados de forma segura
          mkdir -p /tmp/fortify-metadata
          echo "$version_id" > /tmp/fortify-metadata/version_id
          echo "$job_token" > /tmp/fortify-metadata/job_token
          echo "$PROJECT_NAME" > /tmp/fortify-metadata/project_name
          echo "$VERSION_NAME" > /tmp/fortify-metadata/version_name
          
          # Validar arquivos salvos
          if [[ ! -f /tmp/fortify-metadata/version_id ]] || [[ ! -s /tmp/fortify-metadata/version_id ]]; then
              echo "‚ùå Falha ao salvar metadados"
              exit 1
          fi
          
          echo "‚úÖ Metadados salvos com sucesso"

      - name: Upload scan metadata
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: fortify-metadata-${{ github.run_number }}
          path: /tmp/fortify-metadata/
          retention-days: 2
          if-no-files-found: error

  # ========== JOB 2: DOWNLOAD FPR + CONVERT SARIF (GitHub-hosted) ==========
  convert-fpr-sarif:
    name: Download FPR and Convert to SARIF
    runs-on: ubuntu-latest
    needs: fortify-scan
    timeout-minutes: ${{ inputs.processing_timeout_minutes }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v4.1.7

      - name: Install system dependencies
        run: |
          echo "üì¶ Instalando depend√™ncias do sistema..."
          sudo apt-get update -qq
          sudo apt-get install -y jq curl
          echo "‚úÖ Depend√™ncias instaladas"

      - name: Download scan metadata
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.8
        with:
          name: fortify-metadata-${{ github.run_number }}
          path: /tmp/fortify-metadata/

      - name: Validate metadata
        run: |
          echo "üîç Validando metadados recebidos..."
          
          required_files=("version_id" "job_token" "project_name" "version_name")
          
          for file in "${required_files[@]}"; do
              if [[ ! -f "/tmp/fortify-metadata/$file" ]] || [[ ! -s "/tmp/fortify-metadata/$file" ]]; then
                  echo "‚ùå Arquivo obrigat√≥rio ausente ou vazio: $file"
                  exit 1
              fi
          done
          
          # Carregar e validar metadados
          VERSION_ID=$(cat /tmp/fortify-metadata/version_id)
          JOB_TOKEN=$(cat /tmp/fortify-metadata/job_token)
          PROJECT_NAME=$(cat /tmp/fortify-metadata/project_name)
          VERSION_NAME=$(cat /tmp/fortify-metadata/version_name)
          
          # Valida√ß√£o de formato
          if [[ ! "$VERSION_ID" =~ ^[0-9]+$ ]]; then
              echo "‚ùå Version ID inv√°lido: $VERSION_ID"
              exit 1
          fi
          
          if [[ ! "$JOB_TOKEN" =~ ^[a-f0-9-]{36}$ ]]; then
              echo "‚ùå Job Token inv√°lido: $JOB_TOKEN"
              exit 1
          fi
          
          # Exportar como vari√°veis de ambiente
          echo "VERSION_ID=$VERSION_ID" >> $GITHUB_ENV
          echo "JOB_TOKEN=$JOB_TOKEN" >> $GITHUB_ENV
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          
          echo "‚úÖ Metadados validados:"
          echo "   ‚Ä¢ Version ID: $VERSION_ID"
          echo "   ‚Ä¢ Job Token: ${JOB_TOKEN:0:8}..."
          echo "   ‚Ä¢ Project: $PROJECT_NAME"
          echo "   ‚Ä¢ Version: $VERSION_NAME"

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@6bd8b7f7774af54e05809fcc5431931b3eb1ddee # v4.0.1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Cache .NET tools
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.dotnet/tools
          key: dotnet-tools-sarif-${{ runner.os }}-${{ hashFiles('**/*.yml') }}
          restore-keys: |
            dotnet-tools-sarif-${{ runner.os }}-
            dotnet-tools-

      - name: Install SARIF MultiTool
        run: |
          echo "üîß Instalando SARIF MultiTool..."
          
          # Lista de vers√µes testadas e compat√≠veis
          versions_to_try=("4.8.0" "4.7.1")
          installed=false
          
          for version in "${versions_to_try[@]}"; do
              echo "üîÑ Tentando vers√£o $version..."
              if dotnet tool install --global Sarif.Multitool --version "$version" --no-cache 2>/dev/null; then
                  echo "‚úÖ SARIF MultiTool v$version instalado com sucesso"
                  installed=true
                  break
              else
                  echo "‚ö†Ô∏è Vers√£o $version n√£o dispon√≠vel"
              fi
          done
          
          # Fallback para latest se vers√µes espec√≠ficas falharem
          if [[ "$installed" == "false" ]]; then
              echo "üîÑ Tentando vers√£o latest..."
              if dotnet tool install --global Sarif.Multitool --no-cache; then
                  echo "‚úÖ SARIF MultiTool (latest) instalado"
                  installed=true
              fi
          fi
          
          if [[ "$installed" == "false" ]]; then
              echo "‚ùå Falha cr√≠tica na instala√ß√£o do SARIF MultiTool"
              echo "üìã Verificando status do NuGet..."
              dotnet nuget list source
              exit 1
          fi
          
          # Configurar PATH e verificar instala√ß√£o
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          export PATH="$HOME/.dotnet/tools:$PATH"
          
          if sarif --version; then
              echo "‚úÖ SARIF MultiTool pronto para uso"
          else
              echo "‚ùå SARIF MultiTool instalado mas n√£o funciona"
              exit 1
          fi

      - name: Wait for processing and download FPR
        env:
          FORTIFY_SSC_API_URL: ${{ secrets.FORTIFY_SSC_API_URL }}
          FORTIFY_UNIFIED_LOGIN_TOKEN: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
        run: |
          echo "‚è≥ Aguardando processamento e baixando FPR..."
          echo "::add-mask::${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}"
          
          # Configura√ß√£o de polling com backoff exponencial
          max_attempts=${{ inputs.max_polling_attempts }}
          attempt=1
          base_sleep=60
          
          echo "üìã Configura√ß√£o:"
          echo "   ‚Ä¢ Version ID: $VERSION_ID"
          echo "   ‚Ä¢ Job Token: ${JOB_TOKEN:0:8}..."
          echo "   ‚Ä¢ M√°ximo de tentativas: $max_attempts"
          echo "   ‚Ä¢ Timeout total: $((max_attempts * base_sleep / 60)) minutos"
          
          while [[ $attempt -le $max_attempts ]]; do
              echo "üîç Tentativa $attempt/$max_attempts: Verificando FPR..."
              
              # Buscar artefatos com tratamento de erro robusto
              artifacts_response=$(curl -sS -k -X GET \
                  --connect-timeout 30 \
                  --max-time 120 \
                  -H "Accept: application/json" \
                  -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                  "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$VERSION_ID/artifacts" 2>/dev/null)
              
              curl_exit_code=$?
              
              if [[ $curl_exit_code -eq 0 ]] && [[ -n "$artifacts_response" ]]; then
                  # Validar JSON
                  if echo "$artifacts_response" | jq -e . >/dev/null 2>&1; then
                      # Buscar FPR com filtros seguros
                      fpr_id=$(echo "$artifacts_response" | jq -r '.data[]? | select(.name? | test("\\.fpr$")) | .id' | head -1)
                      
                      if [[ -n "$fpr_id" ]] && [[ "$fpr_id" != "null" ]]; then
                          echo "‚úÖ FPR encontrado: $fpr_id"
                          
                          # Preparar download
                          mkdir -p fortify-artifacts
                          safe_project_name=$(echo "$PROJECT_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
                          fpr_filename="${safe_project_name}-${VERSION_NAME}.fpr"
                          
                          echo "üì• Baixando FPR: $fpr_filename"
                          
                          # Download com retry e valida√ß√£o
                          download_success=false
                          for download_attempt in {1..3}; do
                              if curl -sS -k -L \
                                  --connect-timeout 60 \
                                  --max-time 600 \
                                  -H "Authorization: FortifyToken $FORTIFY_UNIFIED_LOGIN_TOKEN" \
                                  -H "Accept: application/octet-stream" \
                                  "$FORTIFY_SSC_API_URL/api/v1/projectVersions/$VERSION_ID/artifacts/$fpr_id/content" \
                                  -o "fortify-artifacts/$fpr_filename"; then
                                  
                                  # Validar arquivo baixado
                                  if [[ -f "fortify-artifacts/$fpr_filename" ]]; then
                                      file_size=$(wc -c < "fortify-artifacts/$fpr_filename")
                                      
                                      if [[ $file_size -gt 1024 ]]; then
                                          echo "‚úÖ FPR baixado: $fpr_filename ($((file_size/1024/1024))MB)"
                                          echo "FPR_FILE=fortify-artifacts/$fpr_filename" >> $GITHUB_ENV
                                          echo "FPR_FILENAME=$fpr_filename" >> $GITHUB_ENV
                                          download_success=true
                                          break
                                      else
                                          echo "‚ö†Ô∏è Arquivo muito pequeno ($file_size bytes), tentando novamente..."
                                      fi
                                  fi
                              else
                                  echo "‚ö†Ô∏è Falha no download (tentativa $download_attempt/3)"
                              fi
                              
                              if [[ $download_attempt -lt 3 ]]; then
                                  sleep 10
                              fi
                          done
                          
                          if [[ "$download_success" == "true" ]]; then
                              break
                          else
                              echo "‚ùå Falha ao baixar FPR ap√≥s 3 tentativas"
                              exit 1
                          fi
                      else
                          echo "‚è≥ FPR ainda n√£o dispon√≠vel..."
                      fi
                  else
                      echo "‚ö†Ô∏è Resposta da API inv√°lida"
                  fi
              else
                  echo "‚ö†Ô∏è Falha na consulta de artefatos (c√≥digo: $curl_exit_code)"
              fi
              
              # Verificar timeout
              if [[ $attempt -eq $max_attempts ]]; then
                  echo "‚ùå Timeout: FPR n√£o processado em $((max_attempts * base_sleep / 60)) minutos"
                  echo "üí° Dicas de troubleshooting:"
                  echo "   ‚Ä¢ Verifique se o scan foi enviado corretamente"
                  echo "   ‚Ä¢ Confirme se n√£o h√° erros no SSC"
                  echo "   ‚Ä¢ Considere aumentar max_polling_attempts"
                  exit 1
              fi
              
              # Backoff exponencial limitado
              sleep_time=$(( base_sleep + (attempt - 1) * 10 ))
              sleep_time=$(( sleep_time > 180 ? 180 : sleep_time ))  # Max 3 minutos
              
              echo "‚è≥ Aguardando ${sleep_time}s antes da pr√≥xima tentativa..."
              sleep $sleep_time
              attempt=$((attempt + 1))
          done

      - name: Convert FPR to SARIF
        run: |
          echo "üîÑ Convertendo FPR ‚Üí SARIF..."
          
          # Validar arquivo FPR
          if [[ ! -f "$FPR_FILE" ]]; then
              echo "‚ùå Arquivo FPR n√£o encontrado: $FPR_FILE"
              exit 1
          fi
          
          file_size=$(wc -c < "$FPR_FILE")
          echo "üìÅ Arquivo FPR: $(basename "$FPR_FILE") ($((file_size/1024/1024))MB)"
          
          sarif_file="fortify-artifacts/fortify-sast-results.sarif"
          
          # Convers√£o com retry e timeout
          conversion_success=false
          for attempt in {1..3}; do
              echo "üîÑ Tentativa $attempt/3: Convertendo FPR..."
              
              # Usar timeout para evitar travamentos
              if timeout 300 sarif convert "$FPR_FILE" \
                    --tool FortifyFpr \
                    --output "$sarif_file" \
                    --pretty-print \
                    --force; then
                  
                  # Validar SARIF gerado
                  if [[ -f "$sarif_file" ]] && [[ -s "$sarif_file" ]]; then
                      if jq -e . "$sarif_file" >/dev/null 2>&1; then
                          echo "‚úÖ Convers√£o bem-sucedida na tentativa $attempt"
                          conversion_success=true
                          break
                      else
                          echo "‚ö†Ô∏è SARIF gerado √© inv√°lido"
                      fi
                  else
                      echo "‚ö†Ô∏è Arquivo SARIF n√£o foi gerado ou est√° vazio"
                  fi
              else
                  echo "‚ö†Ô∏è Convers√£o falhou na tentativa $attempt"
              fi
              
              if [[ $attempt -lt 3 ]]; then
                  echo "‚è≥ Aguardando 10s antes da pr√≥xima tentativa..."
                  sleep 10
              fi
          done
          
          if [[ "$conversion_success" == "false" ]]; then
              echo "‚ùå Falha na convers√£o ap√≥s 3 tentativas"
              echo "üìã Criando SARIF m√≠nimo v√°lido..."
              
              # SARIF fallback v√°lido
              jq -n '{
                  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
                  "version": "2.1.0",
                  "runs": [{
                      "tool": {
                          "driver": {
                              "name": "Fortify Static Code Analyzer",
                              "version": "25.2.0"
                          }
                      },
                      "results": []
                  }]
              }' > "$sarif_file"
              
              echo "‚ö†Ô∏è SARIF vazio criado como fallback"
          fi
          
          # Adicionar metadados ricos
          echo "üè∑Ô∏è Adicionando metadados..."
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          jq --arg project "$PROJECT_NAME" \
             --arg version "$VERSION_NAME" \
             --arg timestamp "$timestamp" \
             --arg job_token "$JOB_TOKEN" \
             --arg version_id "$VERSION_ID" \
             --arg fpr_file "$FPR_FILENAME" \
             '(.runs[0].properties // {}) |= . + {
                "fortify_project": $project,
                "fortify_version": $version,
                "fortify_scan_time": $timestamp,
                "fortify_job_token": $job_token,
                "fortify_version_id": $version_id,
                "fortify_engine_version": "25.2.0",
                "fortify_fpr_file": $fpr_file,
                "conversion_method": "optimized_fpr_to_sarif",
                "github_run_id": "'${{ github.run_id }}'",
                "github_run_number": "'${{ github.run_number }}'"
              }' "$sarif_file" > "${sarif_file}.tmp" && mv "${sarif_file}.tmp" "$sarif_file"
          
          # Estat√≠sticas finais
          final_size=$(wc -c < "$sarif_file")
          findings=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
          rules=$(jq '.runs[0].tool.driver.rules | length' "$sarif_file" 2>/dev/null || echo "0")
          
          echo "üìä SARIF gerado com sucesso:"
          echo "   ‚Ä¢ Tamanho: $((final_size/1024))KB"
          echo "   ‚Ä¢ Findings: $findings"  
          echo "   ‚Ä¢ Regras: $rules"
          echo "   ‚Ä¢ Formato: SARIF 2.1.0"

      - name: Validate SARIF
        if: ${{ fromJSON(inputs.validate_sarif) }}
        run: |
          echo "üîç Valida√ß√£o final do SARIF..."
          
          sarif_file="fortify-artifacts/fortify-sast-results.sarif"
          
          # Valida√ß√£o estrutural
          if [[ ! -f "$sarif_file" ]]; then
              echo "‚ùå Arquivo SARIF n√£o encontrado"
              exit 1
          fi
          
          # Valida√ß√£o JSON
          if ! jq -e . "$sarif_file" >/dev/null 2>&1; then
              echo "‚ùå SARIF cont√©m JSON inv√°lido"
              exit 1
          fi
          
          # Valida√ß√£o SARIF espec√≠fica
          if command -v sarif >/dev/null 2>&1; then
              if sarif validate "$sarif_file" 2>/dev/null; then
                  echo "‚úÖ SARIF estruturalmente v√°lido"
              else
                  echo "‚ö†Ô∏è SARIF tem problemas estruturais, mas ser√° mantido"
                  sarif validate "$sarif_file" || true
              fi
          else
              echo "‚ö†Ô∏è Comando sarif n√£o dispon√≠vel, pulando valida√ß√£o estrutural"
          fi
          
          # Estat√≠sticas finais
          count=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
          rules=$(jq '.runs[0].tool.driver.rules | length' "$sarif_file" 2>/dev/null || echo "0")
          echo "‚úÖ SARIF validado: $count findings, $rules regras"

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: fortify-artifacts/fortify-sast-results.sarif
        continue-on-error: true

      - name: Upload SARIF Artifact for Developer
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30
        if: always()

      - name: Create summary report
        run: |
          echo "# üéâ Fortify FPR ‚Üí SARIF Conversion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚úÖ Conversion Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "fortify-artifacts/fortify-sast-results.sarif" ]]; then
              findings=$(jq '.runs[0].results | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
              rules=$(jq '.runs[0].tool.driver.rules | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
              size=$(wc -c < fortify-artifacts/fortify-sast-results.sarif)
              
              echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| üîç **Findings** | $findings |" >> $GITHUB_STEP_SUMMARY
              echo "| üìã **Rules** | $rules |" >> $GITHUB_STEP_SUMMARY
              echo "| üìÅ **File Size** | $((size/1024))KB |" >> $GITHUB_STEP_SUMMARY
              echo "| üè∑Ô∏è **Project** | $PROJECT_NAME |" >> $GITHUB_STEP_SUMMARY
              echo "| üîñ **Version** | $VERSION_NAME |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Developer Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Download Artifact**: Go to Actions ‚Üí This run ‚Üí Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. **Get SARIF File**: Download \`fortify-sarif-${{ github.run_number }}.zip\`" >> $GITHUB_STEP_SUMMARY
          echo "3. **Open in IDE**: Use VS Code with [SARIF Viewer extension](https://marketplace.visualstudio.com/items?itemName=MS-SarifVSCode.sarif-viewer)" >> $GITHUB_STEP_SUMMARY
          echo "4. **Analyze & Fix**: Review vulnerabilities and apply corrections" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **SSC Report**: https://fortify-ssc.evernow.com.br/html/ssc/version/$VERSION_ID/audit" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: fortify-metadata-${{ github.run_number }}
        continue-on-error: true
        if: always() 
