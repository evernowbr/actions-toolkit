name: Fortify FPR to SARIF Converter

permissions:
  contents: read
  actions: read
  security-events: write

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      sarif_multitool_version:
        description: 'Vers√£o espec√≠fica do SARIF MultiTool'
        required: false
        default: 'latest'
        type: string

    secrets:
      FORTIFY_SSC_API_URL:
        required: true
      FORTIFY_UNIFIED_LOGIN_TOKEN:
        required: true

jobs:
  fortify-fpr-sarif:
    name: FPR to SARIF Conversion
    runs-on: self-hosted
    timeout-minutes: 120
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fortify SAST Scan and SARIF Generation
        env:
          fortify_project_name: ${{ inputs.name }}
          fortify_version_name: ${{ inputs.version }}
          fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
          fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
        run: |
          echo "::notice title=Fortify SAST::Starting scan for $fortify_project_name/$fortify_version_name"
          
          # Fun√ß√£o √∫nica de valida√ß√£o JSON (consolidada)
          validate_json_response() {
              local response="$1"
              local context="$2"
              
              if [ -z "$response" ]; then
                  echo "‚ùå Resposta vazia da API ($context)"
                  return 1
              fi
              
              if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                  echo "‚ùå JSON inv√°lido ($context):"
                  echo "$response" | head -10
                  return 1
              fi
              
              # Verifica c√≥digos de erro na resposta
              local error_msg=$(echo "$response" | jq -r '.message // empty')
              if [ -n "$error_msg" ]; then
                  echo "‚ùå Erro da API ($context): $error_msg"
                  return 1
              fi
              
              return 0
          }
          
          # Fun√ß√£o segura para chamadas API
          api_call() {
              local method="${1:-GET}"
              local url="$2"
              local data="${3:-}"
              local context="$4"
              
              local curl_opts=(-sS -k -L --fail)
              curl_opts+=(-H "Content-Type: application/json")
              curl_opts+=(-H "Accept: application/json")
              curl_opts+=(-H "Authorization: FortifyToken $fortify_unified_login_token")
              
              if [ "$method" = "POST" ] || [ "$method" = "PUT" ]; then
                  curl_opts+=(-X "$method")
                  if [ -n "$data" ]; then
                      curl_opts+=(-d "$data")
                  fi
              fi
              
              curl_opts+=("$url")
              
              local response
              local exit_code
              
              response=$(curl "${curl_opts[@]}" 2>/dev/null) || exit_code=$?
              
              if [ "${exit_code:-0}" -ne 0 ]; then
                  echo "‚ùå Falha na chamada API ($context): $exit_code"
                  return 1
              fi
              
              if ! validate_json_response "$response" "$context"; then
                  return 1
              fi
              
              echo "$response"
              return 0
          }
          
          # Fun√ß√£o para sanitizar strings JSON
          sanitize_json_string() {
              local input="$1"
              echo "$input" | jq -Rs .
          }
          
          # Fun√ß√£o para sanitizar vari√°veis de forma consistente
          sanitize_vars() {
              local project_name="${fortify_project_name:-Unknown}"
              local version_name="${fortify_version_name:-Unknown}"
              local version_id="${fortify_project_version_id:-0}"
              
              # Sanitiza√ß√£o segura com remo√ß√£o de quebras de linha
              project_name=$(echo "$project_name" | jq -Rs . | sed 's/^"//;s/"$//' | tr -d '\n')
              version_name=$(echo "$version_name" | jq -Rs . | sed 's/^"//;s/"$//' | tr -d '\n')
              version_id=$(echo "$version_id" | jq -Rs . | sed 's/^"//;s/"$//' | tr -d '\n')
              
              echo "$project_name|$version_name|$version_id"
          }
          
          # ========== FUN√á√ÉO SARIF OTIMIZADA ==========
          
          fortify_gerar_sarif() {
              echo "üìã Gerando SARIF otimizado - VERS√ÉO ROBUSTA..."
              
              # Valida√ß√µes iniciais
              local sanitized_vars=$(sanitize_vars)
              local project_name=$(echo "$sanitized_vars" | cut -d'|' -f1)
              local version_name=$(echo "$sanitized_vars" | cut -d'|' -f2)
              local version_id=$(echo "$sanitized_vars" | cut -d'|' -f3)
              local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              
              if [ ! -f /tmp/fortify_all_issues.json ]; then
                  echo "‚ùå Nenhum dado de vulnerabilidade encontrado"
                  return 1
              fi
              
              if [ ! -s /tmp/fortify_all_issues.json ]; then
                  echo "‚ùå Arquivo JSON est√° vazio"
                  return 1
              fi
              
              if ! jq empty /tmp/fortify_all_issues.json 2>/dev/null; then
                  echo "‚ùå JSON inv√°lido em /tmp/fortify_all_issues.json"
                  return 1
              fi
              
              local data_count=$(jq '.data | length' /tmp/fortify_all_issues.json 2>/dev/null || echo "0")
              if [ "$data_count" -eq 0 ]; then
                  echo "‚ö†Ô∏è Nenhuma vulnerabilidade encontrada no JSON"
                  return 1
              fi
              
              mkdir -p fortify-artifacts
              
              # ETAPA 1: Processamento √∫nico otimizado
              echo "üõ†Ô∏è Processando dados em uma √∫nica passagem..."
              
              # Processa todos os dados em uma √∫nica opera√ß√£o
              local processed_data
              processed_data=$(jq -n \
                  --arg project_name "$project_name" \
                  --arg version_name "$version_name" \
                  --arg version_id "$version_id" \
                  --slurpfile issues /tmp/fortify_all_issues.json \
                  '{
                      rules: ($issues[0].data | map({
                          id: ((.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown") | gsub(" "; "_") | gsub(":"; "_") | gsub("[^a-zA-Z0-9_]"; "_")),
                          name: (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                          shortDescription: { text: (.description // .issueName // "Vulnerabilidade detectada pelo Fortify") },
                          fullDescription: { text: (.description // .issueName // "Vulnerabilidade detectada pelo Fortify. Verifique o c√≥digo e aplique as corre√ß√µes recomendadas.") },
                          defaultConfiguration: { 
                              level: (if (.friority // .priority) == "Critical" or (.friority // .priority) == "High" then "error" elif (.friority // .priority) == "Medium" then "warning" else "note" end) 
                          },
                          helpUri: ("https://fortify-ssc.evernow.com.br/html/ssc/version/" + ($version_id | tostring) + "/audit")
                      }) | unique_by(.id)),
                      results: ($issues[0].data | map({
                          ruleId: ((.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown") | gsub(" "; "_") | gsub(":"; "_") | gsub("[^a-zA-Z0-9_]"; "_")),
                          level: (if (.friority // .priority) == "Critical" or (.friority // .priority) == "High" then "error" elif (.friority // .priority) == "Medium" then "warning" else "note" end),
                          message: { text: (.description // .issueName // "Vulnerabilidade detectada pelo Fortify") },
                          locations: [{
                              physicalLocation: {
                                  artifactLocation: { 
                                      uri: (.fileName // .primaryLocation // .folderName // "Unknown File")
                                  },
                                  region: { 
                                      startLine: (.lineNumber // 1), 
                                      startColumn: 1, 
                                      endLine: (.lineNumber // 1), 
                                      endColumn: 80 
                                  }
                              }
                          }],
                          partialFingerprints: {
                              primaryLocationLineHash: ((.fileName // .primaryLocation // .folderName // "Unknown File") + ":" + ((.lineNumber // 1) | tostring) + ":" + ((.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown") | gsub(" "; "_") | gsub(":"; "_") | gsub("[^a-zA-Z0-9_]"; "_")) + ":" + ((.issueInstanceId // (.id | tostring)) | .[0:12]))
                          },
                          properties: {
                              fortify_severity: (.friority // .priority // "Unknown"),
                              fortify_category: (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                              fortify_issue_id: (.issueInstanceId // (.id | tostring)),
                              fortify_project: $project_name,
                              fortify_version: $version_name
                          }
                      }))
                  }' 2>/dev/null)
              
              if [ $? -ne 0 ] || [ -z "$processed_data" ]; then
                  echo "‚ùå Erro ao processar dados"
                  return 1
              fi
              
              # Extrai regras e resultados do processamento √∫nico
              local rules_count=$(echo "$processed_data" | jq '.rules | length' 2>/dev/null || echo "0")
              local results_count=$(echo "$processed_data" | jq '.results | length' 2>/dev/null || echo "0")
              
              echo "‚úÖ Dados processados: $rules_count regras, $results_count resultados"
              
              # ETAPA 2: Montar SARIF final
              echo "üîó Montando SARIF final..."
              if ! jq -n \
                  --arg schema "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json" \
                  --arg version "2.1.0" \
                  --arg timestamp "$timestamp" \
                  --argjson processed "$processed_data" \
                  '{
                      "$schema": $schema,
                      "version": $version,
                      "originalUriBaseIds": {
                          "SRCROOT": {
                              "uri": "file:///github/workspace/"
                          }
                      },
                      "runs": [
                          {
                              "tool": {
                                  "driver": {
                                      "name": "Fortify Static Code Analyzer",
                                      "version": "25.2.0",
                                      "informationUri": "https://www.microfocus.com/en-us/cyberres/application-security/static-code-analyzer",
                                      "rules": $processed.rules
                                  }
                              },
                              "invocations": [
                                  {
                                      "executionSuccessful": true,
                                      "commandLine": "scancentral",
                                      "startTimeUtc": $timestamp,
                                      "endTimeUtc": $timestamp,
                                      "workingDirectory": {
                                          "uri": "file:///github/workspace/"
                                      }
                                  }
                              ],
                              "results": $processed.results
                          }
                      ]
                  }' > fortify-artifacts/fortify-sast-results.sarif 2>/dev/null; then
                  echo "‚ùå Erro ao montar SARIF final"
                  return 1
              fi
              
              # Valida√ß√£o final
              if jq empty fortify-artifacts/fortify-sast-results.sarif 2>/dev/null; then
                  local final_count=$(jq '.runs[0].results | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                  local final_rules=$(jq '.runs[0].tool.driver.rules | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                  local final_size=$(wc -c < fortify-artifacts/fortify-sast-results.sarif)
                  
                  echo ""
                  echo "üéâ SARIF GERADO COM SUCESSO!"
                  echo "üìä Estat√≠sticas finais:"
                  echo "   ‚Ä¢ Vulnerabilidades processadas: $final_count"
                  echo "   ‚Ä¢ Regras √∫nicas: $final_rules"
                  echo "   ‚Ä¢ Tamanho do arquivo: $((final_size/1024))KB"
                  echo "   ‚Ä¢ Formato: SARIF 2.1.0 v√°lido"
                  echo "   ‚Ä¢ Compatibilidade: GitHub Code Scanning ‚úÖ"
                  echo "   ‚Ä¢ Compatibilidade: IDEs modernas ‚úÖ"
                  
                  return 0
              else
                  echo "‚ùå SARIF final com JSON inv√°lido"
                  return 1
              fi
          }
          
          # ========== FALLBACK ROBUSTO OTIMIZADO ==========
          
          fortify_gerar_sarif_fallback() {
              echo "üîÑ Gerando SARIF simplificado como fallback..."
              mkdir -p fortify-artifacts
              
              local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              local sanitized_vars=$(sanitize_vars)
              local project_name=$(echo "$sanitized_vars" | cut -d'|' -f1)
              local version_name=$(echo "$sanitized_vars" | cut -d'|' -f2)
              
              # SARIF m√≠nimo v√°lido com processamento seguro
              local fallback_sarif
              fallback_sarif=$(jq -n \
                  --arg timestamp "$timestamp" \
                  --arg project_name "$project_name" \
                  --arg version_name "$version_name" \
                  --slurpfile issues /tmp/fortify_all_issues.json \
                  '{
                      "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
                      "version": "2.1.0",
                      "runs": [{
                          "tool": {
                              "driver": {
                                  "name": "Fortify Static Code Analyzer",
                                  "version": "25.2.0",
                                  "informationUri": "https://www.microfocus.com/en-us/cyberres/application-security/static-code-analyzer",
                                  "rules": []
                              }
                          },
                          "invocations": [{
                              "executionSuccessful": true,
                              "commandLine": "scancentral",
                              "startTimeUtc": $timestamp,
                              "endTimeUtc": $timestamp,
                              "workingDirectory": {
                                  "uri": "file:///github/workspace/"
                              }
                          }],
                          "results": ($issues[0].data | map({
                              ruleId: "fortify_finding",
                              level: (if (.friority // .priority) == "Critical" or (.friority // .priority) == "High" then "error" elif (.friority // .priority) == "Medium" then "warning" else "note" end),
                              message: { text: (.description // .issueName // "Vulnerabilidade detectada pelo Fortify") },
                              locations: [{
                                  physicalLocation: {
                                      artifactLocation: { 
                                          uri: (.fileName // .primaryLocation // .folderName // "Unknown File")
                                      },
                                      region: { 
                                          startLine: (.lineNumber // 1),
                                          startColumn: 1,
                                          endLine: (.lineNumber // 1),
                                          endColumn: 80
                                      }
                                  }
                              }],
                              partialFingerprints: {
                                  primaryLocationLineHash: ((.fileName // .primaryLocation // .folderName // "Unknown File") + ":" + ((.lineNumber // 1) | tostring) + ":" + (.issueInstanceId // (.id | tostring)))
                              },
                              properties: {
                                  fortify_severity: (.friority // .priority // "Unknown"),
                                  fortify_category: (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                                  fortify_issue_id: (.issueInstanceId // (.id | tostring)),
                                  fortify_project: $project_name,
                                  fortify_version: $version_name
                              }
                          }))
                      }]
                  }' 2>/dev/null)
              
              if [ $? -eq 0 ] && [ -n "$fallback_sarif" ]; then
                  echo "$fallback_sarif" > fortify-artifacts/fortify-sast-results.sarif
                  
                  if jq empty fortify-artifacts/fortify-sast-results.sarif 2>/dev/null; then
                      local fallback_count=$(jq '.runs[0].results | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                      echo "‚úÖ SARIF fallback gerado: $fallback_count vulnerabilidades"
                      return 0
                  else
                      echo "‚ùå SARIF fallback inv√°lido"
                      return 1
                  fi
              else
                  echo "‚ùå Falha ao gerar SARIF fallback"
                  return 1
              fi
          }
          
          # ========== FUN√á√ÉO DE EXTRA√á√ÉO OTIMIZADA ==========
          
          fortify_extrair_estatisticas() {
              echo "üìä Extraindo estat√≠sticas..."
              
              # Buscar projeto e vers√£o no SSC
              echo "üîç Buscando projeto: $fortify_project_name"
              
              # Buscar projeto existente - tentar diferentes varia√ß√µes do nome
              project_id=""
              
              # Tentativa 1: Nome exato
              echo "üîç Tentando nome exato: $fortify_project_name"
              project_response=$(api_call "GET" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true" "" "buscar projeto")
              
              if [ $? -eq 0 ]; then
                  project_id=$(echo "$project_response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | .project.id' | head -1 | awk '{$1=$1};1')
                  version_id=$(echo "$project_response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | select(.name=="'$fortify_version_name'") | .id' | awk '{$1=$1};1')
                  
                  if [ -n "$version_id" ] && [ "$version_id" != "null" ]; then
                      echo "‚úÖ Projeto encontrado - ID: $project_id, Vers√£o ID: $version_id"
                      fortify_project_version_id="$version_id"
                  else
                      echo "‚ùå Vers√£o n√£o encontrada"
                      return 1
                  fi
              else
                  echo "‚ùå Projeto n√£o encontrado"
                  return 1
              fi
              
              # Verifica status do scan com backoff exponencial
              local max_retries=5
              local retry_count=0
              local scan_status=""
              
              while [ $retry_count -lt $max_retries ]; do
                  local status_response
                  status_response=$(api_call "GET" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id" "" "verificar status")
                  
                  if [ $? -eq 0 ]; then
                      scan_status=$(echo "$status_response" | jq -r '.data.status // "UNKNOWN"')
                      echo "üìä Status: $scan_status"
                      
                      if [ "$scan_status" = "REQUIRES_AUTH" ] || [ "$scan_status" = "PROCESSING" ]; then
                          retry_count=$((retry_count + 1))
                          if [ $retry_count -lt $max_retries ]; then
                              local sleep_time=$((5 * (2 ** (retry_count - 1))))  # Backoff exponencial: 5s, 10s, 20s, 40s
                              echo "‚è≥ Aguardando... ($retry_count/$max_retries) - ${sleep_time}s"
                              sleep $sleep_time
                              continue
                          else
                              echo "‚ö†Ô∏è Timeout: scan ainda processando"
                              return 1
                          fi
                      else
                          break
                      fi
                  else
                      retry_count=$((retry_count + 1))
                      sleep 30
                  fi
              done
              
              # Busca vulnerabilidades
              local issues_response
             
              issues_response=$(api_call "GET" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?start=0&limit=1000&showshortfilenames=true&showhidden=false&showremoved=false&showsuppressed=false" "" "buscar vulnerabilidades")
              
              if [ $? -eq 0 ]; then
                  local data_count=$(echo "$issues_response" | jq '.data | length' 2>/dev/null || echo "0")
                  
                  if [ "$data_count" -gt 0 ]; then
                      echo "$issues_response" > /tmp/fortify_all_issues.json
                      
                      # Contadores otimizados em uma √∫nica opera√ß√£o
                      local counters
                      counters=$(echo "$issues_response" | jq '{
                          critical: [.data[] | select((.friority // .priority) == "Critical")] | length,
                          high: [.data[] | select((.friority // .priority) == "High")] | length,
                          medium: [.data[] | select((.friority // .priority) == "Medium")] | length,
                          low: [.data[] | select((.friority // .priority) == "Low")] | length,
                          total: (.data | length)
                      }' 2>/dev/null)
                      
                      if [ $? -eq 0 ]; then
                          local critical_count=$(echo "$counters" | jq -r '.critical // 0')
                          local high_count=$(echo "$counters" | jq -r '.high // 0')
                          local medium_count=$(echo "$counters" | jq -r '.medium // 0')
                          local low_count=$(echo "$counters" | jq -r '.low // 0')
                          local total_count=$(echo "$counters" | jq -r '.total // 0')
                          
                          # Salva contadores
                          echo "$critical_count" > /tmp/fortify_critical_count
                          echo "$high_count" > /tmp/fortify_high_count
                          echo "$medium_count" > /tmp/fortify_medium_count
                          echo "$low_count" > /tmp/fortify_low_count
                          echo "$total_count" > /tmp/fortify_total_count
                          
                          echo "‚úÖ $total_count vulnerabilidades encontradas (CRITICAL: $critical_count, HIGH: $high_count, MEDIUM: $medium_count, LOW: $low_count)"
                          return 0
                      else
                          echo "‚ùå Erro ao processar contadores"
                          return 1
                      fi
                  else
                      echo "‚ö†Ô∏è Nenhuma vulnerabilidade encontrada"
                      echo "0" > /tmp/fortify_critical_count
                      echo "0" > /tmp/fortify_high_count
                      echo "0" > /tmp/fortify_medium_count
                      echo "0" > /tmp/fortify_low_count
                      echo "0" > /tmp/fortify_total_count
                      echo '{"data":[]}' > /tmp/fortify_all_issues.json
                      return 0
                  fi
              else
                  echo "‚ùå Falha ao buscar vulnerabilidades"
                  return 1
              fi
          }
          
          # ========== EXECU√á√ÉO PRINCIPAL OTIMIZADA ==========
          
          echo '   ____            __   _  ___        ____ ___    ____ ______ '
          echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
          echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
          echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
          echo '                            /___/                             '
          echo ""
          echo "üöÄ Iniciando Fortify SAST Scan..."
          
          # Aguarda processamento e extrai dados
          echo "‚è≥ Aguardando processamento..."
          if fortify_extrair_estatisticas; then
              if fortify_gerar_sarif; then
                  echo "‚úÖ SARIF gerado com sucesso para integra√ß√£o com IDEs"
              elif fortify_gerar_sarif_fallback; then
                  echo "‚úÖ SARIF fallback gerado com sucesso"
              else
                  echo "‚ùå Falha cr√≠tica na gera√ß√£o de SARIF"
                  # Criar SARIF vazio v√°lido
                  mkdir -p fortify-artifacts
                  echo '{"$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json","version":"2.1.0","originalUriBaseIds":{"SRCROOT":{"uri":"file:///github/workspace/"}},"runs":[{"tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},"results":[]}]}' > fortify-artifacts/fortify-sast-results.sarif
                  echo "‚úÖ SARIF vazio v√°lido criado como √∫ltimo recurso"
              fi
          else
              echo "‚ö†Ô∏è Falha ao extrair dados"
          fi

      - name: Upload SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fortify-sarif-${{ github.run_number }}
          path: fortify-artifacts/fortify-sast-results.sarif
          if-no-files-found: error
          retention-days: 30

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: fortify-artifacts/fortify-sast-results.sarif
        continue-on-error: true
