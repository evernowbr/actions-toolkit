name: Fortify SAST Summary

on:
    workflow_call:
        inputs:
            name:
                required: true
                type: string
            version:
                required: true
                type: string
        secrets:
            FORTIFY_SSC_API_URL:
                required: true
            FORTIFY_UNIFIED_LOGIN_TOKEN:
                required: true
            FORTIFY_CONTROLLER_URL:
                required: true
            FORTIFY_CONTROLLER_TOKEN:
                required: true

jobs:
    scan:
        name: Fortify SAST Sumamry
        runs-on: self-hosted

        steps:
            - name: Checkout do repositório
              uses: actions/checkout@v4
                  
            - name: Run Fortify Summary
              env:
                  fortify_project_name: ${{ inputs.name }}
                  fortify_version_name: ${{ inputs.version }}
                  fortify_translate_name: ${{ inputs.fortify_translate_name }}
                  fortify_scancentral_tool: ${{ inputs.fortify_scancentral_tool }}
                  fortify_translate_additional_flags: ${{ inputs.fortify_translate_additional_flags }}
                  fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
                  fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
                  fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
                  fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
              run: |                    
                    fortify_extrair_estatisticas() {
                        echo "Extraindo estatísticas..."
                    
                        # Verifica se a variável de ID da versão do projeto está definida
                        if [ -z "$fortify_project_version_id" ]; then
                            echo "ID da versão não encontrado"
                            return 1
                        fi
                    
                        # Faz a chamada para buscar as vulnerabilidades encontradas
                        # filtro_url_encoded=%5Banalysis%20type%5D%3ASCA%20audited%3Afalse%20%5Bfortify%20priority%20order%5D%3Acritical%20%5Bfortify%20priority%20order%5D%3Ahigh%20%5Bfortify%20priority%20order%5D%3Amedium%0A
                        local issues_response
                        # Busca vulnerabilidades encontradas no projeto/versão
                        # fortify_issues_url="$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?qm=issues&q=$filtro_url_encoded"
                        fortify_issues_url="$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?"
                        issues_response=$(curl -sS -k -X GET \
                            --header "Content-Type: application/json" \
                            --header "Accept: application/json" \
                            --header "Authorization: FortifyToken $fortify_unified_login_token" \
                            "$fortify_issues_url")
                    
                        # Verifica se a chamada à API foi bem-sucedida
                        if [ $? -eq 0 ]; then
                            # Conta quantos itens existem no array .data
                            local data_count=$(echo "$issues_response" | jq '.data | length' 2>/dev/null || echo "0")
                    
                            if [ "$data_count" -gt 0 ]; then
                                # Salva todas as vulnerabilidades em um arquivo temporário
                                echo "$issues_response" > ./fortify_all_issues.json
                    
                                # Processa os dados e conta as vulnerabilidades por severidade em uma única operação jq
                                local counters
                                counters=$(echo "$issues_response" | jq '{
                                    critical: [.data[] | select((.friority // .priority) == "Critical")] | length,
                                    high: [.data[] | select((.friority // .priority) == "High")] | length,
                                    medium: [.data[] | select((.friority // .priority) == "Medium")] | length,
                                    low: [.data[] | select((.friority // .priority) == "Low")] | length,
                                    total: (.data | length)
                                }' 2>/dev/null)
                    
                                # Verifica se o jq foi executado com sucesso
                                if [ $? -eq 0 ]; then
                                    # Extrai os contadores individuais do JSON
                                    local critical_count=$(echo "$counters" | jq -r '.critical // 0')
                                    local high_count=$(echo "$counters" | jq -r '.high // 0')
                                    local medium_count=$(echo "$counters" | jq -r '.medium // 0')
                                    local low_count=$(echo "$counters" | jq -r '.low // 0')
                                    local total_count=$(echo "$counters" | jq -r '.total // 0')
                    
                                    # Salva os contadores em arquivos temporários
                                    echo "$critical_count" > ./fortify_critical_count
                                    echo "$high_count" > ./fortify_high_count
                                    echo "$medium_count" > ./fortify_medium_count
                                    echo "$low_count" > ./fortify_low_count
                                    echo "$total_count" > ./fortify_total_count
                    
                                    # Mostra os resultados no terminal
                                    echo "$total_count vulnerabilidades encontradas (CRITICAL: $critical_count, HIGH: $high_count, MEDIUM: $medium_count, LOW: $low_count)"
                                    return 0
                                else
                                    echo "Erro ao processar contadores"
                                    return 1
                                fi
                            else
                                # Se nenhuma vulnerabilidade for encontrada, inicializa contadores com zero e salva arquivos vazios
                                echo "Nenhuma vulnerabilidade encontrada"
                                echo "0" > ./fortify_critical_count
                                echo "0" > ./fortify_high_count
                                echo "0" > ./fortify_medium_count
                                echo "0" > ./fortify_low_count
                                echo "0" > ./fortify_total_count
                                echo '{"data":[]}' > ./fortify_all_issues.json
                                return 0
                            fi
                        else
                            echo "Falha ao buscar vulnerabilidades"
                            return 1
                        fi
                    }
                    # Função para gerar o relatório
                    gerar_relatorio_fortify() {
                        echo " "
                        echo "+--------------------- FORTIFY SAST SCAN SUMMARY --------------------+"
                        echo "| Projeto: $fortify_project_name $fortify_version_name"
                        echo "+--------------------------------------------------------------------+"
                    
                        # Lê os contadores salvos em arquivos temporários; caso não existam, assume zero
                        local critical_count=$(cat ./fortify_critical_count 2>/dev/null || echo 0)
                        local high_count=$(cat ./fortify_high_count 2>/dev/null || echo 0)
                        local medium_count=$(cat ./fortify_medium_count 2>/dev/null || echo 0)
                        local low_count=$(cat ./fortify_low_count 2>/dev/null || echo 0)
                        local total_count=$(cat ./fortify_total_count 2>/dev/null || echo 0)
                    
                        echo "| Total: $total_count (CRITICAL: $critical_count, HIGH: $high_count, MEDIUM: $medium_count, LOW: $low_count)"
                        echo "+------------------------------+------------+----------+------------------------------------------+----------------+"
                        echo "| CATEGORIA                    | ISSUE ID   | SEVERITY | PRIMARY LOCATION:LINE NUMBER             | TAGGED         |"
                        echo "+------------------------------+------------+----------+------------------------------------------+----------------+"
                    
                        cat ./fortify_all_issues.json 2>/dev/null | jq -r '
                            .data | .[0:10] | .[] | [
                              (if .subCategoryName then .subCategoryName
                               elif .categoryName then .categoryName
                               elif .issueName then .issueName
                               elif .subCategory then .subCategory
                               elif .category then .category
                               elif .kingdom then .kingdom
                               else "Unknown"
                               end),
                              (.issueInstanceId // (.id | tostring)),
                              (.friority // .priority // "Unknown"),
                              ((.primaryLocation // .folderName // "Unknown File") + ":" + ((.lineNumber // "N/A")|tostring)),
                              (.primaryTag)
                            ] | @tsv' | while IFS=$'\t' read -r category issue severity location tagged recommendation; do
                            IFS=$'\n' read -rd '' -a lines < <(echo "$category" | tr '\n' ' ' | fold -s -w 28 | sed '/^[[:space:]]*$/d' && printf '\0')
                            for i in "${!lines[@]}"; do
                              if [[ $i -eq 0 ]]; then
                                printf "| %-28s | %-10s | %-8s | %-40s | %-14s |\n" \
                                  "${lines[$i]}" "${issue:0:10}" "${severity:0:8}" "${location:0:40}" "${tagged:0:14}"
                              else
                                printf "| %-28s | %-10s | %-8s | %-40s | %-14s |\n" "${lines[$i]}" "" "" "" ""
                              fi
                            done
                            echo "+------------------------------+------------+----------+------------------------------------------+----------------+"
                        done
                    
                        echo " "
                        echo " ANÁLISE DETALHADA POR CATEGORIA:"
                        echo "+------------------------------+------------+----------+----------+----------+-----------------+"
                        echo "| CATEGORIA                    | CRÍTICA    | ALTA     | MÉDIA    | BAIXA    | TOTAL DE ISSUES |"
                        echo "+------------------------------+------------+----------+----------+----------+-----------------+"
                    
                        cat ./fortify_all_issues.json | jq -r '
                            .data[] | 
                            [(.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"), (.friority // .priority // "Unknown")] | @tsv' | awk -F'\t' '
                            function wrap(str, width, arr, n, out, i, len) {
                              gsub(/\n/, " ", str)
                              n = split(str, arr, " ")
                              out = arr[1]
                              len = length(arr[1])
                              for (i=2; i<=n; i++) {
                                if (len + 1 + length(arr[i]) > width) {
                                  out = out "\n" arr[i]
                                  len = length(arr[i])
                                } else {
                                  out = out " " arr[i]
                                  len += 1 + length(arr[i])
                                }
                              }
                              return out
                            }
                            {
                              c[$1, $2]++
                              cat[$1]=1
                            }
                            END {
                              sep = "+------------------------------+------------+----------+----------+----------+-----------------+"
                              for (k in cat) {
                                crit = c[k, "Critical"]+0
                                high = c[k, "High"]+0
                                med  = c[k, "Medium"]+0
                                low  = c[k, "Low"]+0
                                total = crit+high+med+low
                                wrapped = wrap(k, 28)
                                n = split(wrapped, lines, "\n")
                                for (i=1; i<=n; i++) {
                                  if (i==1) {
                                    printf "| %-28s | %-10s | %-8s | %-8s | %-8s | %-15s |\n", lines[i], crit, high, med, low, total
                                  } else {
                                    printf "|   %-26s | %-10s | %-8s | %-8s | %-8s | %-15s |\n", lines[i], "", "", "", "", ""
                                  }
                                }
                                print sep
                              }
                            }'
                    
                        echo " "
                        echo "QUANTIDADE DE ISSUES POR SEVERIDADE:"
                        echo "+-------------------------------+"
                        printf "| %-29s|\n" "CRITICAL: $critical_count"
                        printf "| %-29s|\n" "HIGH:    $high_count"
                        printf "| %-29s|\n" "MEDIUM:  $medium_count"
                        printf "| %-29s|\n" "LOW:     $low_count"
                        printf "| %-29s|\n" "TOTAL ISSUES FOUND: $total_count"
                        echo "+-------------------------------+"
                        echo " "
                        echo "Relatório Detalhado: $fortify_ssc_url/version/${fortify_project_version_id}/audit"
                        echo "+-------------------------------------------------------------------------------------------------------------+"
                        echo " "
                    }
                    
                    # Execução principal das funções sumamry e geração do Sarif
                    echo "Aguardando processamento..."
                    gerar_relatorio_fortify
                    echo "debug"    
                    echo "$issues_response"
                    echo "$fortify_issues_url"
