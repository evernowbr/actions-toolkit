name: Fortify SAST

on:
    workflow_call:
        inputs:
            name:
                required: true
                type: string
            version:
                required: true
                type: string
            fortify_scancentral_tool:
                required: true
                type: string
            fortify_translate_name:
                required: true
                type: string
            fortify_translate_additional_flags:
                required: true
                type: string
        secrets:
            FORTIFY_SSC_API_URL:
                required: true
            FORTIFY_UNIFIED_LOGIN_TOKEN:
                required: true
            FORTIFY_CONTROLLER_URL:
                required: true
            FORTIFY_CONTROLLER_TOKEN:
                required: true

jobs:
    scan:
        name: Fortify SAST Scan
        runs-on: self-hosted
        timeout-minutes: 45

        steps:
            - name: FortifyScan Sast
              env:
                  fortify_project_name: ${{ inputs.name }}
                  fortify_version_name: ${{ inputs.version }}
                  fortify_translate_name: ${{ inputs.fortify_translate_name }}
                  fortify_scancentral_tool: ${{ inputs.fortify_scancentral_tool }}
                  fortify_translate_additional_flags: ${{ inputs.fortify_translate_additional_flags }}
                  fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
                  fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
                  fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
                  fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
              run: |
                  # ========== CONFIGURA√á√ÉO INICIAL ==========
                  set -euo pipefail
                  export PATH="$PATH:/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin"
                  
                  # ========== FUN√á√ïES UTILIT√ÅRIAS OTIMIZADAS ==========
                  
                  # Fun√ß√£o √∫nica de valida√ß√£o JSON (consolidada)
                  validate_json_response() {
                      local response="$1"
                      local context="$2"
                      
                      if [ -z "$response" ]; then
                          echo "‚ùå Resposta vazia da API ($context)"
                          return 1
                      fi
                      
                      if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                          echo "‚ùå JSON inv√°lido ($context):"
                          echo "$response" | head -10
                          return 1
                      fi
                      
                      # Verifica c√≥digos de erro na resposta
                      local error_msg=$(echo "$response" | jq -r '.message // empty')
                      if [ -n "$error_msg" ]; then
                          echo "‚ùå Erro da API ($context): $error_msg"
                          return 1
                      fi
                      
                      return 0
                  }
                  
                  # Fun√ß√£o segura para chamadas API
                  api_call() {
                      local method="${1:-GET}"
                      local url="$2"
                      local data="${3:-}"
                      local context="$4"
                      
                      local curl_opts=(-sS -k -L --fail)
                      curl_opts+=(-H "Content-Type: application/json")
                      curl_opts+=(-H "Accept: application/json")
                      curl_opts+=(-H "Authorization: FortifyToken $fortify_unified_login_token")
                      
                      if [ "$method" = "POST" ] || [ "$method" = "PUT" ]; then
                          curl_opts+=(-X "$method")
                          if [ -n "$data" ]; then
                              curl_opts+=(-d "$data")
                          fi
                      fi
                      
                      curl_opts+=("$url")
                      
                      local response
                      local exit_code
                      
                      response=$(curl "${curl_opts[@]}" 2>/dev/null) || exit_code=$?
                      
                      if [ "${exit_code:-0}" -ne 0 ]; then
                          echo "‚ùå Falha na chamada API ($context): $exit_code"
                          return 1
                      fi
                      
                      if ! validate_json_response "$response" "$context"; then
                          return 1
                      fi
                      
                      echo "$response"
                      return 0
                  }
                  
                  # Fun√ß√£o para sanitizar strings JSON
                  sanitize_json_string() {
                      local input="$1"
                      echo "$input" | jq -Rs .
                  }
                  
                  # Fun√ß√£o para sanitizar vari√°veis de forma consistente
                  sanitize_vars() {
                      local project_name="${fortify_project_name:-Unknown}"
                      local version_name="${fortify_version_name:-Unknown}"
                      local version_id="${fortify_project_version_id:-0}"
                      
                      # Sanitiza√ß√£o segura com remo√ß√£o de quebras de linha
                      project_name=$(echo "$project_name" | jq -Rs . | sed 's/^"//;s/"$//' | tr -d '\n')
                      version_name=$(echo "$version_name" | jq -Rs . | sed 's/^"//;s/"$//' | tr -d '\n')
                      version_id=$(echo "$version_id" | jq -Rs . | sed 's/^"//;s/"$//' | tr -d '\n')
                      
                      echo "$project_name|$version_name|$version_id"
                  }
                  
                  # ========== FUN√á√ïES PRINCIPAIS OTIMIZADAS ==========
                  
                  fortify_criar_projeto_e_versao() {
                      echo "üîß Criando projeto e vers√£o..."
                      
                      local project_data
                      project_data=$(jq -n \
                          --arg name "$fortify_project_name" \
                          --arg version "$fortify_version_name" \
                          '{
                              "project": {"name": $name},
                              "issueTemplateId": "Prioritized-HighRisk-Project-Template",
                              "name": $version,
                              "customTagValuesAutoApply": true,
                              "autoPredict": true,
                              "predictionPolicy": "LAB Fortify Policy"
                          }')
                      
                      local response
                      response=$(api_call "POST" "$fortify_ssc_api_url/projectVersions" "$project_data" "criar projeto")
                      
                      if [ $? -eq 0 ]; then
                          fortify_project_id=$(echo "$response" | jq -r '.data.project.id')
                          fortify_project_version_id=$(echo "$response" | jq -r '.data.id')
                          echo "‚úÖ Projeto criado: $fortify_project_id"
                          echo "‚úÖ Vers√£o criada: $fortify_project_version_id"
                      else
                          echo "‚ùå Falha ao criar projeto/vers√£o"
                          return 1
                      fi
                  }
                  
                  fortify_criar_versao() {
                      echo "üîß Criando vers√£o para projeto existente..."
                      
                      local version_data
                      version_data=$(jq -n \
                          --arg name "$fortify_project_name" \
                          --arg id "$fortify_project_id" \
                          --arg version "$fortify_version_name" \
                          '{
                              "project": {"name": $name, "id": $id},
                              "issueTemplateId": "Prioritized-HighRisk-Project-Template",
                              "name": $version
                          }')
                      
                      local response
                      response=$(api_call "POST" "$fortify_ssc_api_url/projectVersions" "$version_data" "criar vers√£o")
                      
                      if [ $? -eq 0 ]; then
                          fortify_project_version_id=$(echo "$response" | jq -r '.data.id')
                          echo "‚úÖ Vers√£o criada: $fortify_project_version_id"
                      else
                          echo "‚ùå Falha ao criar vers√£o"
                          return 1
                      fi
                  }
                  
                  fortify_configurar_projeto() {
                      echo "‚öôÔ∏è Configurando projeto..."
                      
                      local config_data
                      config_data=$(jq -n \
                          --arg version_id "$fortify_project_version_id" \
                          --arg base_url "$fortify_ssc_api_url" \
                          '{
                              "requests": [
                                  {
                                      "uri": ($base_url + "/projectVersions/" + $version_id + "/attributes"),
                                      "httpVerb": "PUT",
                                      "postData": [
                                          {"values": [{"guid": "New"}], "attributeDefinitionId": 5},
                                          {"values": [{"guid": "Internal"}], "attributeDefinitionId": 6},
                                          {"values": [{"guid": "internalnetwork"}], "attributeDefinitionId": 7}
                                      ]
                                  },
                                  {
                                      "uri": ($base_url + "/projectVersions/" + $version_id + "/authEntities"),
                                      "httpVerb": "PUT",
                                      "postData": []
                                  },
                                  {
                                      "uri": ($base_url + "/projectVersions/" + $version_id + "?hideProgress=true"),
                                      "httpVerb": "PUT",
                                      "postData": {"committed": true}
                                  }
                              ]
                          }')
                      
                      local response
                      response=$(api_call "POST" "$fortify_ssc_api_url/bulk" "$config_data" "configurar projeto")
                      
                      if [ $? -eq 0 ]; then
                          local success_count=$(echo "$response" | jq -r '.successCount')
                          if [ "$success_count" = "3" ]; then
                              echo "‚úÖ Projeto configurado com sucesso"
                          else
                              echo "‚ö†Ô∏è Configura√ß√£o parcial: $success_count/3 opera√ß√µes"
                          fi
                      else
                          echo "‚ùå Falha ao configurar projeto"
                          return 1
                      fi
                  }
                  
                  fortify_regras_processamento() {
                      echo "üìã Configurando regras de processamento..."
                      
                      local rules_data='[
                          {"identifier": "com.fortify.manager.BLL.processingrules.BuildProjectProcessingRule", "displayName": "Require approval if the Build Project is different between scans", "displayable": true, "enabled": false},
                          {"identifier": "com.fortify.manager.BLL.processingrules.FileCountProcessingRule", "displayName": "Require approval if file count differs by more than 10%", "displayable": true, "enabled": false},
                          {"identifier": "com.fortify.manager.BLL.processingrules.LOCCountProcessingRule", "displayName": "Require approval if line count differs by more than 10%", "displayable": true, "enabled": false},
                          {"identifier": "com.fortify.manager.BLL.processingrules.NewerEngineVersionProcessingRule", "displayName": "Require approval if the engine version of a scan is newer than the engine version of the previous scan", "displayable": true, "enabled": false},
                          {"identifier": "com.fortify.manager.BLL.processingrules.RulePackVersionProcessingRule", "displayName": "Require approval if the rulepacks used in the scan do not match the rulepacks used in the previous scan", "displayable": true, "enabled": false},
                          {"identifier": "com.fortify.manager.BLL.processingrules.WarningProcessingRule", "displayName": "Require approval if result has analysis warnings", "displayable": true, "enabled": false},
                          {"identifier": "com.fortify.manager.BLL.processingrules.ExternalListVersionProcessingRule", "displayName": "Check external metadata file versions in scan against versions on server.", "displayable": true, "enabled": false}
                      ]'
                      
                      local response
                      response=$(api_call "PUT" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/resultProcessingRules" "$rules_data" "configurar regras")
                      
                      if [ $? -eq 0 ]; then
                          echo "‚úÖ Regras de processamento configuradas"
                      else
                          echo "‚ùå Falha ao configurar regras"
                          return 1
                      fi
                  }
                  
                  # ========== FUN√á√ÉO SARIF OTIMIZADA ==========
                  
                  fortify_gerar_sarif() {
                      echo "üìã Gerando SARIF otimizado - VERS√ÉO ROBUSTA..."
                      
                      # Valida√ß√µes iniciais
                      local sanitized_vars=$(sanitize_vars)
                      local project_name=$(echo "$sanitized_vars" | cut -d'|' -f1)
                      local version_name=$(echo "$sanitized_vars" | cut -d'|' -f2)
                      local version_id=$(echo "$sanitized_vars" | cut -d'|' -f3)
                      local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                      
                      if [ ! -f /tmp/fortify_all_issues.json ]; then
                          echo "‚ùå Nenhum dado de vulnerabilidade encontrado"
                          return 1
                      fi
                      
                      if [ ! -s /tmp/fortify_all_issues.json ]; then
                          echo "‚ùå Arquivo JSON est√° vazio"
                          return 1
                      fi
                      
                      if ! jq empty /tmp/fortify_all_issues.json 2>/dev/null; then
                          echo "‚ùå JSON inv√°lido em /tmp/fortify_all_issues.json"
                          return 1
                      fi
                      
                      local data_count=$(jq '.data | length' /tmp/fortify_all_issues.json 2>/dev/null || echo "0")
                      if [ "$data_count" -eq 0 ]; then
                          echo "‚ö†Ô∏è Nenhuma vulnerabilidade encontrada no JSON"
                          return 1
                      fi
                      
                      mkdir -p fortify-artifacts
                      
                      # ETAPA 1: Processamento √∫nico otimizado
                      echo "üõ†Ô∏è Processando dados em uma √∫nica passagem..."
                      
                      # Processa todos os dados em uma √∫nica opera√ß√£o
                      local processed_data
                      processed_data=$(jq -n \
                          --arg project_name "$project_name" \
                          --arg version_name "$version_name" \
                          --arg version_id "$version_id" \
                          --slurpfile issues /tmp/fortify_all_issues.json \
                          '{
                              rules: ($issues[0].data | map({
                                  id: ((.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown") | gsub(" "; "_") | gsub(":"; "_") | gsub("[^a-zA-Z0-9_]"; "_")),
                                  name: (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                                  shortDescription: { text: (.description // .issueName // "Vulnerabilidade detectada pelo Fortify") },
                                  fullDescription: { text: (.description // .issueName // "Vulnerabilidade detectada pelo Fortify. Verifique o c√≥digo e aplique as corre√ß√µes recomendadas.") },
                                  defaultConfiguration: { 
                                      level: (if (.friority // .priority) == "Critical" or (.friority // .priority) == "High" then "error" elif (.friority // .priority) == "Medium" then "warning" else "note" end) 
                                  },
                                  helpUri: ("https://fortify-ssc.evernow.com.br/html/ssc/version/" + ($version_id | tostring) + "/audit")
                              }) | unique_by(.id)),
                              results: ($issues[0].data | map({
                                  ruleId: ((.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown") | gsub(" "; "_") | gsub(":"; "_") | gsub("[^a-zA-Z0-9_]"; "_")),
                                  level: (if (.friority // .priority) == "Critical" or (.friority // .priority) == "High" then "error" elif (.friority // .priority) == "Medium" then "warning" else "note" end),
                                  message: { text: (.description // .issueName // "Vulnerabilidade detectada pelo Fortify") },
                                  locations: [{
                                      physicalLocation: {
                                          artifactLocation: { 
                                              uri: (.fileName // .primaryLocation // .folderName // "Unknown File")
                                          },
                                          region: { 
                                              startLine: (.lineNumber // 1), 
                                              startColumn: 1, 
                                              endLine: (.lineNumber // 1), 
                                              endColumn: 80 
                                          }
                                      }
                                  }],
                                  partialFingerprints: {
                                      primaryLocationLineHash: ((.fileName // .primaryLocation // .folderName // "Unknown File") + ":" + ((.lineNumber // 1) | tostring) + ":" + ((.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown") | gsub(" "; "_") | gsub(":"; "_") | gsub("[^a-zA-Z0-9_]"; "_")) + ":" + ((.issueInstanceId // (.id | tostring)) | .[0:12]))
                                  },
                                  properties: {
                                      fortify_severity: (.friority // .priority // "Unknown"),
                                      fortify_category: (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                                      fortify_issue_id: (.issueInstanceId // (.id | tostring)),
                                      fortify_project: $project_name,
                                      fortify_version: $version_name
                                  }
                              }))
                          }' 2>/dev/null)
                      
                      if [ $? -ne 0 ] || [ -z "$processed_data" ]; then
                          echo "‚ùå Erro ao processar dados"
                          return 1
                      fi
                      
                      # Extrai regras e resultados do processamento √∫nico
                      local rules_count=$(echo "$processed_data" | jq '.rules | length' 2>/dev/null || echo "0")
                      local results_count=$(echo "$processed_data" | jq '.results | length' 2>/dev/null || echo "0")
                      
                      echo "‚úÖ Dados processados: $rules_count regras, $results_count resultados"
                      
                      # ETAPA 2: Montar SARIF final
                      echo "üîó Montando SARIF final..."
                      if ! jq -n \
                          --arg schema "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json" \
                          --arg version "2.1.0" \
                          --arg timestamp "$timestamp" \
                          --argjson processed "$processed_data" \
                          '{
                              "$schema": $schema,
                              "version": $version,
                              "originalUriBaseIds": {
                                  "SRCROOT": {
                                      "uri": "file:///github/workspace/"
                                  }
                              },
                              "runs": [
                                  {
                                      "tool": {
                                          "driver": {
                                              "name": "Fortify Static Code Analyzer",
                                              "version": "25.2.0",
                                              "informationUri": "https://www.microfocus.com/en-us/cyberres/application-security/static-code-analyzer",
                                              "rules": $processed.rules
                                          }
                                      },
                                      "invocations": [
                                          {
                                              "executionSuccessful": true,
                                              "commandLine": "scancentral",
                                              "startTimeUtc": $timestamp,
                                              "endTimeUtc": $timestamp,
                                              "workingDirectory": {
                                                  "uri": "file:///github/workspace/"
                                              }
                                          }
                                      ],
                                      "results": $processed.results
                                  }
                              ]
                          }' > fortify-artifacts/fortify-sast-results.sarif 2>/dev/null; then
                          echo "‚ùå Erro ao montar SARIF final"
                          return 1
                      fi
                      
                      # Valida√ß√£o final
                      if jq empty fortify-artifacts/fortify-sast-results.sarif 2>/dev/null; then
                          local final_count=$(jq '.runs[0].results | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                          local final_rules=$(jq '.runs[0].tool.driver.rules | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                          local final_size=$(wc -c < fortify-artifacts/fortify-sast-results.sarif)
                          
                          echo ""
                          echo "üéâ SARIF GERADO COM SUCESSO!"
                          echo "üìä Estat√≠sticas finais:"
                          echo "   ‚Ä¢ Vulnerabilidades processadas: $final_count"
                          echo "   ‚Ä¢ Regras √∫nicas: $final_rules"
                          echo "   ‚Ä¢ Tamanho do arquivo: $((final_size/1024))KB"
                          echo "   ‚Ä¢ Formato: SARIF 2.1.0 v√°lido"
                          echo "   ‚Ä¢ Compatibilidade: GitHub Code Scanning ‚úÖ"
                          echo "   ‚Ä¢ Compatibilidade: IDEs modernas ‚úÖ"
                          
                          return 0
                      else
                          echo "‚ùå SARIF final com JSON inv√°lido"
                          return 1
                      fi
                  }
                  
                  # ========== FALLBACK ROBUSTO OTIMIZADO ==========
                  
                  fortify_gerar_sarif_fallback() {
                      echo "üîÑ Gerando SARIF simplificado como fallback..."
                      mkdir -p fortify-artifacts
                      
                      local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                      local sanitized_vars=$(sanitize_vars)
                      local project_name=$(echo "$sanitized_vars" | cut -d'|' -f1)
                      local version_name=$(echo "$sanitized_vars" | cut -d'|' -f2)
                      
                      # SARIF m√≠nimo v√°lido com processamento seguro
                      local fallback_sarif
                      fallback_sarif=$(jq -n \
                          --arg timestamp "$timestamp" \
                          --arg project_name "$project_name" \
                          --arg version_name "$version_name" \
                          --slurpfile issues /tmp/fortify_all_issues.json \
                          '{
                              "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
                              "version": "2.1.0",
                              "runs": [{
                                  "tool": {
                                      "driver": {
                                          "name": "Fortify Static Code Analyzer",
                                          "version": "25.2.0",
                                          "informationUri": "https://www.microfocus.com/en-us/cyberres/application-security/static-code-analyzer",
                                          "rules": []
                                      }
                                  },
                                  "invocations": [{
                                      "executionSuccessful": true,
                                      "commandLine": "scancentral",
                                      "startTimeUtc": $timestamp,
                                      "endTimeUtc": $timestamp,
                                      "workingDirectory": {
                                          "uri": "file:///github/workspace/"
                                      }
                                  }],
                                  "results": ($issues[0].data | map({
                                      ruleId: "fortify_finding",
                                      level: (if (.friority // .priority) == "Critical" or (.friority // .priority) == "High" then "error" elif (.friority // .priority) == "Medium" then "warning" else "note" end),
                                      message: { text: (.description // .issueName // "Vulnerabilidade detectada pelo Fortify") },
                                      locations: [{
                                          physicalLocation: {
                                              artifactLocation: { 
                                                  uri: (.fileName // .primaryLocation // .folderName // "Unknown File")
                                              },
                                              region: { 
                                                  startLine: (.lineNumber // 1),
                                                  startColumn: 1,
                                                  endLine: (.lineNumber // 1),
                                                  endColumn: 80
                                              }
                                          }
                                      }],
                                      partialFingerprints: {
                                          primaryLocationLineHash: ((.fileName // .primaryLocation // .folderName // "Unknown File") + ":" + ((.lineNumber // 1) | tostring) + ":" + (.issueInstanceId // (.id | tostring)))
                                      },
                                      properties: {
                                          fortify_severity: (.friority // .priority // "Unknown"),
                                          fortify_category: (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                                          fortify_issue_id: (.issueInstanceId // (.id | tostring)),
                                          fortify_project: $project_name,
                                          fortify_version: $version_name
                                      }
                                  }))
                              }]
                          }' 2>/dev/null)
                      
                      if [ $? -eq 0 ] && [ -n "$fallback_sarif" ]; then
                          echo "$fallback_sarif" > fortify-artifacts/fortify-sast-results.sarif
                          
                          if jq empty fortify-artifacts/fortify-sast-results.sarif 2>/dev/null; then
                              local fallback_count=$(jq '.runs[0].results | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                              echo "‚úÖ SARIF fallback gerado: $fallback_count vulnerabilidades"
                              return 0
                          else
                              echo "‚ùå SARIF fallback inv√°lido"
                              return 1
                          fi
                      else
                          echo "‚ùå Falha ao gerar SARIF fallback"
                          return 1
                      fi
                  }
                  
                  # ========== FUN√á√ÉO DE EXTRA√á√ÉO OTIMIZADA ==========
                  
                  fortify_extrair_estatisticas() {
                      echo "üìä Extraindo estat√≠sticas..."
                      
                      if [ -z "$fortify_project_version_id" ]; then
                          echo "‚ùå ID da vers√£o n√£o encontrado"
                          return 1
                      fi
                      
                      # Verifica status do scan com backoff exponencial
                      local max_retries=5
                      local retry_count=0
                      local scan_status=""
                      
                      while [ $retry_count -lt $max_retries ]; do
                          local status_response
                          status_response=$(api_call "GET" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id" "" "verificar status")
                          
                          if [ $? -eq 0 ]; then
                              scan_status=$(echo "$status_response" | jq -r '.data.status // "UNKNOWN"')
                              echo "üìä Status: $scan_status"
                              
                              if [ "$scan_status" = "REQUIRES_AUTH" ] || [ "$scan_status" = "PROCESSING" ]; then
                                  retry_count=$((retry_count + 1))
                                  if [ $retry_count -lt $max_retries ]; then
                                      local sleep_time=$((5 * (2 ** (retry_count - 1))))  # Backoff exponencial: 5s, 10s, 20s, 40s
                                      echo "‚è≥ Aguardando... ($retry_count/$max_retries) - ${sleep_time}s"
                                      sleep $sleep_time
                                      continue
                                  else
                                      echo "‚ö†Ô∏è Timeout: scan ainda processando"
                                      return 1
                                  fi
                              else
                                  break
                              fi
                          else
                              retry_count=$((retry_count + 1))
                              sleep 30
                          fi
                      done
                      
                      # Busca vulnerabilidades
                      local issues_response
                      issues_response=$(api_call "GET" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?limit=1000" "" "buscar vulnerabilidades")
                      
                      if [ $? -eq 0 ]; then
                          local data_count=$(echo "$issues_response" | jq '.data | length' 2>/dev/null || echo "0")
                          
                          if [ "$data_count" -gt 0 ]; then
                              echo "$issues_response" > /tmp/fortify_all_issues.json
                              
                              # Contadores otimizados em uma √∫nica opera√ß√£o
                              local counters
                              counters=$(echo "$issues_response" | jq '{
                                  critical: [.data[] | select((.friority // .priority) == "Critical")] | length,
                                  high: [.data[] | select((.friority // .priority) == "High")] | length,
                                  medium: [.data[] | select((.friority // .priority) == "Medium")] | length,
                                  low: [.data[] | select((.friority // .priority) == "Low")] | length,
                                  total: (.data | length)
                              }' 2>/dev/null)
                              
                              if [ $? -eq 0 ]; then
                                  local critical_count=$(echo "$counters" | jq -r '.critical // 0')
                                  local high_count=$(echo "$counters" | jq -r '.high // 0')
                                  local medium_count=$(echo "$counters" | jq -r '.medium // 0')
                                  local low_count=$(echo "$counters" | jq -r '.low // 0')
                                  local total_count=$(echo "$counters" | jq -r '.total // 0')
                                  
                                  # Salva contadores
                                  echo "$critical_count" > /tmp/fortify_critical_count
                                  echo "$high_count" > /tmp/fortify_high_count
                                  echo "$medium_count" > /tmp/fortify_medium_count
                                  echo "$low_count" > /tmp/fortify_low_count
                                  echo "$total_count" > /tmp/fortify_total_count
                                  
                                  echo "‚úÖ $total_count vulnerabilidades encontradas (CRITICAL: $critical_count, HIGH: $high_count, MEDIUM: $medium_count, LOW: $low_count)"
                                  return 0
                              else
                                  echo "‚ùå Erro ao processar contadores"
                                  return 1
                              fi
                          else
                              echo "‚ö†Ô∏è Nenhuma vulnerabilidade encontrada"
                              echo "0" > /tmp/fortify_critical_count
                              echo "0" > /tmp/fortify_high_count
                              echo "0" > /tmp/fortify_medium_count
                              echo "0" > /tmp/fortify_low_count
                              echo "0" > /tmp/fortify_total_count
                              echo '{"data":[]}' > /tmp/fortify_all_issues.json
                              return 0
                          fi
                      else
                          echo "‚ùå Falha ao buscar vulnerabilidades"
                          return 1
                      fi
                  }
                  
                  # ========== FUN√á√ÉO DE RELAT√ìRIO OTIMIZADA ==========
                  
                  gerar_relatorio_fortify() {
                      echo " "
                      echo " "
                      echo "+----------------- üìä FORTIFY SAST SCAN SUMMARY --------------------+"
                      echo "| Projeto: $fortify_project_name $fortify_version_name"
                      echo "+--------------------------------------------------------------------+"
                      
                      # L√™ contadores salvos
                      local critical_count=$(cat /tmp/fortify_critical_count 2>/dev/null || echo 0)
                      local high_count=$(cat /tmp/fortify_high_count 2>/dev/null || echo 0)
                      local medium_count=$(cat /tmp/fortify_medium_count 2>/dev/null || echo 0)
                      local low_count=$(cat /tmp/fortify_low_count 2>/dev/null || echo 0)
                      local total_count=$(cat /tmp/fortify_total_count 2>/dev/null || echo 0)
                      
                      echo "| Total: $total_count (CRITICAL: $critical_count, HIGH: $high_count, MEDIUM: $medium_count, LOW: $low_count)"
                      echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
                      echo "| CATEGORY                     | ISSUE ID   | SEVERITY | PRIMARY LOCATION            | TAGGED         | RECOMMENDATIONS               |"
                      echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
                      
                      # TABELA DETALHADA DE FINDINGS
                      cat /tmp/fortify_all_issues.json 2>/dev/null | jq -r '
                        .data | .[0:10] | .[] | [
                          (if .subCategoryName then .subCategoryName
                           elif .categoryName then .categoryName
                           elif .issueName then .issueName
                           elif .subCategory then .subCategory
                           elif .category then .category
                           elif .kingdom then .kingdom
                           else "Unknown"
                           end),
                          (.issueInstanceId // (.id | tostring)),
                          (.friority // .priority // "Unknown"),
                          ((.fileName // .primaryLocation // .folderName // "Unknown File") + ":" + ((.lineNumber // "N/A")|tostring)),
                          (.analysisType // .analysis.analysisType // .analysisName // .analysis // (.customAttributes[]? | select(.name=="Tagged") | .value) // (.attributes[]? | select(.name=="Tagged") | .value) // "N/A"),
                          (.description // "Ver detalhes no SSC")
                        ] | @tsv' | while IFS=$'\t' read -r category issue severity location tagged recommendation; do
                          mapfile -t lines < <(echo "$category" | fold -s -w 28 | head -n 3)
                          for i in "${!lines[@]}"; do
                            if [[ $i -eq 0 ]]; then
                              printf "| %-28s | %-10s | %-8s | %-27s | %-15s | %-29s |\n" \
                                "${lines[$i]}" "${issue:0:10}" "${severity:0:8}" "${location:0:27}" "${tagged:0:15}" "${recommendation:0:29}"
                            else
                              printf "| %-28s | %-10s | %-8s | %-27s | %-15s | %-29s |\n" "${lines[$i]}" "" "" "" "" ""
                            fi
                          done
                          echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
                      done
                      
                      # BREAKDOWN DETALHADO POR CATEGORIA E SEVERIDADE
                      echo " "
                      echo "üîç DETAILED BREAKDOWN BY CATEGORY:"
                      echo "+------------------------------+------------+----------+----------+----------+---------------+"
                      echo "| CATEGORY                     | CRITICAL   | HIGH     | MEDIUM   | LOW      | TOTAL ISSUES  |"
                      echo "+------------------------------+------------+----------+----------+----------+---------------+"
                      
                      cat /tmp/fortify_all_issues.json | jq -r '
                        .data[] | 
                        [(.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"), (.friority // .priority // "Unknown")] | @tsv' | awk -F'\t' '
                        function wrap(str, width, arr, n, out, i, len) {
                          n = split(str, arr, " ");
                          out = arr[1];
                          len = length(arr[1]);
                          for (i=2; i<=n; i++) {
                            if (len + 1 + length(arr[i]) > width) {
                              out = out "\n" arr[i];
                              len = length(arr[i]);
                            } else {
                              out = out " " arr[i];
                              len += 1 + length(arr[i]);
                            }
                          }
                          return out;
                        }
                        {
                          c[$1, $2]++;
                          cat[$1]=1;
                        }
                        END {
                          sep = "+------------------------------+------------+----------+----------+----------+---------------+";
                          for (k in cat) {
                            crit = c[k, "Critical"]+0;
                            high = c[k, "High"]+0;
                            med  = c[k, "Medium"]+0;
                            low  = c[k, "Low"]+0;
                            total = crit+high+med+low;
                            wrapped = wrap(k, 28);
                            n = split(wrapped, lines, "\n");
                            for (i=1; i<=n; i++) {
                              if (i==1) {
                                printf "| %-28s | %-10s | %-8s | %-8s | %-8s | %-13s |\n", lines[i], crit, high, med, low, total;
                              } else {
                                printf "|   %-26s | %-10s | %-8s | %-8s | %-8s | %-13s |\n", lines[i], "", "", "", "", "";
                              }
                            }
                            print sep;
                          }
                          
                        }'
                      echo " "
                      echo "üìä EXECUTIVE SUMMARY:"
                      echo "+-------------------------------+"
                      printf "| %-29s|\n" "CRITICAL: $critical_count"
                      printf "| %-29s|\n" "HIGH:    $high_count"
                      printf "| %-29s|\n" "MEDIUM:  $medium_count"
                      printf "| %-29s|\n" "LOW:     $low_count"
                      printf "| %-29s|\n" "TOTAL ISSUES FOUND: $total_count"
                      echo "+-------------------------------+"
                      echo " "
                      # Garantir link absoluto
                      echo "üîó Detailed Report: https://fortify-ssc.evernow.com.br/html/ssc/version/${fortify_project_version_id}/audit"
                      echo "+-------------------------------------------------------------------------------------------------------------+"
                      echo " "
                  }
                  
                  # ========== EXECU√á√ÉO PRINCIPAL OTIMIZADA ==========
                  
                  echo '   ____            __   _  ___        ____ ___    ____ ______ '
                  echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
                  echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
                  echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
                  echo '                            /___/                             '
                  echo ""
                  echo "üöÄ Iniciando Fortify SAST Scan..."
                  
                  # Verifica projeto existente
                  project_response=$(api_call "GET" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true" "" "verificar projeto")
                  
                  if [ $? -eq 0 ]; then
                      fortify_project_id=$(echo "$project_response" | jq -r '.data[] | select(.project.name=="'"$fortify_project_name"'") | .project.id' | head -1)
                      fortify_project_version_id=$(echo "$project_response" | jq -r '.data[] | select(.project.name=="'"$fortify_project_name"'") | select(.name=="'"$fortify_version_name"'") | .id' | head -1)
                      
                      if [ -n "$fortify_project_version_id" ]; then
                          echo "‚úÖ Projeto e vers√£o existem: $fortify_project_version_id"
                      elif [ -n "$fortify_project_id" ]; then
                          echo "‚úÖ Projeto existe, criando vers√£o..."
                          fortify_criar_versao
                      else
                          echo "üîß Criando projeto e vers√£o..."
                          fortify_criar_projeto_e_versao
                      fi
                  else
                      echo "‚ùå Falha ao verificar projeto existente"
                      exit 1
                  fi
                  
                  # Configura projeto
                  fortify_configurar_projeto
                  fortify_regras_processamento
                  
                  # Executa scan
                  echo "üîß Executando ScanCentral..."
                  scan_output=$($fortify_scancentral_tool -ssctoken "$fortify_controller_token" -url "$fortify_controller_url" start -skipBuild -block --log-file fortify.log --overwrite -application "$fortify_project_name" -version "$fortify_version_name" --upload-to-ssc --ssc-upload-token "$fortify_controller_token" 2>&1)
                  
                  if [ $? -eq 0 ]; then
                      job_token=$(echo "$scan_output" | grep "Submitted job and received token" | grep -E -o "[a-f0-9-]{36}" || echo "")
                      if [ -n "$job_token" ]; then
                          echo "‚úÖ Scan iniciado: $job_token"
                      else
                          echo "‚ö†Ô∏è Scan iniciado (token n√£o encontrado)"
                      fi
                  else
                      echo "‚ùå Falha no scan"
                      exit 1
                  fi
                  
                  # Aguarda processamento e extrai dados
                  echo "‚è≥ Aguardando processamento..."
                  if fortify_extrair_estatisticas; then
                      gerar_relatorio_fortify
                      
                      if fortify_gerar_sarif; then
                          echo "‚úÖ SARIF gerado com sucesso para integra√ß√£o com IDEs"
                      elif fortify_gerar_sarif_fallback; then
                          echo "‚úÖ SARIF fallback gerado com sucesso"
                      else
                          echo "‚ùå Falha cr√≠tica na gera√ß√£o de SARIF"
                          # Criar SARIF vazio v√°lido
                          mkdir -p fortify-artifacts
                          echo '{"$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json","version":"2.1.0","originalUriBaseIds":{"SRCROOT":{"uri":"file:///github/workspace/"}},"runs":[{"tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},"results":[]}]}' > fortify-artifacts/fortify-sast-results.sarif
                          echo "‚úÖ SARIF vazio v√°lido criado como √∫ltimo recurso"
                      fi
                  else
                      echo "‚ö†Ô∏è Falha ao extrair dados"
                  fi
                  
                  # Gate de qualidade
                  echo "üîí Aplicando gate de qualidade..."
                  
                  gate_query="audited:false [fortify priority order]:critical [fortify priority order]:high"
                  gate_response=$(api_call "GET" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?qm=issues&q=$(echo "$gate_query" | jq -sRr '@uri')" "" "consultar gate")
                  
                  if [ $? -eq 0 ]; then
                      gate_count=$(echo "$gate_response" | jq -r '.count // 0')
                      
                      if [ "$gate_count" -gt 0 ]; then
                          echo "‚ùå Gate falhou: $gate_count vulnerabilidades cr√≠ticas/altas"
                          echo '  _____       __         ____       _  __ '
                          echo ' / ___/___ _ / /_ ___   / __/___ _ (_)/ / '
                          echo '/ (_ // _ `// __// -_) / _/ / _ `// // /  '
                          echo '\___/ \_,_/ \__/ \__/ /_/   \_,_//_//_/   '
                          exit 1
                      else
                          echo "‚úÖ Gate aprovado: nenhuma vulnerabilidade cr√≠tica/alta"
                          echo "üöÄ Continua√ß√£o do build autorizada."
                          echo '  _____       __         ___                 '
                          echo ' / ___/___ _ / /_ ___   / _ \ ___ _ ___  ___ '
                          echo '/ (_ // _ `// __// -_) / ___// _ `/(_-< (_-< '
                          echo '\___/ \_,_/ \__/ \__/ /_/    \_,_//___//___/ '
                      fi
                  else
                      echo "‚ö†Ô∏è Falha ao consultar gate"
                      exit 1
                  fi
                  
                  echo "üéâ Fortify SAST conclu√≠do com sucesso!"

            - name: Verificar qualidade do SARIF
              if: always()
              run: |
                  echo "üîç Verificando SARIF..."
                  if [ -f fortify-artifacts/fortify-sast-results.sarif ]; then
                                        if jq empty fortify-artifacts/fortify-sast-results.sarif 2>/dev/null; then
                      count=$(jq '.runs[0].results | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                      rules=$(jq '.runs[0].tool.driver.rules | length' fortify-artifacts/fortify-sast-results.sarif 2>/dev/null || echo "0")
                      echo "‚úÖ SARIF v√°lido: $count findings, $rules regras"
                      else
                          echo "‚ùå SARIF inv√°lido - gerando fallback..."
                          echo '{"$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json","version":"2.1.0","originalUriBaseIds":{"SRCROOT":{"uri":"file:///github/workspace/"}},"runs":[{"tool":{"driver":{"name":"Fortify Static Code Analyzer","version":"25.2.0"}},"results":[]}]}' > fortify-artifacts/fortify-sast-results.sarif
                      fi
                  else
                      echo "‚ùå SARIF n√£o encontrado"
                      exit 1
                  fi



            - name: Upload Fortify SARIF artifact
              uses: actions/upload-artifact@v4.4.0
              with:
                name: fortify-sarif
                path: fortify-artifacts/fortify-sast-results.sarif
                if-no-files-found: warn
              if: always() 
