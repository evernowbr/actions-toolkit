name: Fortify SAST

on:
    workflow_call:
        inputs:
            name:
                required: true
                type: string
            version:
                required: true
                type: string
            fortify_scancentral_tool:
                required: true
                type: string
            fortify_translate_name:
                required: true
                type: string
            fortify_translate_additional_flags:
                required: true
                type: string
        secrets:
            FORTIFY_SSC_API_URL:
                required: true
            FORTIFY_UNIFIED_LOGIN_TOKEN:
                required: true
            FORTIFY_CONTROLLER_URL:
                required: true
            FORTIFY_CONTROLLER_TOKEN:
                required: true

jobs:
    scan:
        name: Fortify SAST Scan
        runs-on: self-hosted

        steps:
            - name: Run Scan
              env:
                  fortify_project_name: ${{ inputs.name }}
                  fortify_version_name: ${{ inputs.version }}
                  fortify_translate_name: ${{ inputs.fortify_translate_name }}
                  fortify_scancentral_tool: ${{ inputs.fortify_scancentral_tool }}
                  fortify_translate_additional_flags: ${{ inputs.fortify_translate_additional_flags }}
                  fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
                  fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
                  fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
                  fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
              run: |
                  echo "Executando Fortify SAST"
                  echo "export PATH=\$PATH:/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin" >> /home/github-runner/.bashrc
                  source ~/.bashrc

                  fortify_verificar_resposta_api() {
                      # Valida se a resposta é JSON válido antes de processar
                      if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                          echo "❌ Resposta não é JSON válido. Conteúdo recebido:"
                          echo "$response" | head -20
                          echo "❌ Exit code: $exit_code"
                          exit 1
                      fi
                      
                      if [ "$exit_code" == "0" ] || [ "$exit_code" == "" ]; then
                          responseCode=$(echo "$response" | jq -r '.responseCode // empty')
                          if [ -n "$responseCode" ] && [ "$responseCode" != "200" ] && [ "$responseCode" != "201" ]; then
                              echo "❌ Código de retorno diferente de 200: API retornou código $responseCode"
                              echo "❌ Resposta da API: $response"
                              exit 1
                          fi
                      else
                          echo "❌ Comando retornou $exit_code"
                          echo "❌ Mensagem de erro: $response"  
                          exit $exit_code
                      fi
                  }

                  fortify_verificar_codigo_de_resposta() {
                      if [ "$exit_code" != "0" ]; then
                          echo "❌ Comando retornou $exit_code"
                          exit $exit_code
                      fi
                  }

                  fortify_criar_projeto_e_versao() {
                      # Cria um projeto e uma versão novos
                      fortify_project_parameters='{"project":{"name":"'$fortify_project_name'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name":"'$fortify_version_name'","customTagValuesAutoApply":true,"autoPredict":true,"predictionPolicy":"LAB Fortify Policy"}'
                      response=$(curl -sS -k -L --fail \
                          -H "Content-Type: application/json" \
                          -H "Accept: application/json" \
                          -H "Authorization: FortifyToken $fortify_unified_login_token" \
                          -d "$fortify_project_parameters" \
                          "$fortify_ssc_api_url/projectVersions") \
                          || exit_code=$?
                      
                      # Valida se a resposta é JSON válido
                      if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                          echo "❌ Resposta não é JSON válido ao criar projeto:"
                          echo "$response" | head -20
                          exit 1
                      fi
                      
                      fortify_verificar_resposta_api
                      fortify_project_id=$(echo "$response" | jq -r '.data.project.id')
                      fortify_project_version_id=$(echo "$response" | jq -r '.data.id')
                      echo "✅ Projeto $fortify_project_name criado com ID $fortify_project_id."
                      echo "✅ Versão $fortify_version_name criada com ID $fortify_project_version_id."
                  }

                  fortify_criar_versao() {
                      # Cria uma versão para um projeto já existente
                      fortify_project_parameters='{"project":{"name":"'$fortify_project_name'","id":"'$fortify_project_id'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name": "'$fortify_version_name'"}'
                      response=$(curl -sS -k -L --fail \
                          -H "Content-Type: application/json" \
                          -H "Accept: application/json" \
                          -H "Authorization: FortifyToken $fortify_unified_login_token" \
                          -d "$fortify_project_parameters" \
                          "$fortify_ssc_api_url/projectVersions") \
                          || exit_code=$?
                      
                      # Valida se a resposta é JSON válido
                      if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                          echo "❌ Resposta não é JSON válido ao criar versão:"
                          echo "$response" | head -20
                          exit 1
                      fi
                      
                      fortify_verificar_resposta_api
                      fortify_project_version_id=$(echo "$response" | jq -r '.data.id')
                      echo "✅ Versão $fortify_version_name criada com ID $fortify_project_version_id."
                  }

                  fortify_configurar_projeto() {
                      # Configurar parâmetros adicionais do projeto
                      fortify_parametros='{"requests":[{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/attributes'","httpVerb":"PUT","postData":[{"values":[{"guid":"New"}],"attributeDefinitionId":5},{"values":[{"guid":"Internal"}],"attributeDefinitionId":6},{"values":[{"guid":"internalnetwork"}],"attributeDefinitionId":7}]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/authEntities'","httpVerb":"PUT","postData":[]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id?hideProgress=true'","httpVerb":"PUT","postData":{"committed":true}}]}'
                      response=$(curl -sS -k -L --fail \
                          -H "Content-Type: application/json" \
                          -H "Accept: application/json" \
                          -H "Authorization: FortifyToken $fortify_unified_login_token" \
                          -d "$fortify_parametros" \
                          "$fortify_ssc_api_url/bulk") \
                          || exit_code=$?
                      
                      # Valida se a resposta é JSON válido
                      if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                          echo "❌ Resposta não é JSON válido ao configurar projeto:"
                          echo "$response" | head -20
                          exit 1
                      fi
                      
                      fortify_verificar_resposta_api
                      successCount=$(echo "$response" | jq -r '.successCount')
                      if [ "$successCount" != "3" ]; then
                          echo "❌ Parâmetros adicionais do projeto $fortify_project_name configurados sem sucesso."
                          echo "❌ Código de retorno diferente de 200: API retornou código $exit_code"
                          echo "❌ Resposta da API: $response"
                          exit 1
                      else
                          echo "✅ Parâmetros adicionais do projeto $fortify_project_name configurados com sucesso."
                      fi
                  }

                  fortify_regras_processamento() {
                      # Definir regras de processamento de resultados
                      response=$(curl -sS -k -L --fail \
                          -H "Content-Type: application/json" \
                          -H "Accept: application/json" \
                          -H "Authorization: FortifyToken $fortify_unified_login_token" \
                          -d '[{"identifier": "com.fortify.manager.BLL.processingrules.BuildProjectProcessingRule","displayName": "Require approval if the Build Project is different between scans","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.FileCountProcessingRule","displayName": "Require approval if file count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.LOCCountProcessingRule","displayName": "Require approval if line count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.NewerEngineVersionProcessingRule","displayName": "Require approval if the engine version of a scan is newer than the engine version of the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.RulePackVersionProcessingRule","displayName": "Require approval if the rulepacks used in the scan do not match the rulepacks used in the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.WarningProcessingRule","displayName": "Require approval if result has analysis warnings","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.ExternalListVersionProcessingRule","displayName": "Check external metadata file versions in scan against versions on server.","displayable": true,"enabled": false}]' \
                          -X PUT \
                          "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/resultProcessingRules") \
                          || exit_code=$?
                      
                      # Valida se a resposta é JSON válido
                      if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                          echo "❌ Resposta não é JSON válido ao configurar regras:"
                          echo "$response" | head -20
                          exit 1
                      fi
                      
                      fortify_verificar_resposta_api
                      echo "✅ Regras de processamento do projeto $fortify_project_name configuradas com sucesso."
                  }

                  fortify_gerar_sarif() {
                      echo "📋 Gerando relatório SARIF otimizado para GitHub Code Scanning..."
                      
                      # Verifica se temos dados para converter
                      if [ ! -f /tmp/fortify_all_issues.json ]; then
                          echo "⚠️ Nenhum dado de vulnerabilidade encontrado para gerar SARIF"
                          return 1
                      fi
                      
                      # Cria diretório para artefatos
                      mkdir -p fortify-artifacts
                      
                      # Extrai regras únicas para o bloco rules
                      echo "🔍 Extraindo regras únicas para otimização do SARIF..."
                      echo "📋 Padronização de severidades: Critical/High → error, Medium → warning, Low → note"
                      unique_rules=$(cat /tmp/fortify_all_issues.json | jq -r '
                          .data[] | 
                          (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown") as $ruleId |
                          {
                              "id": $ruleId,
                              "name": $ruleId,
                              "shortDescription": {
                                  "text": (.description // .issueName // "Vulnerabilidade detectada pelo Fortify")
                              },
                              "fullDescription": {
                                  "text": (.description // .issueName // "Vulnerabilidade detectada pelo Fortify")
                              },
                              "defaultConfiguration": {
                                  "level": (
                                      if (.friority // .priority) == "Critical" then "error"
                                      elif (.friority // .priority) == "High" then "error"
                                      elif (.friority // .priority) == "Medium" then "warning"
                                      elif (.friority // .priority) == "Low" then "note"
                                      else "note"
                                      end
                                  )
                              }
                          }
                      ' | jq -s 'unique_by(.id)')
                      
                      # Gera SARIF otimizado com rules e partialFingerprints
                      cat /tmp/fortify_all_issues.json | jq --argjson rules "$unique_rules" '
                      {
                          "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
                          "version": "2.1.0",
                          "runs": [
                              {
                                  "tool": {
                                      "driver": {
                                          "name": "Fortify Static Code Analyzer",
                                          "version": "25.2.0",
                                          "informationUri": "https://www.microfocus.com/en-us/cyberres/application-security/static-code-analyzer",
                                          "rules": $rules
                                      }
                                  },
                                  "invocations": [
                                      {
                                          "executionSuccessful": true,
                                          "commandLine": "scancentral",
                                          "startTimeUtc": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                                          "endTimeUtc": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
                                      }
                                  ],
                                  "results": [
                                      .data[] | {
                                          "ruleId": (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                                          "level": (
                                              if (.friority // .priority) == "Critical" then "error"
                                              elif (.friority // .priority) == "High" then "error"
                                              elif (.friority // .priority) == "Medium" then "warning"
                                              elif (.friority // .priority) == "Low" then "note"
                                              else "note"
                                              end
                                          ),
                                          "message": {
                                              "text": (.description // .issueName // "Vulnerabilidade detectada pelo Fortify")
                                          },
                                          "locations": [
                                              {
                                                  "physicalLocation": {
                                                      "artifactLocation": {
                                                          "uri": (.fileName // .primaryLocation // .folderName // "Unknown File")
                                                      },
                                                      "region": {
                                                          "startLine": (.lineNumber // 1),
                                                          "startColumn": 1,
                                                          "endLine": (.lineNumber // 1),
                                                          "endColumn": 1
                                                      }
                                                  }
                                              }
                                          ],
                                          "partialFingerprints": {
                                              "primaryLocationLineHash": (.fileName // "Unknown") + ":" + ((.lineNumber // 1) | tostring) + ":" + (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown") + ":" + ((.description // .issueName // "") | gsub("[^a-zA-Z0-9]"; "") | .[0:20])
                                          },
                                          "properties": {
                                              "fortify_severity": (.friority // .priority // "Unknown"),
                                              "fortify_category": (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                                              "fortify_issue_id": (.issueInstanceId // (.id | tostring)),
                                              "fortify_analysis_type": (.analysisType // .analysis.analysisType // .analysisName // .analysis // "N/A"),
                                              "fortify_tagged": "N/A",
                                              "fortify_project": "'$fortify_project_name'",
                                              "fortify_version": "'$fortify_version_name'",
                                              "fortify_project_id": "'$fortify_project_id'",
                                              "fortify_version_id": "'$fortify_project_version_id'"
                                          }
                                      }
                                  ]
                              }
                          ]
                      }' > fortify-artifacts/fortify-sast-results.sarif
                      
                      # Verifica se o SARIF foi gerado com sucesso
                      if [ -f fortify-artifacts/fortify-sast-results.sarif ]; then
                          # Valida o JSON do SARIF
                          if ! cat fortify-artifacts/fortify-sast-results.sarif | jq empty 2>/dev/null; then
                              echo "❌ SARIF gerado com JSON inválido"
                              return 1
                          fi
                          
                          sarif_count=$(cat fortify-artifacts/fortify-sast-results.sarif | jq '.runs[0].results | length')
                          rules_count=$(cat fortify-artifacts/fortify-sast-results.sarif | jq '.runs[0].tool.driver.rules | length')
                          
                                                echo "✅ SARIF otimizado gerado com sucesso!"
                      echo "📊 Estatísticas do SARIF:"
                      echo "   - Formato: SARIF 2.1.0"
                      echo "   - Ferramenta: Fortify Static Code Analyzer v25.2.0"
                      echo "   - Projeto: $fortify_project_name"
                      echo "   - Versão: $fortify_version_name"
                      echo "   - Total de findings: $sarif_count"
                      echo "   - Regras únicas: $rules_count"
                      echo "   - Partial fingerprints: ✅ Incluídos (com contexto)"
                      echo "   - Severidades: ✅ Padronizadas (error/warning/note)"
                      echo "   - Compatibilidade: ✅ GitHub Code Scanning"
                      echo "   - Compatibilidade: ✅ IDEs (VSCode, JetBrains, etc.)"
                          
                          # Verifica se há vulnerabilidades
                          if [ "$sarif_count" -gt 0 ]; then
                              echo "🎯 SARIF pronto para integração com $sarif_count vulnerabilidades"
                                                        echo "💡 Dicas de uso:"
                          echo "   - Visualize no GitHub: Security > Code scanning alerts"
                          echo "   - Abra no VSCode: Extensão 'SARIF Viewer' ou 'SARIF Explorer'"
                          echo "   - Receba alertas automáticos em Pull Requests"
                          echo "   - Fingerprints únicos evitam duplicatas em arquivos grandes"
                          else
                              echo "⚠️ SARIF gerado mas sem vulnerabilidades - código seguro!"
                          fi
                          
                          return 0
                      else
                          echo "❌ Falha ao gerar arquivo SARIF"
                          return 1
                      fi
                  }

                  fortify_extrair_estatisticas_completas() {
                      echo "📊 Extraindo estatísticas completas de vulnerabilidades..."
                      
                      # Verifica se temos o project_version_id
                      if [ -z "$fortify_project_version_id" ]; then
                          echo "❌ ID da versão do projeto não encontrado. Não é possível gerar relatório."
                          return 1
                      fi
                      
                      # Verifica se o scan está completo com retry progressivo
                      echo "🔍 Verificando status do scan..."
                      for i in {1..5}; do
                          scan_status_response=$(curl -sS -k -L --fail \
                              -H "Content-Type: application/json" \
                              -H "Accept: application/json" \
                              -H "Authorization: FortifyToken $fortify_unified_login_token" \
                              "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id") \
                              || exit_code=$?
                          
                          # Valida se a resposta é JSON válido
                          if echo "$scan_status_response" | jq -e . >/dev/null 2>&1; then
                              scan_status=$(echo "$scan_status_response" | jq -r '.data.status // "UNKNOWN"')
                              echo "📊 Status do scan: $scan_status"
                              
                              if [ "$scan_status" == "REQUIRES_AUTH" ] || [ "$scan_status" == "PROCESSING" ]; then
                                  if [ $i -lt 5 ]; then
                                      echo "⏳ Scan ainda em processamento... Tentativa $i/5"
                                      sleep $((i*15))  # Timeout progressivo: 15s, 30s, 45s, 60s
                                      continue
                                  else
                                      echo "⚠️ Timeout: Scan ainda processando após 5 tentativas"
                                      return 1
                                  fi
                              else
                                  break  # Scan completo, sai do loop
                              fi
                          else
                              echo "❌ Resposta inválida ao verificar status:"
                              echo "$scan_status_response" | head -10
                              return 1
                          fi
                      done
                      
                      # Busca TODAS as vulnerabilidades (sem filtro de severidade)
                      echo "🔍 Buscando vulnerabilidades..."
                      all_issues_response=$(curl -sS -k -L --fail \
                          -H "Content-Type: application/json" \
                          -H "Accept: application/json" \
                          -H "Authorization: FortifyToken $fortify_unified_login_token" \
                          "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?limit=1000") \
                          || exit_code=$?
                      
                      # Verifica se a API retornou erro
                      if [ "$exit_code" != "0" ]; then
                          echo "❌ Erro ao consultar vulnerabilidades: $exit_code"
                          return 1
                      fi
                      
                      # Verifica se a resposta tem dados válidos
                      if [ -z "$all_issues_response" ] || [ "$all_issues_response" = "null" ]; then
                          echo "⚠️ Nenhum dado de vulnerabilidade retornado pela API."
                          return 1
                      fi
                      
                      # Valida se a resposta é JSON válido
                      if ! echo "$all_issues_response" | jq -e . >/dev/null 2>&1; then
                          echo "❌ Resposta não é JSON válido ao buscar vulnerabilidades:"
                          echo "$all_issues_response" | head -20
                          return 1
                      fi
                      
                      # Verifica se há erro na resposta JSON
                      error_message=$(echo "$all_issues_response" | jq -r '.message // empty')
                      if [ -n "$error_message" ]; then
                          echo "❌ Erro da API: $error_message"
                          return 1
                      fi
                      
                      # Verifica se há dados na resposta
                      data_count=$(echo "$all_issues_response" | jq -r '.data | length' 2>/dev/null || echo "0")
                      if [ "$data_count" == "0" ]; then
                          echo "⚠️ Nenhuma vulnerabilidade encontrada no scan atual."
                          echo "0" > /tmp/fortify_total_count
                          echo "0" > /tmp/fortify_critical_count  
                          echo "0" > /tmp/fortify_high_count
                          echo "0" > /tmp/fortify_medium_count
                          echo "0" > /tmp/fortify_low_count
                          echo '{"data":[]}' > /tmp/fortify_all_issues.json
                          return 0
                      fi
                      
                      echo "✅ Encontradas $data_count vulnerabilidades para processamento"
                      
                      # Salva os dados para análise
                      echo "$all_issues_response" > /tmp/fortify_all_issues.json
                      
                      # Contadores por severidade (tenta friority e priority como fallback)
                      critical_count=$(echo "$all_issues_response" | jq -r '[.data[] | select((.friority // .priority) == "Critical")] | length')
                      high_count=$(echo "$all_issues_response" | jq -r '[.data[] | select((.friority // .priority) == "High")] | length')
                      medium_count=$(echo "$all_issues_response" | jq -r '[.data[] | select((.friority // .priority) == "Medium")] | length')
                      low_count=$(echo "$all_issues_response" | jq -r '[.data[] | select((.friority // .priority) == "Low")] | length')
                      total_count=$(echo "$all_issues_response" | jq -r '.data | length')
                      
                      # Valida se os contadores são números válidos
                      critical_count=${critical_count:-0}
                      high_count=${high_count:-0}
                      medium_count=${medium_count:-0}
                      low_count=${low_count:-0}
                      total_count=${total_count:-0}
                      
                      # Salva para uso posterior
                      echo "$critical_count" > /tmp/fortify_critical_count
                      echo "$high_count" > /tmp/fortify_high_count  
                      echo "$medium_count" > /tmp/fortify_medium_count
                      echo "$low_count" > /tmp/fortify_low_count
                      echo "$total_count" > /tmp/fortify_total_count
                  }

                  gerar_relatorio_fortify() {
                      echo " "
                      echo " "
                      echo "+----------------- 📊 FORTIFY SAST SCAN SUMMARY --------------------+"
                      echo "| Projeto: $fortify_project_name $fortify_version_name"
                      echo "+--------------------------------------------------------------------+"
                      
                      # Lê contadores salvos
                      critical_count=$(cat /tmp/fortify_critical_count 2>/dev/null || echo 0)
                      high_count=$(cat /tmp/fortify_high_count 2>/dev/null || echo 0)
                      medium_count=$(cat /tmp/fortify_medium_count 2>/dev/null || echo 0)
                      low_count=$(cat /tmp/fortify_low_count 2>/dev/null || echo 0)
                      total_count=$(cat /tmp/fortify_total_count 2>/dev/null || echo 0)
                      
                      echo "| Total: $total_count (CRITICAL: $critical_count, HIGH: $high_count, MEDIUM: $medium_count, LOW: $low_count)"
                      echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
                      echo "| CATEGORY                     | ISSUE ID   | SEVERITY | PRIMARY LOCATION            | TAGGED         | RECOMMENDATIONS               |"
                      echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
                      
                      # TABELA DETALHADA DE FINDINGS
                      cat /tmp/fortify_all_issues.json 2>/dev/null | jq -r '
                        .data | .[0:10] | .[] | [
                          (if .subCategoryName then .subCategoryName
                           elif .categoryName then .categoryName
                           elif .issueName then .issueName
                           elif .subCategory then .subCategory
                           elif .category then .category
                           elif .kingdom then .kingdom
                           else "Unknown"
                           end),
                          (.issueInstanceId // (.id | tostring)),
                          (.friority // .priority // "Unknown"),
                          ((.fileName // .primaryLocation // .folderName // "Unknown File") + ":" + ((.lineNumber // "N/A")|tostring)),
                          (.analysisType // .analysis.analysisType // .analysisName // .analysis // (.customAttributes[]? | select(.name=="Tagged") | .value) // (.attributes[]? | select(.name=="Tagged") | .value) // "N/A"),
                          (.description // "Ver detalhes no SSC")
                        ] | @tsv' | while IFS=$'\t' read -r category issue severity location tagged recommendation; do
                          mapfile -t lines < <(echo "$category" | fold -s -w 28 | head -n 3)
                          for i in "${!lines[@]}"; do
                            if [[ $i -eq 0 ]]; then
                              printf "| %-28s | %-10s | %-8s | %-27s | %-15s | %-29s |\n" \
                                "${lines[$i]}" "${issue:0:10}" "${severity:0:8}" "${location:0:27}" "${tagged:0:15}" "${recommendation:0:29}"
                            else
                              printf "| %-28s | %-10s | %-8s | %-27s | %-15s | %-29s |\n" "${lines[$i]}" "" "" "" "" ""
                            fi
                          done
                          echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
                      done
                      
                      # BREAKDOWN DETALHADO POR CATEGORIA E SEVERIDADE
                      echo " "
                      echo "🔍 DETAILED BREAKDOWN BY CATEGORY:"
                      echo "+------------------------------+------------+----------+----------+----------+---------------+"
                      echo "| CATEGORY                     | CRITICAL   | HIGH     | MEDIUM   | LOW      | TOTAL ISSUES  |"
                      echo "+------------------------------+------------+----------+----------+----------+---------------+"
                      
                      cat /tmp/fortify_all_issues.json | jq -r '
                        .data[] | 
                        [(.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"), (.friority // .priority // "Unknown")] | @tsv' | awk -F'\t' '
                        function wrap(str, width, arr, n, out, i, len) {
                          n = split(str, arr, " ");
                          out = arr[1];
                          len = length(arr[1]);
                          for (i=2; i<=n; i++) {
                            if (len + 1 + length(arr[i]) > width) {
                              out = out "\n" arr[i];
                              len = length(arr[i]);
                            } else {
                              out = out " " arr[i];
                              len += 1 + length(arr[i]);
                            }
                          }
                          return out;
                        }
                        {
                          c[$1, $2]++;
                          cat[$1]=1;
                        }
                        END {
                          sep = "+------------------------------+------------+----------+----------+----------+---------------+";
                          for (k in cat) {
                            crit = c[k, "Critical"]+0;
                            high = c[k, "High"]+0;
                            med  = c[k, "Medium"]+0;
                            low  = c[k, "Low"]+0;
                            total = crit+high+med+low;
                            wrapped = wrap(k, 28);
                            n = split(wrapped, lines, "\n");
                            for (i=1; i<=n; i++) {
                              if (i==1) {
                                printf "| %-28s | %-10s | %-8s | %-8s | %-8s | %-13s |\n", lines[i], crit, high, med, low, total;
                              } else {
                                printf "|   %-26s | %-10s | %-8s | %-8s | %-8s | %-13s |\n", lines[i], "", "", "", "", "";
                              }
                            }
                            print sep;
                          }
                          
                        }'
                      echo " "
                      echo "📊 EXECUTIVE SUMMARY:"
                      echo "+-------------------------------+"
                      printf "| %-29s|\n" "CRITICAL: $critical_count"
                      printf "| %-29s|\n" "HIGH:    $high_count"
                      printf "| %-29s|\n" "MEDIUM:  $medium_count"
                      printf "| %-29s|\n" "LOW:     $low_count"
                      printf "| %-29s|\n" "TOTAL ISSUES FOUND: $total_count"
                      echo "+-------------------------------+"
                      echo " "
                      # Garantir link absoluto
                      echo "🔗 Detailed Report: https://fortify-ssc.evernow.com.br/html/ssc/version/${fortify_project_version_id}/audit"
                      echo "+-------------------------------------------------------------------------------------------------------------+"
                      echo " "
                  }
                  
                  # ========== EXECUÇÃO PRINCIPAL ==========
                  
                  echo '   ____            __   _  ___        ____ ___    ____ ______ '
                  echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
                  echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
                  echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
                  echo '                            /___/                             '
                  
                  # Verificar se projeto e versão já existem
                  echo "🔍 Verificando se o projeto $fortify_project_name existe no SSC..."
                  response=$(curl -sS -k -L --fail \
                      -H "Accept: application/json" \
                      -H "Authorization: FortifyToken $fortify_unified_login_token" \
                      "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true") \
                      || exit_code=$?
                  
                  # Valida se a resposta é JSON válido
                  if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                      echo "❌ Resposta não é JSON válido. Conteúdo recebido:"
                      echo "$response" | head -20
                      echo "❌ Exit code: $exit_code"
                      echo "❌ Verifique: URL, token, conectividade e permissões"
                      exit 1
                  fi
                  
                  fortify_verificar_resposta_api
                  fortify_project_id=$(echo "$response" | jq -r '.data[] | select(.project.name=="'"$fortify_project_name"'") | .project.id' | head -1 | awk '{$1=$1};1')
                  fortify_project_version_id=$(echo "$response" | jq -r '.data[] | select(.project.name=="'"$fortify_project_name"'") | select(.name=="'"$fortify_version_name"'") | .id' | head -1 | awk '{$1=$1};1')
                  
                  if [ "$fortify_project_version_id" != "" ]; then
                      # Já existe projeto e versão no SSC
                      echo "✅ O projeto $fortify_project_name já existe no SSC com ID $fortify_project_id."
                      echo "✅ A versão $fortify_version_name já existe no SSC com ID $fortify_project_version_id."
                  elif [ "$fortify_project_id" != "" ]; then
                      # Já existe projeto (sem versão) no SSC
                      echo "✅ O projeto $fortify_project_name já existe no SSC com ID $fortify_project_id. Criando versão..."
                      fortify_criar_versao
                  else
                      # Não tem projeto nem versão no SSC
                      echo "⚠️ O projeto $fortify_project_name ainda não existe no SSC. Criando projeto e versão..."
                      fortify_criar_projeto_e_versao
                  fi
                  
                  fortify_configurar_projeto
                  fortify_regras_processamento
                  
                  echo "🔧 Executando Scancentral Client"
                  output=$($fortify_scancentral_tool -ssctoken $fortify_controller_token -url $fortify_controller_url start -skipBuild -block --log-file fortify.log --overwrite -application $fortify_project_name -version $fortify_version_name --upload-to-ssc --ssc-upload-token $fortify_controller_token 2>&1 | tee /dev/stderr )                    
                  
                  # Verifica o código de resposta
                  exit_code=$?
                  fortify_verificar_codigo_de_resposta
                    
                  # Extrai o job token da saída usando grep e regex
                  fortify_job_token=$(echo "$output" | grep "Submitted job and received token" | grep -E -o "[a-f0-9-]{36}")
                    
                  # Verifica se o job token foi encontrado
                  if [ -z "$fortify_job_token" ]; then
                      echo "❌ Job token não foi criado."
                      exit 1
                  else
                      echo "✅ Arquivos para scan enviados com sucesso. ID do Scan: $fortify_job_token"
                  fi
                    
                  # ========== GERA RELATÓRIO DETALHADO ANTES DO GATE ==========
                  echo ""
                  echo "⏳ Aguardando finalização do scan para gerar relatório detalhado..."
                  
                  # Aguarda o scan processar com retry inteligente
                  max_retries=5
                  retry_count=0
                  while [ $retry_count -lt $max_retries ]; do
                      echo "🔄 Tentativa $((retry_count + 1))/$max_retries - Aguardando processamento..."
                      sleep 30  # Aguarda 30s entre tentativas
                      
                      # Tenta extrair dados
                      if fortify_extrair_estatisticas_completas; then
                          # Verifica se há dados válidos
                          if [ -f /tmp/fortify_all_issues.json ]; then
                              data_count=$(cat /tmp/fortify_all_issues.json | jq '.data | length' 2>/dev/null || echo "0")
                              if [ "$data_count" -gt 0 ]; then
                                  echo "✅ Dados extraídos com sucesso: $data_count vulnerabilidades encontradas"
                                  break
                              else
                                  echo "⚠️ Scan ainda processando... (0 vulnerabilidades encontradas)"
                              fi
                          fi
                      fi
                      
                      retry_count=$((retry_count + 1))
                  done
                  
                  if [ $retry_count -eq $max_retries ]; then
                      echo "⚠️ Timeout: Scan pode ainda estar processando. Continuando com dados disponíveis..."
                  fi
                  
                  # Extrai estatísticas completas
                  if fortify_extrair_estatisticas_completas; then
                      # Gera relatório visual apenas se a extração foi bem-sucedida
                      echo ""
                      echo "📊 GERANDO RELATÓRIO DETALHADO:"
                      gerar_relatorio_fortify
                        
                      # Gera relatório SARIF para integração com IDEs
                      echo ""
                      echo "🔗 GERANDO RELATÓRIO SARIF:"
                      if fortify_gerar_sarif; then
                          echo "✅ SARIF gerado com sucesso para integração com IDEs"
                      else
                          echo "⚠️ Não foi possível gerar SARIF, mas o relatório detalhado foi criado"
                      fi
                  else
                      echo "⚠️ Não foi possível extrair dados de vulnerabilidades para gerar relatório detalhado."
                      echo "   O gate de qualidade ainda será aplicado normalmente."
                  fi
                    
                  echo "⚙️ Iniciando processamento das regras de gate para o projeto."
                    
                  regras_json='[
                    {
                      "gate": "audited:false [fortify priority order]:critical [fortify priority order]:high",
                      "name": "default",
                      "bypass": "false"
                    },
                    {
                      "gate": "audited:false [fortify priority order]:critical [fortify priority order]:high",
                      "name": "teste",
                      "bypass": "true"
                    }
                  ]'
                    
                  # Obtém regra default
                  gate=$(echo "$regras_json" | jq --compact-output --raw-output '.[] | select(.name=="default") | .gate')
                  if [ -z "$gate" ]; then
                      echo "❌ Nenhuma regra 'default' foi definida para o projeto no Fortify."
                      exit 1
                  fi
                    
                  bypass=$(echo "$regras_json" | jq --compact-output --raw-output '.[] | select(.name=="default") | .bypass')
                  filtro_aplicado="$gate"
                    
                  # Verifica se a regra será aplicada ou ignorada (bypass)
                  if [ "$bypass" == "true" ]; then
                      echo "⚠️  Bypass ativado: a regra 'default' não será aplicada."
                      echo "✅ Continuação do pipeline permitida."
                  else
                      echo "🔒 Bypass desativado: a regra 'default' será aplicada."
                      echo "🔍 Filtro aplicado: \`$filtro_aplicado\`"
                      filtro_url_encoded=$(echo "$filtro_aplicado" | jq -sRr '@uri')
                      echo "📡 Consultando vulnerabilidades no Fortify SSC..."
                    
                      response=$(curl -sS -k -L --fail \
                          -H "Content-Type: application/json" \
                          -H "Accept: application/json" \
                          -H "Authorization: FortifyToken $fortify_unified_login_token" \
                          "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?qm=issues&q=$filtro_url_encoded") \
                          || exit_code=$?
                      
                      # Valida se a resposta é JSON válido
                      if ! echo "$response" | jq -e . >/dev/null 2>&1; then
                          echo "❌ Resposta não é JSON válido ao consultar gate:"
                          echo "$response" | head -20
                          exit 1
                      fi
                    
                      fortify_verificar_resposta_api
                    
                      num_issues=$(echo "$response" | jq -r '.count')
                    
                      if [ "$num_issues" -gt 0 ]; then
                          echo "❌ Gate falhou: **$num_issues** vulnerabilidades encontradas com base no filtro aplicado."
                          echo "📄 Verifique o relatório detalhado acima para mais informações."
                          echo '  _____       __         ____       _  __ '
                          echo ' / ___/___ _ / /_ ___   / __/___ _ (_)/ / '
                          echo '/ (_ // _ `// __// -_) / _/ / _ `// // /  '
                          echo '\___/ \_,_/ \__/ \__/ /_/   \_,_//_//_/   '
                          exit 1
                      else
                          echo "✅ Gate aprovado: Nenhuma vulnerabilidade crítica ou alta encontrada."
                          echo "🚀 Continuação do build autorizada."
                          echo '  _____       __         ___                 '
                          echo ' / ___/___ _ / /_ ___   / _ \ ___ _ ___  ___ '
                          echo '/ (_ // _ `// __// -_) / ___// _ `/(_-< (_-< '
                          echo '\___/ \_,_/ \__/ \__/ /_/    \_,_//___//___/ '
                      fi
                  fi

                  # Limpeza de arquivos temporários (opcional)
                  echo "🧹 Limpando arquivos temporários..."
                  # Mantém apenas o SARIF como artefato principal
                  # O JSON bruto é usado apenas para geração do SARIF
                    
                  # Informações sobre o SARIF gerado
                  if [ -f fortify-artifacts/fortify-sast-results.sarif ]; then
                      echo ""
                      echo "🚀 SARIF otimizado pronto para integração DevSecOps!"
                      echo "📤 Upload automático para GitHub Code Scanning configurado"
                      echo "📥 Artefato SARIF disponível para download manual"
                      echo ""
                      echo "💡 Como usar o SARIF:"
                      echo "   1. GitHub: Security > Code scanning alerts"
                      echo "   2. VSCode: Extensão 'SARIF Viewer' ou 'SARIF Explorer'"
                      echo "   3. JetBrains: Plugin SARIF Viewer"
                      echo "   4. Pull Requests: Alertas automáticos"
                      echo "   5. Fingerprints únicos para tracking preciso"
                      echo ""
                  fi

            # ========== UPLOAD DE ARTEFATOS ==========
            - name: Verificar qualidade do SARIF
              run: |
                  echo "🔍 Verificando qualidade e compatibilidade do SARIF..."
                  if [ -f fortify-artifacts/fortify-sast-results.sarif ]; then
                      # Validação básica
                      if ! cat fortify-artifacts/fortify-sast-results.sarif | jq empty 2>/dev/null; then
                          echo "❌ SARIF com JSON inválido"
                          exit 1
                      fi
                      
                      # Estatísticas detalhadas
                      sarif_count=$(cat fortify-artifacts/fortify-sast-results.sarif | jq '.runs[0].results | length' 2>/dev/null || echo "0")
                      rules_count=$(cat fortify-artifacts/fortify-sast-results.sarif | jq '.runs[0].tool.driver.rules | length' 2>/dev/null || echo "0")
                      has_fingerprints=$(cat fortify-artifacts/fortify-sast-results.sarif | jq '.runs[0].results[0].partialFingerprints // empty' 2>/dev/null | wc -l)
                      
                      # Validação de fingerprints únicos
                      if [ "$sarif_count" -gt 0 ]; then
                          unique_fingerprints=$(cat fortify-artifacts/fortify-sast-results.sarif | jq -r '.runs[0].results[].partialFingerprints.primaryLocationLineHash' 2>/dev/null | sort | uniq | wc -l)
                          fingerprint_quality=$([ "$unique_fingerprints" -eq "$sarif_count" ] && echo "✅ Únicos" || echo "⚠️ Possíveis duplicatas")
                      else
                          unique_fingerprints=0
                          fingerprint_quality="N/A"
                      fi
                      
                      echo "📊 Análise de Qualidade do SARIF:"
                      echo "   ✅ Formato JSON válido"
                      echo "   📈 Findings: $sarif_count"
                      echo "   🔧 Regras únicas: $rules_count"
                      echo "   🎯 Partial fingerprints: $([ $has_fingerprints -gt 0 ] && echo "✅ Incluídos" || echo "❌ Ausentes")"
                      echo "   🔍 Fingerprints únicos: $fingerprint_quality ($unique_fingerprints/$sarif_count)"
                      echo "   🚀 Compatível com GitHub Code Scanning"
                      echo "   💻 Compatível com IDEs modernas"
                      
                      if [ "$sarif_count" -gt 0 ]; then
                          echo ""
                          echo "🎉 SARIF pronto para uso em ambiente DevSecOps!"
                          echo "📋 Próximos passos:"
                          echo "   • Verificar alertas em GitHub > Security"
                          echo "   • Abrir em VSCode com extensão SARIF Viewer"
                          echo "   • Receber notificações em Pull Requests"
                      else
                          echo ""
                          echo "✅ Código seguro - nenhuma vulnerabilidade detectada!"
                      fi
                  else
                      echo "❌ Arquivo SARIF não encontrado"
                      exit 1
                  fi

            - name: Upload SARIF to GitHub Code Scanning
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: fortify-artifacts/fortify-sast-results.sarif
              if: always() && steps.scan.outcome == 'success'

            - name: Upload Fortify SARIF artifact (for manual download)
              uses: actions/upload-artifact@v4
              with:
                name: fortify-sarif
                path: fortify-artifacts/fortify-sast-results.sarif
                if-no-files-found: warn
              if: always() 
