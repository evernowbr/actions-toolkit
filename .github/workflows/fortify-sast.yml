name: Fortify SAST

on:
    # repository_dispatch:
    #     types: [fortify_event]
    workflow_call:
        inputs:
            name:
                required: true
                type: string
            version:
                required: true
                type: string
            fortify_scancentral_tool:
                required: true
                type: string
            fortify_translate_name:
                required: true
                type: string
            fortify_translate_additional_flags:
                required: true
                type: string
        secrets:
            FORTIFY_SSC_API_URL:
                required: true
            FORTIFY_UNIFIED_LOGIN_TOKEN:
                required: true
            FORTIFY_CONTROLLER_URL:
                required: true
            FORTIFY_CONTROLLER_TOKEN:
                required: true

jobs:
    scan:
        name: Fortify SAST Scan
        runs-on: self-hosted

        steps:
            - name: Run Scan
              env:
                  fortify_project_name: ${{ inputs.name }}
                  fortify_version_name: ${{ inputs.version }}
                  fortify_translate_name: ${{ inputs.fortify_translate_name }}
                  fortify_scancentral_tool: ${{ inputs.fortify_scancentral_tool }}
                  fortify_translate_additional_flags: ${{ inputs.fortify_translate_additional_flags }}
                  fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
                  fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
                  fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
                  fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
              run: |
                  echo "Executando Fortify SAST"
                  echo "export PATH=\$PATH:/opt/Fortify_ScanCentral_Client_25.2.0_x64/bin" >> /home/github-runner/.bashrc
                  source ~/.bashrc

                  fortify_verificar_resposta_api() {
                      if [ "$exit_code" == "0" ] || [ "$exit_code" == "" ]; then
                          responseCode=$(echo "$response" | jq '.responseCode')
                          if [ "$responseCode" != "200" ] && [ "$responseCode" != "201" ]; then
                              echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $responseCode"
                              echo "‚ùå Resposta da API: $response"
                              exit 1
                          fi
                      else
                          echo "‚ùå Comando retornou $exit_code"
                          echo "‚ùå Mensagem de erro: $response"  
                          exit $exit_code
                      fi
                  }

                  fortify_verificar_codigo_de_resposta() {
                  	if [ "$exit_code" != "0" ]; then
                  		echo "‚ùå Comando retornou $exit_code"
                  		exit $exit_code
                  	fi
                  }

                  fortify_criar_projeto_e_versao() {
                      # Cria um projeto e uma vers√£o novos
                      fortify_project_parameters='{"project":{"name":"'$fortify_project_name'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name":"'$fortify_version_name'","customTagValuesAutoApply":true,"autoPredict":true,"predictionPolicy":"LAB Fortify Policy"}'
                      response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
                      exit_code=$?
                      fortify_verificar_resposta_api
                      fortify_project_id=$(echo "$response" | jq '.data.project.id')
                      fortify_project_version_id=$(echo "$response" | jq '.data.id')
                      echo "‚úÖ Projeto $fortify_project_name criado com ID $fortify_project_id."
                      echo "‚úÖ Vers√£o $fortify_version_name criada com ID $fortify_project_version_id."
                  }

                  fortify_criar_versao() {
                      # Cria uma vers√£o para um projeto j√° existente
                      fortify_project_parameters='{"project":{"name":"'$fortify_project_name'","id":"'$fortify_project_id'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name": "'$fortify_version_name'"}'
                      response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
                      exit_code=$?
                      fortify_verificar_resposta_api
                      fortify_project_version_id=$(echo "$response" | jq '.data.id')
                      echo "‚úÖ Vers√£o $fortify_version_name criada com ID $fortify_project_version_id."
                  }

                  fortify_configurar_projeto() {
                  # Configurar par√¢metros adicionais do projeto
                  fortify_parametros='{"requests":[{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/attributes'","httpVerb":"PUT","postData":[{"values":[{"guid":"New"}],"attributeDefinitionId":5},{"values":[{"guid":"Internal"}],"attributeDefinitionId":6},{"values":[{"guid":"internalnetwork"}],"attributeDefinitionId":7}]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/authEntities'","httpVerb":"PUT","postData":[]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id?hideProgress=true'","httpVerb":"PUT","postData":{"committed":true}}]}'
                  response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/bulk" -d "$fortify_parametros")
                  exit_code=$?
                  fortify_verificar_resposta_api
                  successCount=$(echo "$response" | jq '.successCount')
                  if [ "$successCount" != "3" ]; then
                      echo "‚ùå Par√¢metros adicionais do projeto $fortify_project_name configurados sem sucesso."
                      echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $exit_code"
                      echo "‚ùå Resposta da API: $response"
                      exit 1
                  else
                      echo "‚úÖ Par√¢metros adicionais do projeto $fortify_project_name configurados com sucesso."
                  fi
                  }

                  fortify_regras_processamento() {
                  # Definir regras de processamento de resultados
                  response=$(curl -sS -k -X PUT --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/resultProcessingRules" -d '[{"identifier": "com.fortify.manager.BLL.processingrules.BuildProjectProcessingRule","displayName": "Require approval if the Build Project is different between scans","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.FileCountProcessingRule","displayName": "Require approval if file count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.LOCCountProcessingRule","displayName": "Require approval if line count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.NewerEngineVersionProcessingRule","displayName": "Require approval if the engine version of a scan is newer than the engine version of the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.RulePackVersionProcessingRule","displayName": "Require approval if the rulepacks used in the scan do not match the rulepacks used in the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.WarningProcessingRule","displayName": "Require approval if result has analysis warnings","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.ExternalListVersionProcessingRule","displayName": "Check external metadata file versions in scan against versions on server.","displayable": true,"enabled": false}]')
                  exit_code=$?
                  fortify_verificar_resposta_api
                  echo "‚úÖ Regras de processamento do projeto $fortify_project_name configuradas com sucesso."
                  }

                  # ========== FUN√á√ïES PARA RELAT√ìRIO AVAN√áADO ==========
# Implementa√ß√£o de relat√≥rio visual estilo Trivy Scanner
# - Extrai dados detalhados via API do Fortify SSC
# - Gera tabelas formatadas com vulnerabilidades
# - Breakdown por categoria e severidade  
# - Resumo executivo com recomenda√ß√µes
# - Compat√≠vel com diferentes vers√µes da API (friority/priority)
# - Tratamento robusto de erros e valores ausentes
# - Gera√ß√£o de relat√≥rio SARIF para integra√ß√£o com IDEs
# - CORRE√á√ÉO: Campo fortify_tagged simplificado para evitar erro de arrays nulos

                  fortify_gerar_sarif() {
                      echo "üìã Gerando relat√≥rio SARIF para integra√ß√£o com IDEs..."
                      
                      # Verifica se temos dados para converter
                      if [ ! -f /tmp/fortify_all_issues.json ]; then
                          echo "‚ö†Ô∏è Nenhum dado de vulnerabilidade encontrado para gerar SARIF"
                          return 1
                      fi
                      
                      # Cria diret√≥rio para artefatos
                      mkdir -p fortify-artifacts
                      
                      # Gera SARIF a partir dos dados do Fortify (COMANDO CORRIGIDO)
                      cat /tmp/fortify_all_issues.json | jq '
                      {
                          "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
                          "version": "2.1.0",
                          "runs": [
                              {
                                  "tool": {
                                      "driver": {
                                          "name": "Fortify Static Code Analyzer",
                                          "version": "25.2.0",
                                          "informationUri": "https://www.microfocus.com/en-us/cyberres/application-security/static-code-analyzer",
                                          "rules": []
                                      }
                                  },
                                  "invocations": [
                                      {
                                          "executionSuccessful": true,
                                          "commandLine": "scancentral",
                                          "startTimeUtc": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                                          "endTimeUtc": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
                                      }
                                  ],
                                  "results": [
                                      .data[] | {
                                          "ruleId": (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                                          "level": (
                                              if (.friority // .priority) == "Critical" then "error"
                                              elif (.friority // .priority) == "High" then "error"
                                              elif (.friority // .priority) == "Medium" then "warning"
                                              elif (.friority // .priority) == "Low" then "note"
                                              else "note"
                                              end
                                          ),
                                          "message": {
                                              "text": (.description // .issueName // "Vulnerabilidade detectada pelo Fortify")
                                          },
                                          "locations": [
                                              {
                                                  "physicalLocation": {
                                                      "artifactLocation": {
                                                          "uri": (.fileName // .primaryLocation // .folderName // "Unknown File")
                                                      },
                                                      "region": {
                                                          "startLine": (.lineNumber // 1),
                                                          "startColumn": 1,
                                                          "endLine": (.lineNumber // 1),
                                                          "endColumn": 1
                                                      }
                                                  }
                                              }
                                          ],
                                          "properties": {
                                              "fortify_severity": (.friority // .priority // "Unknown"),
                                              "fortify_category": (.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"),
                                              "fortify_issue_id": (.issueInstanceId // (.id | tostring)),
                                              "fortify_analysis_type": (.analysisType // .analysis.analysisType // .analysisName // .analysis // "N/A"),
                                              "fortify_tagged": "N/A",
                                              "fortify_project": "'$fortify_project_name'",
                                              "fortify_version": "'$fortify_version_name'",
                                              "fortify_project_id": "'$fortify_project_id'",
                                              "fortify_version_id": "'$fortify_project_version_id'"
                                          }
                                      }
                                  ]
                              }
                          ]
                      }' > fortify-artifacts/fortify-sast-results.sarif
                      
                      # Verifica se o SARIF foi gerado com sucesso
                      if [ -f fortify-artifacts/fortify-sast-results.sarif ]; then
                          # Valida o JSON do SARIF
                          if ! cat fortify-artifacts/fortify-sast-results.sarif | jq empty 2>/dev/null; then
                              echo "‚ùå SARIF gerado com JSON inv√°lido"
                              return 1
                          fi
                          
                          sarif_count=$(cat fortify-artifacts/fortify-sast-results.sarif | jq '.runs[0].results | length')
                          echo "‚úÖ SARIF gerado com sucesso: $sarif_count vulnerabilidades convertidas"
                          echo "üìÅ Arquivo: fortify-artifacts/fortify-sast-results.sarif"
                          
                          # Exibe informa√ß√µes sobre o SARIF gerado
                          echo "üìä Resumo do SARIF:"
                          echo "   - Formato: SARIF 2.1.0"
                          echo "   - Ferramenta: Fortify Static Code Analyzer"
                          echo "   - Projeto: $fortify_project_name"
                          echo "   - Vers√£o: $fortify_version_name"
                          echo "   - Total de findings: $sarif_count"
                          
                          # Verifica se h√° vulnerabilidades
                          if [ "$sarif_count" -gt 0 ]; then
                              echo "üéØ SARIF v√°lido com $sarif_count vulnerabilidades para an√°lise"
                          else
                              echo "‚ö†Ô∏è SARIF gerado mas sem vulnerabilidades - verifique se o scan encontrou issues"
                          fi
                          
                          return 0
                      else
                          echo "‚ùå Falha ao gerar arquivo SARIF"
                          return 1
                      fi
                  }

                  fortify_extrair_estatisticas_completas() {
                      echo "üìä Extraindo estat√≠sticas completas de vulnerabilidades..."
                      
                      # Verifica se temos o project_version_id
                      if [ -z "$fortify_project_version_id" ]; then
                          echo "‚ùå ID da vers√£o do projeto n√£o encontrado. N√£o √© poss√≠vel gerar relat√≥rio."
                          return 1
                      fi
                      
                      # Verifica se o scan est√° completo
                      echo "üîç Verificando status do scan..."
                      scan_status_response=$(curl -sS -k -X GET --header 'Content-Type: application/json' \
                          --header 'Accept: application/json' \
                          --header "Authorization: FortifyToken $fortify_unified_login_token" \
                          "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id")
                      exit_code=$?
                      
                      if [ "$exit_code" == "0" ]; then
                          scan_status=$(echo "$scan_status_response" | jq -r '.data.status // "UNKNOWN"')
                          echo "üìä Status do scan: $scan_status"
                          
                          if [ "$scan_status" == "REQUIRES_AUTH" ] || [ "$scan_status" == "PROCESSING" ]; then
                              echo "‚è≥ Scan ainda em processamento..."
                              return 1
                          fi
                      fi
                      
                      # Busca TODAS as vulnerabilidades (sem filtro de severidade)
                      echo "üîç Buscando vulnerabilidades..."
                      all_issues_response=$(curl -sS -k -X GET --header 'Content-Type: application/json' \
                          --header 'Accept: application/json' \
                          --header "Authorization: FortifyToken $fortify_unified_login_token" \
                          "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?limit=1000")
                      exit_code=$?
                      
                      # Verifica se a API retornou erro
                      if [ "$exit_code" != "0" ]; then
                          echo "‚ùå Erro ao consultar vulnerabilidades: $exit_code"
                          return 1
                      fi
                      
                      # Verifica se a resposta tem dados v√°lidos
                      if [ -z "$all_issues_response" ] || [ "$all_issues_response" = "null" ]; then
                          echo "‚ö†Ô∏è Nenhum dado de vulnerabilidade retornado pela API."
                          return 1
                      fi
                      
                      # Verifica se h√° erro na resposta JSON
                      error_message=$(echo "$all_issues_response" | jq -r '.message // empty')
                      if [ -n "$error_message" ]; then
                          echo "‚ùå Erro da API: $error_message"
                          return 1
                      fi
                      
                      # Verifica se h√° dados na resposta
                      data_count=$(echo "$all_issues_response" | jq '.data | length' 2>/dev/null || echo "0")
                      if [ "$data_count" == "0" ]; then
                          echo "‚ö†Ô∏è Nenhuma vulnerabilidade encontrada no scan atual."
                          echo "0" > /tmp/fortify_total_count
                          echo "0" > /tmp/fortify_critical_count  
                          echo "0" > /tmp/fortify_high_count
                          echo "0" > /tmp/fortify_medium_count
                          echo "0" > /tmp/fortify_low_count
                          echo '{"data":[]}' > /tmp/fortify_all_issues.json
                          return 0
                      fi
                      
                      echo "‚úÖ Encontradas $data_count vulnerabilidades para processamento"
                      
                      # Salva os dados para an√°lise
                      echo "$all_issues_response" > /tmp/fortify_all_issues.json
                      
                      # Contadores por severidade (tenta friority e priority como fallback)
                      critical_count=$(echo "$all_issues_response" | jq '[.data[] | select((.friority // .priority) == "Critical")] | length')
                      high_count=$(echo "$all_issues_response" | jq '[.data[] | select((.friority // .priority) == "High")] | length')
                      medium_count=$(echo "$all_issues_response" | jq '[.data[] | select((.friority // .priority) == "Medium")] | length')
                      low_count=$(echo "$all_issues_response" | jq '[.data[] | select((.friority // .priority) == "Low")] | length')
                      total_count=$(echo "$all_issues_response" | jq '.data | length')
                      
                      # Valida se os contadores s√£o n√∫meros v√°lidos
                      critical_count=${critical_count:-0}
                      high_count=${high_count:-0}
                      medium_count=${medium_count:-0}
                      low_count=${low_count:-0}
                      total_count=${total_count:-0}
                      
                      # Salva para uso posterior
                      echo "$critical_count" > /tmp/fortify_critical_count
                      echo "$high_count" > /tmp/fortify_high_count  
                      echo "$medium_count" > /tmp/fortify_medium_count
                      echo "$low_count" > /tmp/fortify_low_count
                      echo "$total_count" > /tmp/fortify_total_count
                  }

                  gerar_relatorio_fortify() {
                    echo " "
                    echo " "
                    echo "+----------------- üìä FORTIFY SAST SCAN SUMMARY --------------------+"
                    echo "| Projeto: $fortify_project_name $fortify_version_name"
                    echo "+--------------------------------------------------------------------+"
                    
                    # L√™ contadores salvos
                    critical_count=$(cat /tmp/fortify_critical_count 2>/dev/null || echo 0)
                    high_count=$(cat /tmp/fortify_high_count 2>/dev/null || echo 0)
                    medium_count=$(cat /tmp/fortify_medium_count 2>/dev/null || echo 0)
                    low_count=$(cat /tmp/fortify_low_count 2>/dev/null || echo 0)
                    total_count=$(cat /tmp/fortify_total_count 2>/dev/null || echo 0)
                    
                    echo "| Total: $total_count (CRITICAL: $critical_count, HIGH: $high_count, MEDIUM: $medium_count, LOW: $low_count)"
                    echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
                    echo "| CATEGORY                     | ISSUE ID   | SEVERITY | PRIMARY LOCATION            | TAGGED         | RECOMMENDATIONS               |"
                    echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
                    
                    # TABELA DETALHADA DE FINDINGS
                    cat /tmp/fortify_all_issues.json 2>/dev/null | jq -r '
                      .data | .[0:10] | .[] | [
                        (if .subCategoryName then .subCategoryName
                         elif .categoryName then .categoryName
                         elif .issueName then .issueName
                         elif .subCategory then .subCategory
                         elif .category then .category
                         elif .kingdom then .kingdom
                         else "Unknown"
                         end),
                        (.issueInstanceId // (.id | tostring)),
                        (.friority // .priority // "Unknown"),
                        ((.fileName // .primaryLocation // .folderName // "Unknown File") + ":" + ((.lineNumber // "N/A")|tostring)),
                        (.analysisType // .analysis.analysisType // .analysisName // .analysis // (.customAttributes[]? | select(.name=="Tagged") | .value) // (.attributes[]? | select(.name=="Tagged") | .value) // "N/A"),
                        (.description // "Ver detalhes no SSC")
                      ] | @tsv' | while IFS=$'\t' read -r category issue severity location tagged recommendation; do
                        mapfile -t lines < <(echo "$category" | fold -s -w 28 | head -n 3)
                        for i in "${!lines[@]}"; do
                          if [[ $i -eq 0 ]]; then
                            printf "| %-28s | %-10s | %-8s | %-27s | %-15s | %-29s |\n" \
                              "${lines[$i]}" "${issue:0:10}" "${severity:0:8}" "${location:0:27}" "${tagged:0:15}" "${recommendation:0:29}"
                          else
                            printf "| %-28s | %-10s | %-8s | %-27s | %-15s | %-29s |\n" "${lines[$i]}" "" "" "" "" ""
                          fi
                        done
                        echo "+------------------------------+------------+----------+-----------------------------+----------------+-------------------------------+"
                    done
                    
                    # BREAKDOWN DETALHADO POR CATEGORIA E SEVERIDADE
                    echo " "
                    echo "üîç DETAILED BREAKDOWN BY CATEGORY:"
                    echo "+------------------------------+------------+----------+----------+----------+---------------+"
                    echo "| CATEGORY                     | CRITICAL   | HIGH     | MEDIUM   | LOW      | TOTAL ISSUES  |"
                    echo "+------------------------------+------------+----------+----------+----------+---------------+"
                    
                    cat /tmp/fortify_all_issues.json | jq -r '
                      .data[] | 
                      [(.subCategoryName // .categoryName // .issueName // .subCategory // .category // .kingdom // "Unknown"), (.friority // .priority // "Unknown")] | @tsv' | awk -F'\t' '
                      function wrap(str, width, arr, n, out, i, len) {
                        n = split(str, arr, " ");
                        out = arr[1];
                        len = length(arr[1]);
                        for (i=2; i<=n; i++) {
                          if (len + 1 + length(arr[i]) > width) {
                            out = out "\n" arr[i];
                            len = length(arr[i]);
                          } else {
                            out = out " " arr[i];
                            len += 1 + length(arr[i]);
                          }
                        }
                        return out;
                      }
                      {
                        c[$1, $2]++;
                        cat[$1]=1;
                      }
                      END {
                        sep = "+------------------------------+------------+----------+----------+----------+---------------+";
                        for (k in cat) {
                          crit = c[k, "Critical"]+0;
                          high = c[k, "High"]+0;
                          med  = c[k, "Medium"]+0;
                          low  = c[k, "Low"]+0;
                          total = crit+high+med+low;
                          wrapped = wrap(k, 28);
                          n = split(wrapped, lines, "\n");
                          for (i=1; i<=n; i++) {
                            if (i==1) {
                              printf "| %-28s | %-10s | %-8s | %-8s | %-8s | %-13s |\n", lines[i], crit, high, med, low, total;
                            } else {
                              printf "|   %-26s | %-10s | %-8s | %-8s | %-8s | %-13s |\n", lines[i], "", "", "", "", "";
                            }
                          }
                          print sep;
                        }
                        
                      }'
                    echo " "
                    echo "üìä EXECUTIVE SUMMARY:"
                    echo "+-------------------------------+"
                    printf "| %-29s|\n" "CRITICAL: $critical_count"
                    printf "| %-29s|\n" "HIGH:    $high_count"
                    printf "| %-29s|\n" "MEDIUM:  $medium_count"
                    printf "| %-29s|\n" "LOW:     $low_count"
                    printf "| %-29s|\n" "TOTAL ISSUES FOUND: $total_count"
                    echo "+-------------------------------+"
                    echo " "
                    # Garantir link absoluto
                    echo "üîó Detailed Report: https://fortify-ssc.evernow.com.br/html/ssc/version/${fortify_project_version_id}/audit"
                    echo "+-------------------------------------------------------------------------------------------------------------+"
                    echo " "
                  }
                  
                  # ========== EXECU√á√ÉO PRINCIPAL ==========
                  
                  echo '   ____            __   _  ___        ____ ___    ____ ______ '
                  echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
                  echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
                  echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
                  echo '                            /___/                             '
                  
                  # Verificar se projeto e vers√£o j√° existem
                  echo "üîç Verificando se o projeto $fortify_project_name existe no SSC..."
                  response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true")
                  exit_code=$?
                  fortify_verificar_resposta_api
                  fortify_project_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | .project.id' | head -1 | awk '{$1=$1};1')
                  fortify_project_version_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | select(.name=="'$fortify_version_name'") | .id' | awk '{$1=$1};1')
                  
                  if [ "$fortify_project_version_id" != "" ]; then
                      # J√° existe projeto e vers√£o no SSC
                      echo "‚úÖ O projeto $fortify_project_name j√° existe no SSC com ID $fortify_project_id."
                      echo "‚úÖ A vers√£o $fortify_version_name j√° existe no SSC com ID $fortify_project_version_id."
                  elif [ "$fortify_project_id" != "" ]; then
                      # J√° existe projeto (sem vers√£o) no SSC
                      echo "‚úÖ O projeto $fortify_project_name j√° existe no SSC com ID $fortify_project_id. Criando vers√£o..."
                      fortify_criar_versao
                  else
                      # N√£o tem projeto nem vers√£o no SSC
                      echo "‚ö†Ô∏è O projeto $fortify_project_name ainda n√£o existe no SSC. Criando projeto e vers√£o..."
                      fortify_criar_projeto_e_versao
                  fi
                  
                  fortify_configurar_projeto
                  fortify_regras_processamento
                  
                  echo "üîß Executando Scancentral Client"
                  output=$($fortify_scancentral_tool -ssctoken $fortify_controller_token -url $fortify_controller_url start -skipBuild -block --log-file fortify.log --overwrite -application $fortify_project_name -version $fortify_version_name --upload-to-ssc --ssc-upload-token $fortify_controller_token 2>&1 | tee /dev/stderr )                    
                  
                  # Verifica o c√≥digo de resposta
                  exit_code=$?
                  fortify_verificar_codigo_de_resposta
                    
                  # Extrai o job token da sa√≠da usando grep e regex
                  fortify_job_token=$(echo "$output" | grep "Submitted job and received token" | grep -E -o "[a-f0-9-]{36}")
                    
                  # Verifica se o job token foi encontrado
                  if [ -z "$fortify_job_token" ]; then
                      echo "‚ùå Job token n√£o foi criado."
                      exit 1
                  else
                      echo "‚úÖ Arquivos para scan enviados com sucesso. ID do Scan: $fortify_job_token"
                  fi
                    
                                      # ========== GERA RELAT√ìRIO DETALHADO ANTES DO GATE ==========
                    echo ""
                    echo "‚è≥ Aguardando finaliza√ß√£o do scan para gerar relat√≥rio detalhado..."
                    
                    # Aguarda o scan processar com retry inteligente
                    max_retries=5
                    retry_count=0
                    while [ $retry_count -lt $max_retries ]; do
                        echo "üîÑ Tentativa $((retry_count + 1))/$max_retries - Aguardando processamento..."
                        sleep 30  # Aguarda 30s entre tentativas
                        
                        # Tenta extrair dados
                        if fortify_extrair_estatisticas_completas; then
                            # Verifica se h√° dados v√°lidos
                            if [ -f /tmp/fortify_all_issues.json ]; then
                                data_count=$(cat /tmp/fortify_all_issues.json | jq '.data | length' 2>/dev/null || echo "0")
                                if [ "$data_count" -gt 0 ]; then
                                    echo "‚úÖ Dados extra√≠dos com sucesso: $data_count vulnerabilidades encontradas"
                                    break
                                else
                                    echo "‚ö†Ô∏è Scan ainda processando... (0 vulnerabilidades encontradas)"
                                fi
                            fi
                        fi
                        
                        retry_count=$((retry_count + 1))
                    done
                    
                    if [ $retry_count -eq $max_retries ]; then
                        echo "‚ö†Ô∏è Timeout: Scan pode ainda estar processando. Continuando com dados dispon√≠veis..."
                    fi
                    
                  # Extrai estat√≠sticas completas
                  if fortify_extrair_estatisticas_completas; then
                      # Gera relat√≥rio visual apenas se a extra√ß√£o foi bem-sucedida
                      echo ""
                      echo "üìä GERANDO RELAT√ìRIO DETALHADO:"
                      gerar_relatorio_fortify
                        
                      # Gera relat√≥rio SARIF para integra√ß√£o com IDEs
                      echo ""
                      echo "üîó GERANDO RELAT√ìRIO SARIF:"
                      if fortify_gerar_sarif; then
                          echo "‚úÖ SARIF gerado com sucesso para integra√ß√£o com IDEs"
                      else
                          echo "‚ö†Ô∏è N√£o foi poss√≠vel gerar SARIF, mas o relat√≥rio detalhado foi criado"
                      fi
                  else
                      echo "‚ö†Ô∏è N√£o foi poss√≠vel extrair dados de vulnerabilidades para gerar relat√≥rio detalhado."
                      echo "   O gate de qualidade ainda ser√° aplicado normalmente."
                  fi
                    
                  echo "‚öôÔ∏è Iniciando processamento das regras de gate para o projeto."
                    
                  regras_json='[
                    {
                      "gate": "audited:false [fortify priority order]:critical [fortify priority order]:high",
                      "name": "default",
                      "bypass": "false"
                    },
                    {
                      "gate": "audited:false [fortify priority order]:critical [fortify priority order]:high",
                      "name": "teste",
                      "bypass": "true"
                    }
                  ]'
                    
                  # Obt√©m regra default
                  gate=$(echo "$regras_json" | jq --compact-output --raw-output '.[] | select(.name=="default") | .gate')
                  if [ -z "$gate" ]; then
                      echo "‚ùå Nenhuma regra 'default' foi definida para o projeto no Fortify."
                      exit 1
                  fi
                    
                  bypass=$(echo "$regras_json" | jq --compact-output --raw-output '.[] | select(.name=="default") | .bypass')
                  filtro_aplicado="$gate"
                    
                  # Verifica se a regra ser√° aplicada ou ignorada (bypass)
                  if [ "$bypass" == "true" ]; then
                      echo "‚ö†Ô∏è  Bypass ativado: a regra 'default' n√£o ser√° aplicada."
                      echo "‚úÖ Continua√ß√£o do pipeline permitida."
                  else
                      echo "üîí Bypass desativado: a regra 'default' ser√° aplicada."
                      echo "üîç Filtro aplicado: \`$filtro_aplicado\`"
                      filtro_url_encoded=$(echo "$filtro_aplicado" | jq -sRr '@uri')
                      echo "üì° Consultando vulnerabilidades no Fortify SSC..."
                    
                      response=$(curl -sS -k -X GET --header 'Content-Type: application/json' \
                          --header 'Accept: application/json' \
                          --header "Authorization: FortifyToken $fortify_unified_login_token" \
                          "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?qm=issues&q=$filtro_url_encoded")
                      exit_code=$?
                    
                      fortify_verificar_resposta_api
                    
                      num_issues=$(echo "$response" | jq '.count')
                    
                      if [ "$num_issues" -gt 0 ]; then
                          echo "‚ùå Gate falhou: **$num_issues** vulnerabilidades encontradas com base no filtro aplicado."
                          echo "üìÑ Verifique o relat√≥rio detalhado acima para mais informa√ß√µes."
                          echo '  _____       __         ____       _  __ '
                          echo ' / ___/___ _ / /_ ___   / __/___ _ (_)/ / '
                          echo '/ (_ // _ `// __// -_) / _/ / _ `// // /  '
                          echo '\___/ \_,_/ \__/ \__/ /_/   \_,_//_//_/   '
                          exit 1
                      else
                          echo "‚úÖ Gate aprovado: Nenhuma vulnerabilidade cr√≠tica ou alta encontrada."
                          echo "üöÄ Continua√ß√£o do build autorizada."
                          echo '  _____       __         ___                 '
                          echo ' / ___/___ _ / /_ ___   / _ \ ___ _ ___  ___ '
                          echo '/ (_ // _ `// __// -_) / ___// _ `/(_-< (_-< '
                          echo '\___/ \_,_/ \__/ \__/ /_/    \_,_//___//___/ '
                      fi
                  fi

                  # Ap√≥s gerar o relat√≥rio detalhado, salvar findings como artefato
                  echo "Salvando findings do Fortify como artefato para an√°lise..."
                  if [ -f /tmp/fortify_all_issues.json ]; then
                    mkdir -p fortify-artifacts
                    cp /tmp/fortify_all_issues.json fortify-artifacts/
                  fi
                    
                  # Upload do SARIF para GitHub Code Scanning (se dispon√≠vel)
                  if [ -f fortify-artifacts/fortify-sast-results.sarif ]; then
                      echo "üì§ Preparando upload do SARIF para GitHub Code Scanning..."
                      echo "üîó O arquivo SARIF est√° dispon√≠vel em: fortify-artifacts/fortify-sast-results.sarif"
                      echo "üí° Para upload autom√°tico, adicione o step 'github/codeql-action/upload-sarif@v3' no workflow"
                  fi

            # ========== UPLOAD DE ARTEFATOS ==========
            - name: Verificar conte√∫do do SARIF
              run: |
                  echo "üîç Verificando conte√∫do do arquivo SARIF..."
                  if [ -f fortify-artifacts/fortify-sast-results.sarif ]; then
                      sarif_count=$(cat fortify-artifacts/fortify-sast-results.sarif | jq '.runs[0].results | length' 2>/dev/null || echo "0")
                      echo "üìä SARIF cont√©m $sarif_count vulnerabilidades"
                      
                      if [ "$sarif_count" -gt 0 ]; then
                          echo "‚úÖ SARIF v√°lido com $sarif_count findings"
                      else
                          echo "‚ö†Ô∏è SARIF gerado mas sem vulnerabilidades - pode ser que o scan ainda esteja processando"
                          echo "üìÑ Verificando arquivo JSON original..."
                          if [ -f /tmp/fortify_all_issues.json ]; then
                              json_count=$(cat /tmp/fortify_all_issues.json | jq '.data | length' 2>/dev/null || echo "0")
                              echo "üìä JSON original cont√©m $json_count vulnerabilidades"
                          fi
                      fi
                  else
                      echo "‚ùå Arquivo SARIF n√£o encontrado"
                  fi

            - name: Upload Fortify SARIF artifact
              uses: actions/upload-artifact@v4
              with:
                name: fortify-sarif
                path: fortify-artifacts/fortify-sast-results.sarif
                if-no-files-found: warn
              if: always()

            - name: Upload Fortify artifacts directory
              uses: actions/upload-artifact@v4
              with:
                name: fortify-artifacts
                path: fortify-artifacts/
                if-no-files-found: warn
              if: always()

            - name: Upload SARIF to GitHub Code Scanning
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: fortify-artifacts/fortify-sast-results.sarif
              if: always() && steps.scan.outcome == 'success'

    # process-webhook:
    #     runs-on: self-hosted
    #     name: Fortify Webhook SAST
    #     if: github.event_name == 'repository_dispatch'
    #     steps:
    #       - name: Exibir Payload Completo (Formatado)
    #         run: |
    #           echo "‚úÖ Payload Recebido:"
    #           echo '${{ toJson(github.event.client_payload) }}' | jq

    #       - name: Exibir Dados Individuais
    #         run: |
    #           echo "üöÄ Webhook do Fortify recebido!"
    #           echo "üì¶ Projeto: ${{ github.event.client_payload.projectName }} (ID: ${{ github.event.client_payload.projectId }})"
    #           echo "üîÑ Vers√£o: ${{ github.event.client_payload.projectVersionName }} (ID: ${{ github.event.client_payload.projectVersionId }})"
    #           echo "üõ†Ô∏è Evento: ${{ github.event.client_payload.events[0].event }}"
    #           echo "üìÇ Arquivo: ${{ github.event.client_payload.events[0].filename }}"
    #           echo "üìÖ Data do Evento: ${{ github.event.client_payload.triggeredAt }}"
    #           echo "üîó Fortify SSC URL: ${{ github.event.client_payload.sscUrl }}"
    #           echo "üÜî Webhook ID: ${{ github.event.client_payload.webHookId }}"
