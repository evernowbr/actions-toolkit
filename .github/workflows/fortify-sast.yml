name: Fortify SAST

on:
    workflow_call:
        inputs:
            name:
                required: true
                type: string
            version:
                required: true
                type: string
            fortify_scancentral_tool:
                required: true
                type: string
            fortify_translate_name:
                required: true
                type: string
            fortify_translate_additional_flags:
                required: true
                type: string
        secrets:
            FORTIFY_SSC_API_URL:
                required: true
            FORTIFY_UNIFIED_LOGIN_TOKEN:
                required: true
            FORTIFY_CONTROLLER_URL:
                required: true
            FORTIFY_CONTROLLER_TOKEN:
                required: true

jobs:
    scan:
        runs-on: self-hosted

        steps:
            # Runs a single command using the runners shell
            - name: Run Scan
              env:
                  fortify_project_name: ${{ inputs.name }}
                  fortify_version_name: ${{ inputs.version }}
                  fortify_translate_name: ${{ inputs.fortify_translate_name }}
                  fortify_scancentral_tool: ${{ inputs.fortify_scancentral_tool }}
                  fortify_translate_additional_flags: ${{ inputs.fortify_translate_additional_flags }}
                  fortify_ssc_api_url: ${{ secrets.FORTIFY_SSC_API_URL }}
                  fortify_unified_login_token: ${{ secrets.FORTIFY_UNIFIED_LOGIN_TOKEN }}
                  fortify_controller_url: ${{ secrets.FORTIFY_CONTROLLER_URL }}
                  fortify_controller_token: ${{ secrets.FORTIFY_CONTROLLER_TOKEN }}
              run: |
                  echo "Executando Fortify SAST"
                  echo "export PATH=\$PATH:/opt/Fortify_ScanCentral_Client_24.4.0_x64/bin" >> /home/github-runner/.bashrc
                  source ~/.bashrc

                  fortify_verificar_resposta_api() {
                      if [ "$exit_code" == "0" ] || [ "$exit_code" == "" ]; then
                          responseCode=$(echo "$response" | jq '.responseCode')
                          if [ "$responseCode" != "200" ] && [ "$responseCode" != "201" ]; then
                              echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $responseCode"
                              echo "‚ùå Resposta da API: $response"
                              exit 1
                          fi
                      else
                          echo "‚ùå Comando retornou $exit_code"
                          echo "‚ùå Mensagem de erro: $response"  
                          exit $exit_code
                      fi
                  }

                  fortify_verificar_codigo_de_resposta() {
                  	if [ "$exit_code" != "0" ]; then
                  		echo "‚ùå Comando retornou $exit_code"
                  		exit $exit_code
                  	fi
                  }

                  fortify_criar_projeto_e_versao() {
                      # Cria um projeto e uma vers√£o novos
                      fortify_project_parameters='{"project":{"name":"'$fortify_project_name'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name":"'$fortify_version_name'","customTagValuesAutoApply":true,"autoPredict":true,"predictionPolicy":"LAB Fortify Policy"}'
                      response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
                      exit_code=$?
                      fortify_verificar_resposta_api
                      fortify_project_id=$(echo "$response" | jq '.data.project.id')
                      fortify_project_version_id=$(echo "$response" | jq '.data.id')
                      echo "‚úÖ Projeto $fortify_project_name criado com ID $fortify_project_id."
                      echo "‚úÖ Vers√£o $fortify_version_name criada com ID $fortify_project_version_id."
                  }

                  fortify_criar_versao() {
                      # Cria uma vers√£o para um projeto j√° existente
                      fortify_project_parameters='{"project":{"name":"'$fortify_project_name'","id":"'$fortify_project_id'"},"issueTemplateId":"Prioritized-HighRisk-Project-Template","name": "'$fortify_version_name'"}'
                      response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions" -d "$fortify_project_parameters")
                      exit_code=$?
                      fortify_verificar_resposta_api
                      fortify_project_version_id=$(echo "$response" | jq '.data.id')
                      echo "‚úÖ Vers√£o $fortify_version_name criada com ID $fortify_project_version_id."
                  }

                  fortify_configurar_projeto() {
                  # Configurar par√¢metros adicionais do projeto
                  fortify_parametros='{"requests":[{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/attributes'","httpVerb":"PUT","postData":[{"values":[{"guid":"New"}],"attributeDefinitionId":5},{"values":[{"guid":"Internal"}],"attributeDefinitionId":6},{"values":[{"guid":"internalnetwork"}],"attributeDefinitionId":7}]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/authEntities'","httpVerb":"PUT","postData":[]},{"uri":"'$fortify_ssc_api_url/projectVersions/$fortify_project_version_id?hideProgress=true'","httpVerb":"PUT","postData":{"committed":true}}]}'
                  response=$(curl -sS -k -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/bulk" -d "$fortify_parametros")
                  exit_code=$?
                  fortify_verificar_resposta_api
                  successCount=$(echo "$response" | jq '.successCount')
                  if [ "$successCount" != "3" ]; then
                      echo "‚ùå Par√¢metros adicionais do projeto $fortify_project_name configurados sem sucesso."
                      echo "‚ùå C√≥digo de retorno diferente de 200: API retornou c√≥digo $exit_code"
                      echo "‚ùå Resposta da API: $response"
                      exit 1
                  else
                      echo "‚úÖ Par√¢metros adicionais do projeto $fortify_project_name configurados com sucesso."
                  fi
                  }

                  fortify_regras_processamento() {
                  # Definir regras de processamento de resultados
                  response=$(curl -sS -k -X PUT --header "Content-Type: application/json" --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/resultProcessingRules" -d '[{"identifier": "com.fortify.manager.BLL.processingrules.BuildProjectProcessingRule","displayName": "Require approval if the Build Project is different between scans","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.FileCountProcessingRule","displayName": "Require approval if file count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.LOCCountProcessingRule","displayName": "Require approval if line count differs by more than 10%","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.NewerEngineVersionProcessingRule","displayName": "Require approval if the engine version of a scan is newer than the engine version of the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.RulePackVersionProcessingRule","displayName": "Require approval if the rulepacks used in the scan do not match the rulepacks used in the previous scan","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.WarningProcessingRule","displayName": "Require approval if result has analysis warnings","displayable": true,"enabled": false},{"identifier": "com.fortify.manager.BLL.processingrules.ExternalListVersionProcessingRule","displayName": "Check external metadata file versions in scan against versions on server.","displayable": true,"enabled": false}]')
                  exit_code=$?
                  fortify_verificar_resposta_api
                  echo "‚úÖ Regras de processamento do projeto $fortify_project_name configuradas com sucesso."
                  }

                  echo '   ____            __   _  ___        ____ ___    ____ ______ '
                  echo '  / __/___   ____ / /_ (_)/ _/__ __  / __// _ |  / __//_  __/ '
                  echo ' / _/ / _ \ / __// __// // _// // / _\ \ / __ | _\ \   / /    ' 
                  echo '/_/   \___//_/   \__//_//_/  \_, / /___//_/ |_|/___/  /_/     '
                  echo '                            /___/                             '

                  # Verificar se projeto e vers√£o j√° existem
                  echo "üîç Verificando se o projeto $fortify_project_name existe no SSC..."
                  response=$(curl -sS -k -X GET --header "Accept: application/json" --header "Authorization: FortifyToken $fortify_unified_login_token" "$fortify_ssc_api_url/projectVersions?q=$fortify_project_name&fulltextsearch=true")
                  exit_code=$?
                  fortify_verificar_resposta_api
                  fortify_project_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | .project.id' | head -1 | awk '{$1=$1};1')
                  fortify_project_version_id=$(echo "$response" | jq '.data[] | select(.project.name=="'$fortify_project_name'") | select(.name=="'$fortify_version_name'") | .id' | awk '{$1=$1};1')

                  if [ "$fortify_project_version_id" != "" ]; then
                      # J√° existe projeto e vers√£o no SSC
                      echo "‚úÖ O projeto $fortify_project_name j√° existe no SSC com ID $fortify_project_id."
                      echo "‚úÖ A vers√£o $fortify_version_name j√° existe no SSC com ID $fortify_project_version_id."
                  elif [ "$fortify_project_id" != "" ]; then
                      # J√° existe projeto (sem vers√£o) no SSC
                      echo "‚úÖ O projeto $fortify_project_name j√° existe no SSC com ID $fortify_project_id. Criando vers√£o..."
                      fortify_criar_versao
                  else
                      # N√£o tem projeto nem vers√£o no SSC
                      echo "‚ö†Ô∏è O projeto $fortify_project_name ainda n√£o existe no SSC. Criando projeto e vers√£o..."
                      fortify_criar_projeto_e_versao
                  fi

                  fortify_configurar_projeto
                  fortify_regras_processamento

                  echo "üîß Executando Scancentral Client 
                  $fortify_scancentral_tool -ssctoken $fortify_controller_token -url $fortify_controller_url \
                    start $fortify_translate_name \
                    -application $fortify_project_name -version $fortify_version_name \
                    --upload-to-ssc --ssc-upload-token $fortify_controller_token $fortify_translate_additional_flags"

                  # Captura a sa√≠da do comando na vari√°vel 'output'
                  output=$($fortify_scancentral_tool -ssctoken $fortify_controller_token -url $fortify_controller_url \
                    start $fortify_translate_name \
                    -application $fortify_project_name -version $fortify_version_name \
                    --upload-to-ssc --ssc-upload-token $fortify_controller_token $fortify_translate_additional_flags)

                  # Exibe a sa√≠da
                  echo "üîß $output"

                  # Verifica o c√≥digo de resposta
                  fortify_verificar_codigo_de_resposta

                  # Extrai o job token da sa√≠da usando grep e express√µes regulares
                  fortify_job_token=$(echo "$output" | grep "Submitted job and received token" | grep -E -o "[a-f0-9-]{36}")

                  # Verifica se o job token foi encontrado
                  if [ "$fortify_job_token" == "" ]; then
                      echo "‚ùå Job token n√£o foi criado."
                      exit 1
                  else
                      echo "‚úÖ Arquivos para scan enviados com sucesso. ID do Scan: $fortify_job_token"
                  fi

                  fortify_polling_delay=60
                  fortify_not_found_time=0
                  fortify_pending_time=0
                  fortify_scan_time=0
                  fortify_total_time=0
                  fortify_max_not_found_time=20
                  fortify_max_pending_time=60
                  fortify_max_scan_time=60
                  fortify_max_total_time=120
                  echo "üîç Monitorando execu√ß√£o do job $fortify_job_token..."
            
                  while true
                    do
                        response=$(curl -s -k -X GET \
                            --header "Content-Type: application/json" \
                            --header "Accept: application/json" \
                            --header "Authorization: FortifyToken $fortify_unified_login_token" \
                            --trace-ascii fortify-monitorar-scan-trace-$fortify_total_time-GET-cloudjobs.txt \
                            "$fortify_ssc_api_url/cloudjobs/$fortify_job_token")
                    
                        echo "[DEBUG] Resposta da API: $response"
                    
                        response_code=$(echo "$response" | jq '.responseCode')

                        echo "[DEBUG] Response Code: $response_code"
                        echo "[DEBUG] fortify_polling_delay: $fortify_polling_delay"
                        # O job foi enviado, mas ainda n√£o est√° dispon√≠vel na API do SSC
                        if [ "$response_code" == "409" ]; then
                            fortify_message=$(echo "$response" | jq -r '.message')
                            echo "[DEBUG] $fortify_message"
                            ((fortify_not_found_time++))
                            echo "[DEBUG] Tentativa $fortify_not_found_time de $fortify_max_not_found_time"
                    
                            if [ "$fortify_not_found_time" -ge "$fortify_max_not_found_time" ]; then
                                echo "[ ERRO ] Excedido o tempo limite para localiza√ß√£o do job no SSC."
                                exit 1
                            fi
                            sleep "$fortify_polling_delay"
                            continue
                        fi
                    
                        # O job j√° pode ser localizado na API do SSC
                        if [ "$response_code" == "200" ]; then
                            job_state=$(echo "$response" | jq '.data | (.jobState)' | sed 's/"//g')
                            echo "[INFO] Status da execu√ß√£o do job: $job_state"
                            case "$job_state" in
                                UPLOAD_QUEUED)
                                    # Nada a fazer
                                ;;
                                PENDING)
                                    ((fortify_pending_time++))
                                    if [ "$fortify_pending_time" -ge "$fortify_max_pending_time" ]; then
                                        echo "[ ERRO ] Excedido o tempo limite para espera na fila de scan do Fortify."
                                        exit 1
                                    fi
                                ;;
                                SCAN_RUNNING)
                                    ((fortify_scan_time++))
                                    if [ "$fortify_scan_time" -ge "$fortify_max_scan_time" ]; then
                                        echo "[ ERRO ] Excedido o tempo limite para espera na fila de scan do Fortify."
                                        exit 1
                                    fi
                                ;;
                                UPLOAD_COMPLETED)
                                    echo "[ OK ] Job $fortify_job_token executado e armazenado com sucesso."
                                    break
                                ;;
                                *)
                                    echo "O job $fortify_job_token retornou o estado $job_state."
                                    exit 1
                                ;;
                            esac
                        fi
                    
                        if [ -z "$response_code" ]; then
                            echo "[WARNING] C√≥digo de resposta n√£o definido."
                            cat "$fortify_debug_path/fortify-monitorar-scan-trace-$fortify_total_time-GET-cloudjobs.txt"
                        fi
                    
                        if [ "$response_code" != "" ] && [ "$response_code" != "409" ] && [ "$response_code" != "200" ]; then
                            fortify_message=$(echo "$response" | jq '.message' | sed 's/"//g')
                            echo "[ ERRO ] O Fortify SSC retornou o c√≥digo $response_code: $fortify_message"
                            exit 1
                        fi
                    
                        sleep "$fortify_polling_delay"
                        ((fortify_total_time++))
                    
                        if [ "$fortify_total_time" -ge "$fortify_max_total_time" ]; then
                            echo "[ ERRO ] Excedido o tempo limite total para execu√ß√£o do job no Fortify."
                            exit 1
                        fi
                    done

                


                  cat <<'EOF'
                    ____            _  __   ___        ____                      _  __          _____       __       
                    / __/___   ____ (_)/ /_ / _/__ __  / __/___  ____ __ __ ____ (_)/ /_ __ __  / ___/___ _ / /_ ___  
                  / _/ / _ \ / __// // __// _// // / _\ \ / -_)/ __// // // __// // __// // / / (_ // _ `// __// -_) 
                  /_/   \___//_/  /_/ \__//_/  \_, / /___/ \__/ \__/ \_,_//_/  /_/ \__/ \_, /  \___/ \_,_/ \__/ \__/  
                                              /___/                                    /___/                          
                  EOF

                  echo "‚öôÔ∏è Processando regras para projeto $fortify_project..."

                  regras_json=$(cat ./fortify-regras-gate.json)

                  # Regra default
                  gate=$(echo $regras_json | jq --compact-output --raw-output '.[] | select(.name=="default") | .gate')
                  if [ "$gate" == "" ]; then
                      echo " ‚ùå N√£o h√° regra default definida para o projeto no Fortify"
                      exit 1
                  fi
                  bypass=$(echo $regras_json | jq --compact-output --raw-output '.[] | select(.name=="default") | .bypass')

                  filtro_aplicado=$gate

                  # Se o gate estiver habilitado, consultar o n√∫mero de findings que atendem os crit√©rios
                  if [ "$bypass" == "true" ]; then
                      echo "‚úÖ Bypass habilitado para esta regra. O gate n√£o ser√° aplicado."
                      echo '   ____            _  __   ___        ____                      _  __          _____       __       '
                      echo '  / __/___   ____ (_)/ /_ / _/__ __  / __/___  ____ __ __ ____ (_)/ /_ __ __  / ___/___ _ / /_ ___  '
                      echo ' / _/ / _ \ / __// // __// _// // / _\ \ / -_)/ __// // // __// // __// // / / (_ // _ `// __// -_) '
                      echo '/_/   \___//_/  /_/ \__//_/  \_, / /___/ \__/ \__/ \_,_//_/  /_/ \__/ \_, /  \___/ \_,_/ \__/ \__/  '
                      echo '                            /___/                                    /___/                          '   
                  else
                      echo "‚úÖ Bypass desabilitado para esta regra. O gate ser√° aplicado."
                      echo "‚úÖ Filtro aplicado: $filtro_aplicado"
                      filtro_url_encoded=$(echo "$filtro_aplicado" | jq -sRr '@uri')
                      echo "üîç Consultando vulnerabilidades no SSC..."
                      response=$(curl -sS -k -X GET --header 'Content-Type: application/json' \
                          --header 'Accept: application/json' \
                          --header "Authorization: FortifyToken $fortify_unified_login_token" \
                          "$fortify_ssc_api_url/projectVersions/$fortify_project_version_id/issues?qm=issues&q=$filtro_url_encoded")
                      exit_code=$?
                      fortify_verificar_resposta_api
                      num_issues=$(echo $response | jq '.count')
                      
                      if [ $num_issues -gt 0 ]; then
                          echo "‚ùå Gate falhou: $num_issues issues retornadas pelo filtro. Verifique o relat√≥rio publicado nos artefatos."
                          echo -e '\033[31m   ____            _  __   ___        ____                      _  __          _____       __         ___                 \033[0m'
                          echo -e '\033[31m  / __/___   ____ (_)/ /_ / _/__ __  / __/___  ____ __ __ ____ (_)/ /_ __ __  / ___/___ _ / /_ ___   / _ \ ___ _ ___  ___ \033[0m'
                          echo -e '\033[31m / _/ / _ \ / __// // __// _// // / _\ \ / -_)/ __// // // __// // __// // / / (_ // _ `// __// -_) / ___// _ `/(_-< (_-< \033[0m'
                          echo -e '\033[31m/_/   \___//_/  /_/ \__//_/  \_, / /___/ \__/ \__/ \_,_//_/  /_/ \__/ \_, /  \___/ \_,_/ \__/ \__/ /_/    \_,_//___//___/ \033[0m'
                          echo -e '\033[31m                            /___/                                    /___/                                                \033[0m'
                          exit 1
                      else
                          echo "‚úÖ Gate passado com sucesso. Continua√ß√£o do build liberada."
                          echo -e '\033[32m  ____            _  __   ___        ____                      _  __          _____       __         ____       _  __ \033[0m'
                          echo -e '\033[32m  / __/___   ____ (_)/ /_ / _/__ __  / __/___  ____ __ __ ____ (_)/ /_ __ __  / ___/___ _ / /_ ___   / __/___ _ (_)/ /\033[0m'
                          echo -e '\033[32m / _/ / _ \ / __// // __// _// // / _\ \ / -_)/ __// // // __// // __// // / / (_ // _ `// __// -_) / _/ / _ `// // / \033[0m' 
                          echo -e '\033[32m/_/   \___//_/  /_/ \__//_/  \_, / /___/ \__/ \__/ \_,_//_/  /_/ \__/ \_, /  \___/ \_,_/ \__/ \__/ /_/   \_,_//_//_/  \033[0m'  
                          echo -e '\033[32m                            /___/                                    /___/                                            \033[0m'
                      fi
                  fi
